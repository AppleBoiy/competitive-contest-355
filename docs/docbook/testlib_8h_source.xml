<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_testlib_8h_source" xml:lang="en-US">
<title>testlib.h</title>
<indexterm><primary>src/testlib.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_testlib_8h_source_1l00001"/>00001 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00002"/>00002 <emphasis role="comment">&#32;*&#32;It&#32;is&#32;strictly&#32;recommended&#32;to&#32;include&#32;&quot;testlib.h&quot;&#32;before&#32;any&#32;other&#32;include</emphasis>
<anchor xml:id="_testlib_8h_source_1l00003"/>00003 <emphasis role="comment">&#32;*&#32;in&#32;your&#32;code.&#32;In&#32;this&#32;case&#32;testlib&#32;overrides&#32;compiler&#32;specific&#32;&quot;random()&quot;.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00004"/>00004 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00005"/>00005 <emphasis role="comment">&#32;*&#32;If&#32;you&#32;can&apos;t&#32;compile&#32;your&#32;code&#32;and&#32;compiler&#32;outputs&#32;something&#32;about</emphasis>
<anchor xml:id="_testlib_8h_source_1l00006"/>00006 <emphasis role="comment">&#32;*&#32;ambiguous&#32;call&#32;of&#32;&quot;random_shuffle&quot;,&#32;&quot;rand&quot;&#32;or&#32;&quot;srand&quot;&#32;it&#32;means&#32;that</emphasis>
<anchor xml:id="_testlib_8h_source_1l00007"/>00007 <emphasis role="comment">&#32;*&#32;you&#32;shouldn&apos;t&#32;use&#32;them.&#32;Use&#32;&quot;shuffle&quot;,&#32;and&#32;&quot;rnd.next()&quot;&#32;instead&#32;of&#32;them</emphasis>
<anchor xml:id="_testlib_8h_source_1l00008"/>00008 <emphasis role="comment">&#32;*&#32;because&#32;these&#32;calls&#32;produce&#32;stable&#32;result&#32;for&#32;any&#32;C++&#32;compiler.&#32;Read</emphasis>
<anchor xml:id="_testlib_8h_source_1l00009"/>00009 <emphasis role="comment">&#32;*&#32;sample&#32;generator&#32;sources&#32;for&#32;clarification.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00010"/>00010 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00011"/>00011 <emphasis role="comment">&#32;*&#32;Please&#32;read&#32;the&#32;documentation&#32;for&#32;class&#32;&quot;random_t&quot;&#32;and&#32;use&#32;&quot;rnd&quot;&#32;instance&#32;in</emphasis>
<anchor xml:id="_testlib_8h_source_1l00012"/>00012 <emphasis role="comment">&#32;*&#32;generators.&#32;Probably,&#32;these&#32;sample&#32;calls&#32;will&#32;be&#32;useful&#32;for&#32;you:</emphasis>
<anchor xml:id="_testlib_8h_source_1l00013"/>00013 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rnd.next();&#32;rnd.next(100);&#32;rnd.next(1,&#32;2);</emphasis>
<anchor xml:id="_testlib_8h_source_1l00014"/>00014 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rnd.next(3.14);&#32;rnd.next(&quot;[a-z]{1,100}&quot;).</emphasis>
<anchor xml:id="_testlib_8h_source_1l00015"/>00015 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00016"/>00016 <emphasis role="comment">&#32;*&#32;Also&#32;read&#32;about&#32;wnext()&#32;to&#32;generate&#32;off-center&#32;random&#32;distribution.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00017"/>00017 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00018"/>00018 <emphasis role="comment">&#32;*&#32;See&#32;https://github.com/MikeMirzayanov/testlib/&#32;to&#32;get&#32;latest&#32;version&#32;or&#32;bug&#32;tracker.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00019"/>00019 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00020"/>00020 
<anchor xml:id="_testlib_8h_source_1l00021"/>00021 <emphasis role="preprocessor">#ifndef&#32;_TESTLIB_H_</emphasis>
<anchor xml:id="_testlib_8h_source_1l00022"/>00022 <emphasis role="preprocessor">#define&#32;_TESTLIB_H_</emphasis>
<anchor xml:id="_testlib_8h_source_1l00023"/>00023 
<anchor xml:id="_testlib_8h_source_1l00024"/>00024 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00025"/>00025 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;2005-2024</emphasis>
<anchor xml:id="_testlib_8h_source_1l00026"/>00026 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00027"/>00027 
<anchor xml:id="_testlib_8h_source_1l00028"/><link linkend="_testlib_8h_1a1c6d5de492ac61ad29aec7aa9a436bbf">00028</link> <emphasis role="preprocessor">#define&#32;VERSION&#32;&quot;0.9.42-SNAPSHOT&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00029"/>00029 
<anchor xml:id="_testlib_8h_source_1l00030"/>00030 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00031"/>00031 <emphasis role="comment">&#32;*&#32;Mike&#32;Mirzayanov</emphasis>
<anchor xml:id="_testlib_8h_source_1l00032"/>00032 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00033"/>00033 <emphasis role="comment">&#32;*&#32;This&#32;material&#32;is&#32;provided&#32;&quot;as&#32;is&quot;,&#32;with&#32;absolutely&#32;no&#32;warranty&#32;expressed</emphasis>
<anchor xml:id="_testlib_8h_source_1l00034"/>00034 <emphasis role="comment">&#32;*&#32;or&#32;implied.&#32;Any&#32;use&#32;is&#32;at&#32;your&#32;own&#32;risk.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00035"/>00035 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00036"/>00036 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use&#32;or&#32;copy&#32;this&#32;software&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted</emphasis>
<anchor xml:id="_testlib_8h_source_1l00037"/>00037 <emphasis role="comment">&#32;*&#32;without&#32;fee,&#32;provided&#32;the&#32;above&#32;notices&#32;are&#32;retained&#32;on&#32;all&#32;copies.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00038"/>00038 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;modify&#32;the&#32;code&#32;and&#32;to&#32;distribute&#32;modified&#32;code&#32;is&#32;granted,</emphasis>
<anchor xml:id="_testlib_8h_source_1l00039"/>00039 <emphasis role="comment">&#32;*&#32;provided&#32;the&#32;above&#32;notices&#32;are&#32;retained,&#32;and&#32;a&#32;notice&#32;that&#32;the&#32;code&#32;was</emphasis>
<anchor xml:id="_testlib_8h_source_1l00040"/>00040 <emphasis role="comment">&#32;*&#32;modified&#32;is&#32;included&#32;with&#32;the&#32;above&#32;copyright&#32;notice.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00041"/>00041 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00042"/>00042 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00043"/>00043 
<anchor xml:id="_testlib_8h_source_1l00044"/>00044 <emphasis role="comment">/*&#32;NOTE:&#32;This&#32;file&#32;contains&#32;testlib&#32;library&#32;for&#32;C++.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00045"/>00045 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00046"/>00046 <emphasis role="comment">&#32;*&#32;&#32;&#32;Check,&#32;using&#32;testlib&#32;running&#32;format:</emphasis>
<anchor xml:id="_testlib_8h_source_1l00047"/>00047 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;check.exe&#32;&lt;Input_File&gt;&#32;&lt;Output_File&gt;&#32;&lt;Answer_File&gt;&#32;[&lt;Result_File&gt;&#32;[-appes]],</emphasis>
<anchor xml:id="_testlib_8h_source_1l00048"/>00048 <emphasis role="comment">&#32;*&#32;&#32;&#32;If&#32;result&#32;file&#32;is&#32;specified&#32;it&#32;will&#32;contain&#32;results.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00049"/>00049 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00050"/>00050 <emphasis role="comment">&#32;*&#32;&#32;&#32;Validator,&#32;using&#32;testlib&#32;running&#32;format:</emphasis>
<anchor xml:id="_testlib_8h_source_1l00051"/>00051 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;validator.exe&#32;&lt;&#32;input.txt,</emphasis>
<anchor xml:id="_testlib_8h_source_1l00052"/>00052 <emphasis role="comment">&#32;*&#32;&#32;&#32;It&#32;will&#32;return&#32;non-zero&#32;exit&#32;code&#32;and&#32;writes&#32;message&#32;to&#32;standard&#32;output.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00053"/>00053 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00054"/>00054 <emphasis role="comment">&#32;*&#32;&#32;&#32;Generator,&#32;using&#32;testlib&#32;running&#32;format:</emphasis>
<anchor xml:id="_testlib_8h_source_1l00055"/>00055 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;gen.exe&#32;[parameter-1]&#32;[parameter-2]&#32;[...&#32;paramerter-n]</emphasis>
<anchor xml:id="_testlib_8h_source_1l00056"/>00056 <emphasis role="comment">&#32;*&#32;&#32;&#32;You&#32;can&#32;write&#32;generated&#32;test(s)&#32;into&#32;standard&#32;output&#32;or&#32;into&#32;the&#32;file(s).</emphasis>
<anchor xml:id="_testlib_8h_source_1l00057"/>00057 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00058"/>00058 <emphasis role="comment">&#32;*&#32;&#32;&#32;Interactor,&#32;using&#32;testlib&#32;running&#32;format:</emphasis>
<anchor xml:id="_testlib_8h_source_1l00059"/>00059 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;interactor.exe&#32;&lt;Input_File&gt;&#32;&lt;Output_File&gt;&#32;[&lt;Answer_File&gt;&#32;[&lt;Result_File&gt;&#32;[-appes]]],</emphasis>
<anchor xml:id="_testlib_8h_source_1l00060"/>00060 <emphasis role="comment">&#32;*&#32;&#32;&#32;Reads&#32;test&#32;from&#32;inf&#32;(mapped&#32;to&#32;args[1]),&#32;writes&#32;result&#32;to&#32;tout&#32;(mapped&#32;to&#32;argv[2],</emphasis>
<anchor xml:id="_testlib_8h_source_1l00061"/>00061 <emphasis role="comment">&#32;*&#32;&#32;&#32;can&#32;be&#32;judged&#32;by&#32;checker&#32;later),&#32;reads&#32;program&#32;output&#32;from&#32;ouf&#32;(mapped&#32;to&#32;stdin),</emphasis>
<anchor xml:id="_testlib_8h_source_1l00062"/>00062 <emphasis role="comment">&#32;*&#32;&#32;&#32;writes&#32;output&#32;to&#32;program&#32;via&#32;stdout&#32;(use&#32;cout,&#32;printf,&#32;etc).</emphasis>
<anchor xml:id="_testlib_8h_source_1l00063"/>00063 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00064"/>00064 
<anchor xml:id="_testlib_8h_source_1l00065"/><link linkend="_testlib_8h_1aca3ccf9230a0e9c7f28e21d77f26e74f">00065</link> <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_testlib_8h_1aca3ccf9230a0e9c7f28e21d77f26e74f">latestFeatures</link>[]&#32;=&#32;{
<anchor xml:id="_testlib_8h_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;ConstantBoundsLog,&#32;VariablesLog&#32;to&#32;validator&#32;testOverviewLogFile&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Use&#32;setAppesModeEncoding&#32;to&#32;change&#32;xml&#32;encoding&#32;from&#32;windows-1251&#32;to&#32;other&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;rnd.any/wany&#32;use&#32;distance/advance&#32;instead&#32;of&#32;-/+:&#32;now&#32;they&#32;support&#32;sets/multisets&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Use&#32;syntax&#32;`int&#32;t&#32;=&#32;inf.readInt(1,&#32;3,&#32;\&quot;~t\&quot;);`&#32;to&#32;skip&#32;the&#32;lower&#32;bound&#32;check.&#32;Tildes&#32;can&#32;be&#32;used&#32;on&#32;either&#32;side&#32;or&#32;both:&#32;~t,&#32;t~,&#32;~t~&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Supported&#32;EJUDGE&#32;support&#32;in&#32;registerTestlibCmd&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Supported&#32;&apos;--testMarkupFileName&#32;fn&apos;&#32;and&#32;&apos;--testCase&#32;tc/--testCaseFileName&#32;fn&apos;&#32;for&#32;validators&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;opt&#32;defaults&#32;via&#32;opt&lt;T&gt;(key/index,&#32;default_val);&#32;check&#32;unused&#32;opts&#32;when&#32;using&#32;has_opt&#32;or&#32;default&#32;opt&#32;(turn&#32;off&#32;this&#32;check&#32;with&#32;suppressEnsureNoUnusedOpt()).&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;For&#32;checker&#32;added&#32;--group&#32;and&#32;--testset&#32;command&#32;line&#32;params&#32;(like&#32;for&#32;validator),&#32;use&#32;checker.group()&#32;or&#32;checker.testset()&#32;to&#32;get&#32;values&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;quitpi(points_info,&#32;message)&#32;function&#32;to&#32;return&#32;with&#32;_points&#32;exit&#32;code&#32;7&#32;and&#32;given&#32;points_info&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;rnd.partition(size,&#32;sum[,&#32;min_part=1])&#32;returns&#32;random&#32;(unsorted)&#32;partition&#32;which&#32;is&#32;a&#32;representation&#32;of&#32;the&#32;given&#32;`sum`&#32;as&#32;a&#32;sum&#32;of&#32;`size`&#32;positive&#32;integers&#32;(or&#32;&gt;=min_part&#32;if&#32;specified)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;rnd.distinct(size,&#32;n)&#32;and&#32;rnd.distinct(size,&#32;from,&#32;to)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;opt&lt;bool&gt;(\&quot;some_missing_key\&quot;)&#32;returns&#32;false&#32;now&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;has_opt(key)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Abort&#32;validator&#32;on&#32;validator.testset()/validator.group()&#32;if&#32;registered&#32;without&#32;using&#32;command&#32;line&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Print&#32;integer&#32;range&#32;violations&#32;in&#32;a&#32;human&#32;readable&#32;way&#32;like&#32;`violates&#32;the&#32;range&#32;[1,&#32;10^9]`&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Opts&#32;supported:&#32;use&#32;them&#32;like&#32;n&#32;=&#32;opt&lt;int&gt;(\&quot;n\&quot;),&#32;in&#32;a&#32;command&#32;line&#32;you&#32;can&#32;use&#32;an&#32;exponential&#32;notation&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Reformatted&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Use&#32;setTestCase(i)&#32;or&#32;unsetTestCase()&#32;to&#32;support&#32;test&#32;cases&#32;(you&#32;can&#32;use&#32;it&#32;in&#32;any&#32;type&#32;of&#32;program:&#32;generator,&#32;interactor,&#32;validator&#32;or&#32;checker)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;issue&#32;#87:&#32;readStrictDouble&#32;accepts&#32;\&quot;-0.00\&quot;&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;issue&#32;#83:&#32;added&#32;InStream::quitif(condition,&#32;...)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;issue&#32;#79:&#32;fixed&#32;missed&#32;guard&#32;against&#32;repeated&#32;header&#32;include&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;issue&#32;#80:&#32;fixed&#32;UB&#32;in&#32;case&#32;of&#32;huge&#32;quitf&#32;message&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;issue&#32;#84:&#32;added&#32;readXs(size,&#32;indexBase&#32;=&#32;1)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;stringstream&#32;repeated&#32;usage&#32;issue&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;compilation&#32;in&#32;g++&#32;(for&#32;std=c++03)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Batch&#32;of&#32;println&#32;functions&#32;(support&#32;collections,&#32;iterator&#32;ranges)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;rnd.perm(size,&#32;first&#32;=&#32;0)&#32;to&#32;generate&#32;a&#32;`first`-indexed&#32;permutation&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Allow&#32;any&#32;whitespace&#32;in&#32;readInts-like&#32;functions&#32;for&#32;non-validators&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Ignore&#32;4+&#32;command&#32;line&#32;arguments&#32;ifdef&#32;EJUDGE&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Speed&#32;up&#32;of&#32;vtos&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Show&#32;line&#32;number&#32;in&#32;validators&#32;in&#32;case&#32;of&#32;incorrect&#32;format&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Truncate&#32;huge&#32;checker/validator/interactor&#32;message&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;issue&#32;with&#32;readTokenTo&#32;of&#32;very&#32;long&#32;tokens,&#32;now&#32;aborts&#32;with&#32;_pe/_fail&#32;depending&#32;of&#32;a&#32;stream&#32;type&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;InStream::ensure/ensuref&#32;checking&#32;a&#32;condition,&#32;returns&#32;wa/fail&#32;depending&#32;of&#32;a&#32;stream&#32;type&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;compilation&#32;in&#32;VS&#32;2015+&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;space-separated&#32;read&#32;functions:&#32;readWords/readTokens,&#32;multilines&#32;read&#32;functions:&#32;readStrings/readLines&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;space-separated&#32;read&#32;functions:&#32;readInts/readIntegers/readLongs/readUnsignedLongs/readDoubles/readReals/readStrictDoubles/readStrictReals&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;split/tokenize&#32;functions&#32;to&#32;separate&#32;string&#32;by&#32;given&#32;char&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;InStream::readUnsignedLong&#32;and&#32;InStream::readLong&#32;with&#32;unsigned&#32;long&#32;long&#32;parameters&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Supported&#32;--testOverviewLogFileName&#32;for&#32;validator:&#32;bounds&#32;hits&#32;+&#32;features&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;UB&#32;(sequence&#32;points)&#32;in&#32;random_t&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;POINTS_EXIT_CODE&#32;returned&#32;back&#32;to&#32;7&#32;(instead&#32;of&#32;0)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Removed&#32;disable&#32;buffers&#32;for&#32;interactive&#32;problems,&#32;because&#32;it&#32;works&#32;unexpectedly&#32;in&#32;wine&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;InStream&#32;over&#32;string:&#32;constructor&#32;of&#32;InStream&#32;from&#32;base&#32;InStream&#32;to&#32;inherit&#32;policies&#32;and&#32;std::string&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;expectedButFound&#32;quit&#32;function,&#32;examples:&#32;expectedButFound(_wa,&#32;10,&#32;20),&#32;expectedButFound(_fail,&#32;ja,&#32;pa,&#32;\&quot;[n=%d,m=%d]\&quot;,&#32;n,&#32;m)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;incorrect&#32;interval&#32;parsing&#32;in&#32;patterns&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Use&#32;registerGen(argc,&#32;argv,&#32;1)&#32;to&#32;develop&#32;new&#32;generator,&#32;use&#32;registerGen(argc,&#32;argv,&#32;0)&#32;to&#32;compile&#32;old&#32;generators&#32;(originally&#32;created&#32;for&#32;testlib&#32;under&#32;0.8.7)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;disableFinalizeGuard()&#32;to&#32;switch&#32;off&#32;finalization&#32;checkings&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Use&#32;join()&#32;functions&#32;to&#32;format&#32;a&#32;range&#32;of&#32;items&#32;as&#32;a&#32;single&#32;string&#32;(separated&#32;by&#32;spaces&#32;or&#32;other&#32;separators)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Use&#32;-DENABLE_UNEXPECTED_EOF&#32;to&#32;enable&#32;special&#32;exit&#32;code&#32;(by&#32;default,&#32;8)&#32;in&#32;case&#32;of&#32;unexpected&#32;eof.&#32;It&#32;is&#32;good&#32;idea&#32;to&#32;use&#32;it&#32;in&#32;interactors&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Use&#32;-DUSE_RND_AS_BEFORE_087&#32;to&#32;compile&#32;in&#32;compatibility&#32;mode&#32;with&#32;random&#32;behavior&#32;of&#32;versions&#32;before&#32;0.8.7&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;bug&#32;with&#32;nan&#32;in&#32;stringToDouble&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;issue&#32;around&#32;overloads&#32;for&#32;size_t&#32;on&#32;x64&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;attribute&#32;&apos;points&apos;&#32;to&#32;the&#32;XML&#32;output&#32;in&#32;case&#32;of&#32;result=_points&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Exit&#32;codes&#32;can&#32;be&#32;customized&#32;via&#32;macros,&#32;e.g.&#32;-DPE_EXIT_CODE=14&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;InStream&#32;function&#32;readWordTo/readTokenTo/readStringTo/readLineTo&#32;for&#32;faster&#32;reading&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;global&#32;functions:&#32;format(),&#32;englishEnding(),&#32;upperCase(),&#32;lowerCase(),&#32;compress()&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Manual&#32;buffer&#32;in&#32;InStreams,&#32;some&#32;IO&#32;speed&#32;improvements&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;quitif(bool,&#32;const&#32;char*&#32;pattern,&#32;...)&#32;which&#32;delegates&#32;to&#32;quitf()&#32;in&#32;case&#32;of&#32;first&#32;argument&#32;is&#32;true&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Introduced&#32;guard&#32;against&#32;missed&#32;quitf()&#32;in&#32;checker&#32;or&#32;readEof()&#32;in&#32;validators&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Supported&#32;readStrictReal/readStrictDouble&#32;-&#32;to&#32;use&#32;in&#32;validators&#32;to&#32;check&#32;strictly&#32;float&#32;numbers&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Supported&#32;registerInteraction(argc,&#32;argv)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Print&#32;checker&#32;message&#32;to&#32;the&#32;stderr&#32;instead&#32;of&#32;stdout&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Supported&#32;TResult&#32;_points&#32;to&#32;output&#32;calculated&#32;score,&#32;use&#32;quitp(...)&#32;functions&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;to&#32;be&#32;compilable&#32;on&#32;Mac&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;PC_BASE_EXIT_CODE=50&#32;in&#32;case&#32;of&#32;defined&#32;TESTSYS&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;issues&#32;19-21,&#32;added&#32;__attribute__&#32;format&#32;printf&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Some&#32;bug&#32;fixes&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ouf.readInt(1,&#32;100)&#32;and&#32;similar&#32;calls&#32;return&#32;WA&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Modified&#32;random_t&#32;to&#32;avoid&#32;integer&#32;overflow&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Truncated&#32;checker&#32;output&#32;[patch&#32;by&#32;Stepan&#32;Gatilov]&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Renamed&#32;class&#32;random&#32;-&gt;&#32;class&#32;random_t&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Supported&#32;name&#32;parameter&#32;for&#32;read-and-validation&#32;methods,&#32;like&#32;readInt(1,&#32;2,&#32;\&quot;n\&quot;)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;bug&#32;in&#32;readDouble()&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Improved&#32;ensuref(),&#32;fixed&#32;nextLine&#32;to&#32;work&#32;in&#32;case&#32;of&#32;EOF,&#32;added&#32;startTest()&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Supported&#32;\&quot;partially&#32;correct\&quot;,&#32;example:&#32;quitf(_pc(13),&#32;\&quot;result=%d\&quot;,&#32;result)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;shuffle(begin,&#32;end),&#32;use&#32;it&#32;instead&#32;of&#32;random_shuffle(begin,&#32;end)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;readLine(const&#32;string&amp;&#32;ptrn),&#32;fixed&#32;the&#32;logic&#32;of&#32;readLine()&#32;in&#32;the&#32;validation&#32;mode&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Package&#32;extended&#32;with&#32;samples&#32;of&#32;generators&#32;and&#32;validators&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Written&#32;the&#32;documentation&#32;for&#32;classes&#32;and&#32;public&#32;methods&#32;in&#32;testlib.h&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Implemented&#32;random&#32;routine&#32;to&#32;support&#32;generators,&#32;use&#32;registerGen()&#32;to&#32;switch&#32;it&#32;on&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Implemented&#32;strict&#32;mode&#32;to&#32;validate&#32;tests,&#32;use&#32;registerValidation()&#32;to&#32;switch&#32;it&#32;on&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Now&#32;ncmp.cpp&#32;and&#32;wcmp.cpp&#32;are&#32;return&#32;WA&#32;if&#32;answer&#32;is&#32;suffix&#32;or&#32;prefix&#32;of&#32;the&#32;output&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;InStream::readLong()&#32;and&#32;removed&#32;InStream::readLongint()&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Now&#32;no&#32;footer&#32;added&#32;to&#32;each&#32;report&#32;by&#32;default&#32;(use&#32;directive&#32;FOOTER&#32;to&#32;switch&#32;on)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Now&#32;every&#32;checker&#32;has&#32;a&#32;name,&#32;use&#32;setName(const&#32;char*&#32;format,&#32;...)&#32;to&#32;set&#32;it&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Now&#32;it&#32;is&#32;compatible&#32;with&#32;TTS&#32;(by&#32;Kittens&#32;Computing)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;\&apos;ensure(condition,&#32;message&#32;=&#32;\&quot;\&quot;)\&apos;&#32;feature,&#32;it&#32;works&#32;like&#32;assert()&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Fixed&#32;compatibility&#32;with&#32;MS&#32;C++&#32;7.1&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;footer&#32;with&#32;exit&#32;code&#32;information&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;compatibility&#32;with&#32;EJUDGE&#32;(compile&#32;with&#32;EJUDGE&#32;directive)&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Added&#32;compatibility&#32;with&#32;Contester&#32;(compile&#32;with&#32;CONTESTER&#32;directive)&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00158"/>00158 };
<anchor xml:id="_testlib_8h_source_1l00159"/>00159 
<anchor xml:id="_testlib_8h_source_1l00160"/>00160 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
<anchor xml:id="_testlib_8h_source_1l00161"/>00161 <emphasis role="preprocessor">#define&#32;_CRT_SECURE_NO_DEPRECATE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00162"/>00162 <emphasis role="preprocessor">#define&#32;_CRT_SECURE_NO_WARNINGS</emphasis>
<anchor xml:id="_testlib_8h_source_1l00163"/>00163 <emphasis role="preprocessor">#define&#32;_CRT_NO_VA_START_VALIDATION</emphasis>
<anchor xml:id="_testlib_8h_source_1l00164"/>00164 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00165"/>00165 
<anchor xml:id="_testlib_8h_source_1l00166"/>00166 <emphasis role="comment">/*&#32;Overrides&#32;random()&#32;for&#32;Borland&#32;C++.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00167"/><link linkend="_testlib_8h_1aaac7e8b42546e8a2fd07b71fd5b12ba0">00167</link> <emphasis role="preprocessor">#define&#32;random&#32;__random_deprecated</emphasis>
<anchor xml:id="_testlib_8h_source_1l00168"/>00168 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00169"/>00169 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00170"/>00170 <emphasis role="preprocessor">#include&#32;&lt;climits&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00171"/>00171 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00172"/>00172 <emphasis role="preprocessor">#undef&#32;random</emphasis>
<anchor xml:id="_testlib_8h_source_1l00173"/>00173 
<anchor xml:id="_testlib_8h_source_1l00174"/>00174 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00175"/>00175 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00176"/>00176 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00177"/>00177 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00178"/>00178 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00179"/>00179 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00180"/>00180 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00181"/>00181 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00182"/>00182 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00183"/>00183 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00184"/>00184 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00185"/>00185 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00186"/>00186 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00187"/>00187 <emphasis role="preprocessor">#include&#32;&lt;stdarg.h&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00188"/>00188 <emphasis role="preprocessor">#include&#32;&lt;fcntl.h&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00189"/>00189 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00190"/>00190 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00191"/>00191 
<anchor xml:id="_testlib_8h_source_1l00192"/>00192 <emphasis role="preprocessor">#ifdef&#32;TESTLIB_THROW_EXIT_EXCEPTION_INSTEAD_OF_EXIT</emphasis>
<anchor xml:id="_testlib_8h_source_1l00193"/>00193 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&lt;exception&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00194"/>00194 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00195"/>00195 
<anchor xml:id="_testlib_8h_source_1l00196"/>00196 <emphasis role="preprocessor">#if&#32;(_WIN32&#32;||&#32;__WIN32__&#32;||&#32;__WIN32&#32;||&#32;_WIN64&#32;||&#32;__WIN64__&#32;||&#32;__WIN64&#32;||&#32;WINNT&#32;||&#32;__WINNT&#32;||&#32;__WINNT__&#32;||&#32;__CYGWIN__)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00197"/>00197 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;!defined(_MSC_VER)&#32;||&#32;_MSC_VER&#32;&gt;&#32;1400</emphasis>
<anchor xml:id="_testlib_8h_source_1l00198"/>00198 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;NOMINMAX&#32;1</emphasis>
<anchor xml:id="_testlib_8h_source_1l00199"/>00199 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;include&#32;&lt;windows.h&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00200"/>00200 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00201"/>00201 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;WORD&#32;unsigned&#32;short</emphasis>
<anchor xml:id="_testlib_8h_source_1l00202"/>00202 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;include&#32;&lt;unistd.h&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00203"/>00203 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00204"/>00204 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&lt;io.h&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00205"/>00205 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;ON_WINDOWS</emphasis>
<anchor xml:id="_testlib_8h_source_1l00206"/>00206 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;_MSC_VER&#32;&gt;&#32;1400</emphasis>
<anchor xml:id="_testlib_8h_source_1l00207"/>00207 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;warning(&#32;disable&#32;:&#32;4127&#32;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00208"/>00208 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;warning(&#32;disable&#32;:&#32;4146&#32;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00209"/>00209 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;warning(&#32;disable&#32;:&#32;4458&#32;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00210"/>00210 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00211"/>00211 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00212"/><link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">00212</link> <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;WORD&#32;unsigned&#32;short</emphasis>
<anchor xml:id="_testlib_8h_source_1l00213"/>00213 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&lt;unistd.h&gt;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00214"/>00214 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00215"/>00215 
<anchor xml:id="_testlib_8h_source_1l00216"/>00216 <emphasis role="preprocessor">#if&#32;defined(FOR_WINDOWS)&#32;&amp;&amp;&#32;defined(FOR_LINUX)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00217"/>00217 <emphasis role="preprocessor">#error&#32;Only&#32;one&#32;target&#32;system&#32;is&#32;allowed</emphasis>
<anchor xml:id="_testlib_8h_source_1l00218"/>00218 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00219"/>00219 
<anchor xml:id="_testlib_8h_source_1l00220"/>00220 <emphasis role="preprocessor">#ifndef&#32;LLONG_MIN</emphasis>
<anchor xml:id="_testlib_8h_source_1l00221"/><link linkend="_testlib_8h_1af17a13b2ae0e9c24c020ac1f044f30c2">00221</link> <emphasis role="preprocessor">#define&#32;LLONG_MIN&#32;&#32;&#32;(-9223372036854775807LL&#32;-&#32;1)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00222"/>00222 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00223"/>00223 
<anchor xml:id="_testlib_8h_source_1l00224"/>00224 <emphasis role="preprocessor">#ifndef&#32;ULLONG_MAX</emphasis>
<anchor xml:id="_testlib_8h_source_1l00225"/><link linkend="_testlib_8h_1aa1dd7166a75b73ad62b111ae6fc17c59">00225</link> <emphasis role="preprocessor">#define&#32;ULLONG_MAX&#32;&#32;&#32;(18446744073709551615)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00226"/>00226 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00227"/>00227 
<anchor xml:id="_testlib_8h_source_1l00228"/><link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">00228</link> <emphasis role="preprocessor">#define&#32;LF&#32;((char)10)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00229"/><link linkend="_testlib_8h_1a876ce77f3c672c7162658151e648389e">00229</link> <emphasis role="preprocessor">#define&#32;CR&#32;((char)13)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00230"/><link linkend="_testlib_8h_1ad58a1fbfc85c7e4790fc55e654f50221">00230</link> <emphasis role="preprocessor">#define&#32;TAB&#32;((char)9)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00231"/><link linkend="_testlib_8h_1a5ff6e798033f03e74730e99f01936f84">00231</link> <emphasis role="preprocessor">#define&#32;SPACE&#32;((char)&apos;&#32;&apos;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00232"/><link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">00232</link> <emphasis role="preprocessor">#define&#32;EOFC&#32;(255)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00233"/>00233 
<anchor xml:id="_testlib_8h_source_1l00234"/>00234 <emphasis role="preprocessor">#ifndef&#32;OK_EXIT_CODE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00235"/>00235 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;CONTESTER</emphasis>
<anchor xml:id="_testlib_8h_source_1l00236"/>00236 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;OK_EXIT_CODE&#32;0xAC</emphasis>
<anchor xml:id="_testlib_8h_source_1l00237"/>00237 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00238"/><link linkend="_testlib_8h_1a809c8f4d2bf12a53a01098f336b97598">00238</link> <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;OK_EXIT_CODE&#32;0</emphasis>
<anchor xml:id="_testlib_8h_source_1l00239"/>00239 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00240"/>00240 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00241"/>00241 
<anchor xml:id="_testlib_8h_source_1l00242"/>00242 <emphasis role="preprocessor">#ifndef&#32;WA_EXIT_CODE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00243"/>00243 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;EJUDGE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00244"/>00244 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;WA_EXIT_CODE&#32;5</emphasis>
<anchor xml:id="_testlib_8h_source_1l00245"/>00245 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;defined(CONTESTER)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00246"/>00246 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;WA_EXIT_CODE&#32;0xAB</emphasis>
<anchor xml:id="_testlib_8h_source_1l00247"/>00247 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00248"/><link linkend="_testlib_8h_1a9407aadd1d7b6a24b40a94be0e1b5e6c">00248</link> <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;WA_EXIT_CODE&#32;1</emphasis>
<anchor xml:id="_testlib_8h_source_1l00249"/>00249 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00250"/>00250 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00251"/>00251 
<anchor xml:id="_testlib_8h_source_1l00252"/>00252 <emphasis role="preprocessor">#ifndef&#32;PE_EXIT_CODE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00253"/>00253 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;EJUDGE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00254"/>00254 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;PE_EXIT_CODE&#32;4</emphasis>
<anchor xml:id="_testlib_8h_source_1l00255"/>00255 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;defined(CONTESTER)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00256"/>00256 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;PE_EXIT_CODE&#32;0xAA</emphasis>
<anchor xml:id="_testlib_8h_source_1l00257"/>00257 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00258"/><link linkend="_testlib_8h_1acd99fac8764b4f8513d0d78aa80878a5">00258</link> <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;PE_EXIT_CODE&#32;2</emphasis>
<anchor xml:id="_testlib_8h_source_1l00259"/>00259 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00260"/>00260 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00261"/>00261 
<anchor xml:id="_testlib_8h_source_1l00262"/>00262 <emphasis role="preprocessor">#ifndef&#32;FAIL_EXIT_CODE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00263"/>00263 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;EJUDGE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00264"/>00264 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;FAIL_EXIT_CODE&#32;6</emphasis>
<anchor xml:id="_testlib_8h_source_1l00265"/>00265 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;defined(CONTESTER)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00266"/>00266 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;FAIL_EXIT_CODE&#32;0xA3</emphasis>
<anchor xml:id="_testlib_8h_source_1l00267"/>00267 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00268"/><link linkend="_testlib_8h_1afac612f10342c3ccbfc7f30ae563184b">00268</link> <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;FAIL_EXIT_CODE&#32;3</emphasis>
<anchor xml:id="_testlib_8h_source_1l00269"/>00269 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00270"/>00270 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00271"/>00271 
<anchor xml:id="_testlib_8h_source_1l00272"/>00272 <emphasis role="preprocessor">#ifndef&#32;DIRT_EXIT_CODE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00273"/>00273 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;EJUDGE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00274"/>00274 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;DIRT_EXIT_CODE&#32;6</emphasis>
<anchor xml:id="_testlib_8h_source_1l00275"/>00275 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00276"/><link linkend="_testlib_8h_1ac9085792031f49686fd06d9560164d3b">00276</link> <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;DIRT_EXIT_CODE&#32;4</emphasis>
<anchor xml:id="_testlib_8h_source_1l00277"/>00277 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00278"/>00278 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00279"/>00279 
<anchor xml:id="_testlib_8h_source_1l00280"/>00280 <emphasis role="preprocessor">#ifndef&#32;POINTS_EXIT_CODE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00281"/><link linkend="_testlib_8h_1a58429ce36ac0b67fb7889455174c7e8a">00281</link> <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;POINTS_EXIT_CODE&#32;7</emphasis>
<anchor xml:id="_testlib_8h_source_1l00282"/>00282 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00283"/>00283 
<anchor xml:id="_testlib_8h_source_1l00284"/>00284 <emphasis role="preprocessor">#ifndef&#32;UNEXPECTED_EOF_EXIT_CODE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00285"/><link linkend="_testlib_8h_1a30fb6330f5fcaf65c9347f50df26222d">00285</link> <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;UNEXPECTED_EOF_EXIT_CODE&#32;8</emphasis>
<anchor xml:id="_testlib_8h_source_1l00286"/>00286 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00287"/>00287 
<anchor xml:id="_testlib_8h_source_1l00288"/>00288 <emphasis role="preprocessor">#ifndef&#32;PC_BASE_EXIT_CODE</emphasis>
<anchor xml:id="_testlib_8h_source_1l00289"/>00289 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;TESTSYS</emphasis>
<anchor xml:id="_testlib_8h_source_1l00290"/>00290 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;PC_BASE_EXIT_CODE&#32;50</emphasis>
<anchor xml:id="_testlib_8h_source_1l00291"/>00291 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00292"/><link linkend="_testlib_8h_1ac0c3e3c9771bdfbbcbd70392bd74c03a">00292</link> <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;PC_BASE_EXIT_CODE&#32;0</emphasis>
<anchor xml:id="_testlib_8h_source_1l00293"/>00293 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00294"/>00294 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00295"/>00295 
<anchor xml:id="_testlib_8h_source_1l00296"/>00296 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00297"/>00297 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;__TESTLIB_STATIC_ASSERT(condition)&#32;typedef&#32;void*&#32;__testlib_static_assert_type[(condition)&#32;?&#32;1&#32;:&#32;-1]&#32;__attribute__((unused))</emphasis>
<anchor xml:id="_testlib_8h_source_1l00298"/>00298 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00299"/><link linkend="_testlib_8h_1a67a1b89efefde69b271ec10086a493fc">00299</link> <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;__TESTLIB_STATIC_ASSERT(condition)&#32;typedef&#32;void*&#32;__testlib_static_assert_type[(condition)&#32;?&#32;1&#32;:&#32;-1]</emphasis>
<anchor xml:id="_testlib_8h_source_1l00300"/>00300 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00301"/>00301 
<anchor xml:id="_testlib_8h_source_1l00302"/>00302 <emphasis role="preprocessor">#ifdef&#32;ON_WINDOWS</emphasis>
<anchor xml:id="_testlib_8h_source_1l00303"/>00303 <emphasis role="preprocessor">#define&#32;I64&#32;&quot;%I64d&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00304"/>00304 <emphasis role="preprocessor">#define&#32;U64&#32;&quot;%I64u&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00305"/>00305 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00306"/><link linkend="_testlib_8h_1a29ae4e28b586fcb6dcd1a4a0a69b9a49">00306</link> <emphasis role="preprocessor">#define&#32;I64&#32;&quot;%lld&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00307"/><link linkend="_testlib_8h_1a24c42244bf61006967bf37001c14d2bf">00307</link> <emphasis role="preprocessor">#define&#32;U64&#32;&quot;%llu&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00308"/>00308 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00309"/>00309 
<anchor xml:id="_testlib_8h_source_1l00310"/>00310 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
<anchor xml:id="_testlib_8h_source_1l00311"/>00311 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;NORETURN&#32;__declspec(noreturn)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00312"/>00312 <emphasis role="preprocessor">#elif&#32;defined&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00313"/>00313 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;NORETURN&#32;__attribute__&#32;((noreturn))</emphasis>
<anchor xml:id="_testlib_8h_source_1l00314"/>00314 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00315"/><link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">00315</link> <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;NORETURN</emphasis>
<anchor xml:id="_testlib_8h_source_1l00316"/>00316 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00317"/>00317 
<anchor xml:id="_testlib_8h_source_1l00318"/>00318 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__testlib_format_buffer[16777216];
<anchor xml:id="_testlib_8h_source_1l00319"/>00319 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__testlib_format_buffer_usage_count&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l00320"/>00320 
<anchor xml:id="_testlib_8h_source_1l00321"/><link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">00321</link> <emphasis role="preprocessor">#define&#32;FMT_TO_RESULT(fmt,&#32;cstr,&#32;result)&#32;&#32;std::string&#32;result;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00322"/>00322 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(__testlib_format_buffer_usage_count&#32;!=&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00323"/>00323 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(&quot;FMT_TO_RESULT::__testlib_format_buffer_usage_count&#32;!=&#32;0&quot;);&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00324"/>00324 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_format_buffer_usage_count++;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00325"/>00325 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;va_list&#32;ap;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00326"/>00326 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;va_start(ap,&#32;fmt);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00327"/>00327 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vsnprintf(__testlib_format_buffer,&#32;sizeof(__testlib_format_buffer),&#32;cstr,&#32;ap);&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00328"/>00328 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;va_end(ap);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00329"/>00329 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_format_buffer[sizeof(__testlib_format_buffer)&#32;-&#32;1]&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00330"/>00330 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;std::string(__testlib_format_buffer);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00331"/>00331 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_format_buffer_usage_count--;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l00332"/>00332 <emphasis role="preprocessor"></emphasis>
<anchor xml:id="_testlib_8h_source_1l00333"/><link linkend="_testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf">00333</link> <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf">__TESTLIB_LONGLONG_MAX</link>&#32;=&#32;9223372036854775807LL;
<anchor xml:id="_testlib_8h_source_1l00334"/><link linkend="_testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0">00334</link> <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0">__TESTLIB_MAX_TEST_CASE</link>&#32;=&#32;1073741823;
<anchor xml:id="_testlib_8h_source_1l00335"/>00335 
<anchor xml:id="_testlib_8h_source_1l00336"/><link linkend="_testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f">00336</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f">__testlib_exitCode</link>;
<anchor xml:id="_testlib_8h_source_1l00337"/>00337 
<anchor xml:id="_testlib_8h_source_1l00338"/><link linkend="_testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307">00338</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307">__testlib_hasTestCase</link>;
<anchor xml:id="_testlib_8h_source_1l00339"/><link linkend="_testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426">00339</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426">__testlib_testCase</link>&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l00340"/>00340 
<anchor xml:id="_testlib_8h_source_1l00341"/>00341 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1ad093584ea7bc2579d8d49c05d4b95347">setTestCase</link>(<emphasis role="keywordtype">int</emphasis>&#32;testCase);
<anchor xml:id="_testlib_8h_source_1l00342"/>00342 
<anchor xml:id="_testlib_8h_source_1l00343"/><link linkend="_testlib_8h_1a0fb214ced4215bfbfa6eba1ab4635721">00343</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a0fb214ced4215bfbfa6eba1ab4635721">unsetTestCase</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l00344"/>00344 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307">__testlib_hasTestCase</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l00345"/>00345 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426">__testlib_testCase</link>&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l00346"/>00346 }
<anchor xml:id="_testlib_8h_source_1l00347"/>00347 
<anchor xml:id="_testlib_8h_source_1l00348"/>00348 <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__testlib_fail(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;message);
<anchor xml:id="_testlib_8h_source_1l00349"/>00349 
<anchor xml:id="_testlib_8h_source_1l00350"/>00350 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00351"/>00351 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00352"/>00352 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00353"/>00353 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00354"/>00354 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;T&#32;__testlib_abs(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;x)&#32;{
<anchor xml:id="_testlib_8h_source_1l00355"/>00355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x&#32;&gt;&#32;0&#32;?&#32;x&#32;:&#32;-x;
<anchor xml:id="_testlib_8h_source_1l00356"/>00356 }
<anchor xml:id="_testlib_8h_source_1l00357"/>00357 
<anchor xml:id="_testlib_8h_source_1l00358"/>00358 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00359"/>00359 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00360"/>00360 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00361"/>00361 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00362"/>00362 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;T&#32;__testlib_min(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;a,&#32;<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;b)&#32;{
<anchor xml:id="_testlib_8h_source_1l00363"/>00363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;&lt;&#32;b&#32;?&#32;a&#32;:&#32;b;
<anchor xml:id="_testlib_8h_source_1l00364"/>00364 }
<anchor xml:id="_testlib_8h_source_1l00365"/>00365 
<anchor xml:id="_testlib_8h_source_1l00366"/>00366 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00367"/>00367 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00368"/>00368 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00369"/>00369 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00370"/>00370 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;T&#32;__testlib_max(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;a,&#32;<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;b)&#32;{
<anchor xml:id="_testlib_8h_source_1l00371"/>00371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;&gt;&#32;b&#32;?&#32;a&#32;:&#32;b;
<anchor xml:id="_testlib_8h_source_1l00372"/>00372 }
<anchor xml:id="_testlib_8h_source_1l00373"/>00373 
<anchor xml:id="_testlib_8h_source_1l00374"/>00374 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00375"/>00375 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00376"/>00376 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00377"/>00377 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00378"/>00378 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;T&#32;__testlib_crop(T&#32;value,&#32;T&#32;a,&#32;T&#32;b)&#32;{
<anchor xml:id="_testlib_8h_source_1l00379"/>00379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_min(__testlib_max(value,&#32;a),&#32;--b);
<anchor xml:id="_testlib_8h_source_1l00380"/>00380 }
<anchor xml:id="_testlib_8h_source_1l00381"/>00381 
<anchor xml:id="_testlib_8h_source_1l00382"/>00382 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00383"/>00383 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00384"/>00384 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00385"/>00385 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__testlib_crop(<emphasis role="keywordtype">double</emphasis>&#32;value,&#32;<emphasis role="keywordtype">double</emphasis>&#32;a,&#32;<emphasis role="keywordtype">double</emphasis>&#32;b)&#32;{
<anchor xml:id="_testlib_8h_source_1l00386"/>00386 &#32;&#32;&#32;&#32;value&#32;=&#32;__testlib_min(__testlib_max(value,&#32;a),&#32;b);
<anchor xml:id="_testlib_8h_source_1l00387"/>00387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;&gt;=&#32;b)
<anchor xml:id="_testlib_8h_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;std::nexttoward(b,&#32;a);
<anchor xml:id="_testlib_8h_source_1l00389"/>00389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
<anchor xml:id="_testlib_8h_source_1l00390"/>00390 }
<anchor xml:id="_testlib_8h_source_1l00391"/>00391 
<anchor xml:id="_testlib_8h_source_1l00392"/>00392 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__testlib_prelimIsNaN(<emphasis role="keywordtype">double</emphasis>&#32;r)&#32;{
<anchor xml:id="_testlib_8h_source_1l00393"/>00393 &#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ra&#32;=&#32;r;
<anchor xml:id="_testlib_8h_source_1l00394"/>00394 <emphasis role="preprocessor">#ifndef&#32;__BORLANDC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00395"/>00395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((ra&#32;!=&#32;ra)&#32;==&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&amp;&#32;((ra&#32;==&#32;ra)&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;&amp;&amp;&#32;((1.0&#32;&gt;&#32;ra)&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;&amp;&amp;&#32;((1.0&#32;&lt;&#32;ra)&#32;==&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00396"/>00396 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00397"/>00397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_isnan(ra);
<anchor xml:id="_testlib_8h_source_1l00398"/>00398 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00399"/>00399 }
<anchor xml:id="_testlib_8h_source_1l00400"/>00400 
<anchor xml:id="_testlib_8h_source_1l00401"/>00401 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00402"/>00402 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00403"/>00403 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00404"/>00404 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;removeDoubleTrailingZeroes(std::string&#32;value)&#32;{
<anchor xml:id="_testlib_8h_source_1l00405"/>00405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!value.empty()&#32;&amp;&amp;&#32;value[value.length()&#32;-&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;value.find(<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;!=&#32;std::string::npos)
<anchor xml:id="_testlib_8h_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;value.substr(0,&#32;value.length()&#32;-&#32;1);
<anchor xml:id="_testlib_8h_source_1l00407"/>00407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!value.empty()&#32;&amp;&amp;&#32;value[value.length()&#32;-&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value&#32;+&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l00409"/>00409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
<anchor xml:id="_testlib_8h_source_1l00411"/>00411 }
<anchor xml:id="_testlib_8h_source_1l00412"/>00412 
<anchor xml:id="_testlib_8h_source_1l00413"/>00413 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00414"/>00414 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00415"/>00415 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00416"/><link linkend="_testlib_8h_1a3e8b5e1528a28d4832cb11dff8ad5edb">00416</link> <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_testlib_8h_1a3e8b5e1528a28d4832cb11dff8ad5edb">upperCase</link>(std::string&#32;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l00417"/>00417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;&lt;=&#32;s[i]&#32;&amp;&amp;&#32;s[i]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;z&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s[i]&#32;=&#32;char(s[i]&#32;-&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;+&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00420"/>00420 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
<anchor xml:id="_testlib_8h_source_1l00421"/>00421 }
<anchor xml:id="_testlib_8h_source_1l00422"/>00422 
<anchor xml:id="_testlib_8h_source_1l00423"/>00423 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00424"/>00424 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00425"/>00425 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00426"/><link linkend="_testlib_8h_1a2d0670a860a887c1de821de0550c0a32">00426</link> <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_testlib_8h_1a2d0670a860a887c1de821de0550c0a32">lowerCase</link>(std::string&#32;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l00427"/>00427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;&lt;=&#32;s[i]&#32;&amp;&amp;&#32;s[i]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;Z&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s[i]&#32;=&#32;char(s[i]&#32;-&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;+&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00430"/>00430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
<anchor xml:id="_testlib_8h_source_1l00431"/>00431 }
<anchor xml:id="_testlib_8h_source_1l00432"/>00432 
<anchor xml:id="_testlib_8h_source_1l00433"/>00433 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00434"/>00434 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;1,&#32;2)))
<anchor xml:id="_testlib_8h_source_1l00435"/>00435 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00436"/><link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">00436</link> std::string&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*fmt,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l00437"/>00437 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(fmt,&#32;fmt,&#32;result);
<anchor xml:id="_testlib_8h_source_1l00438"/>00438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l00439"/>00439 }
<anchor xml:id="_testlib_8h_source_1l00440"/>00440 
<anchor xml:id="_testlib_8h_source_1l00441"/><link linkend="_testlib_8h_1a133d0fb6f1e08d9483f8aa9a8e3c6f38">00441</link> std::string&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;fmt,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l00442"/>00442 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(fmt,&#32;fmt.c_str(),&#32;result);
<anchor xml:id="_testlib_8h_source_1l00443"/>00443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l00444"/>00444 }
<anchor xml:id="_testlib_8h_source_1l00445"/>00445 
<anchor xml:id="_testlib_8h_source_1l00446"/>00446 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00447"/>00447 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00448"/>00448 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00449"/>00449 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;__testlib_part(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s);
<anchor xml:id="_testlib_8h_source_1l00450"/>00450 
<anchor xml:id="_testlib_8h_source_1l00451"/>00451 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__testlib_isNaN(<emphasis role="keywordtype">double</emphasis>&#32;r)&#32;{
<anchor xml:id="_testlib_8h_source_1l00452"/>00452 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a67a1b89efefde69b271ec10086a493fc">__TESTLIB_STATIC_ASSERT</link>(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>));
<anchor xml:id="_testlib_8h_source_1l00453"/>00453 &#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ra&#32;=&#32;r;
<anchor xml:id="_testlib_8h_source_1l00454"/>00454 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;llr1,&#32;llr2;
<anchor xml:id="_testlib_8h_source_1l00455"/>00455 &#32;&#32;&#32;&#32;std::memcpy((<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;&amp;llr1,&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;&amp;ra,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>));
<anchor xml:id="_testlib_8h_source_1l00456"/>00456 &#32;&#32;&#32;&#32;ra&#32;=&#32;-ra;
<anchor xml:id="_testlib_8h_source_1l00457"/>00457 &#32;&#32;&#32;&#32;std::memcpy((<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;&amp;llr2,&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;&amp;ra,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>));
<anchor xml:id="_testlib_8h_source_1l00458"/>00458 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;llnan&#32;=&#32;0xFFF8000000000000LL;
<anchor xml:id="_testlib_8h_source_1l00459"/>00459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_prelimIsNaN(r)&#32;||&#32;llnan&#32;==&#32;llr1&#32;||&#32;llnan&#32;==&#32;llr2;
<anchor xml:id="_testlib_8h_source_1l00460"/>00460 }
<anchor xml:id="_testlib_8h_source_1l00461"/>00461 
<anchor xml:id="_testlib_8h_source_1l00462"/>00462 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__testlib_nan()&#32;{
<anchor xml:id="_testlib_8h_source_1l00463"/>00463 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a67a1b89efefde69b271ec10086a493fc">__TESTLIB_STATIC_ASSERT</link>(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>));
<anchor xml:id="_testlib_8h_source_1l00464"/>00464 <emphasis role="preprocessor">#ifndef&#32;NAN</emphasis>
<anchor xml:id="_testlib_8h_source_1l00465"/>00465 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;llnan&#32;=&#32;0xFFF8000000000000LL;
<anchor xml:id="_testlib_8h_source_1l00466"/>00466 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;nan;
<anchor xml:id="_testlib_8h_source_1l00467"/>00467 &#32;&#32;&#32;&#32;std::memcpy(&amp;nan,&#32;&amp;llnan,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>));
<anchor xml:id="_testlib_8h_source_1l00468"/>00468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nan;
<anchor xml:id="_testlib_8h_source_1l00469"/>00469 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00470"/>00470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NAN;
<anchor xml:id="_testlib_8h_source_1l00471"/>00471 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00472"/>00472 }
<anchor xml:id="_testlib_8h_source_1l00473"/>00473 
<anchor xml:id="_testlib_8h_source_1l00474"/>00474 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__testlib_isInfinite(<emphasis role="keywordtype">double</emphasis>&#32;r)&#32;{
<anchor xml:id="_testlib_8h_source_1l00475"/>00475 &#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ra&#32;=&#32;r;
<anchor xml:id="_testlib_8h_source_1l00476"/>00476 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(ra&#32;&gt;&#32;1E300&#32;||&#32;ra&#32;&lt;&#32;-1E300);
<anchor xml:id="_testlib_8h_source_1l00477"/>00477 }
<anchor xml:id="_testlib_8h_source_1l00478"/>00478 
<anchor xml:id="_testlib_8h_source_1l00479"/>00479 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00480"/>00480 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00481"/>00481 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00482"/><link linkend="_testlib_8h_1afe9a738a208c2ff953b27fea24007d20">00482</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_testlib_8h_1afe9a738a208c2ff953b27fea24007d20">doubleCompare</link>(<emphasis role="keywordtype">double</emphasis>&#32;expected,&#32;<emphasis role="keywordtype">double</emphasis>&#32;result,&#32;<emphasis role="keywordtype">double</emphasis>&#32;MAX_DOUBLE_ERROR)&#32;{
<anchor xml:id="_testlib_8h_source_1l00483"/>00483 &#32;&#32;&#32;&#32;MAX_DOUBLE_ERROR&#32;+=&#32;1E-15;
<anchor xml:id="_testlib_8h_source_1l00484"/>00484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__testlib_isNaN(expected))&#32;{
<anchor xml:id="_testlib_8h_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_isNaN(result);
<anchor xml:id="_testlib_8h_source_1l00486"/>00486 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__testlib_isInfinite(expected))&#32;{
<anchor xml:id="_testlib_8h_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expected&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result&#32;&gt;&#32;0&#32;&amp;&amp;&#32;__testlib_isInfinite(result);
<anchor xml:id="_testlib_8h_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result&#32;&lt;&#32;0&#32;&amp;&amp;&#32;__testlib_isInfinite(result);
<anchor xml:id="_testlib_8h_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00492"/>00492 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__testlib_isNaN(result)&#32;||&#32;__testlib_isInfinite(result))&#32;{
<anchor xml:id="_testlib_8h_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l00494"/>00494 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__testlib_abs(result&#32;-&#32;expected)&#32;&lt;=&#32;MAX_DOUBLE_ERROR)&#32;{
<anchor xml:id="_testlib_8h_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l00496"/>00496 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;minv&#32;=&#32;__testlib_min(expected&#32;*&#32;(1.0&#32;-&#32;MAX_DOUBLE_ERROR),
<anchor xml:id="_testlib_8h_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected&#32;*&#32;(1.0&#32;+&#32;MAX_DOUBLE_ERROR));
<anchor xml:id="_testlib_8h_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv&#32;=&#32;__testlib_max(expected&#32;*&#32;(1.0&#32;-&#32;MAX_DOUBLE_ERROR),
<anchor xml:id="_testlib_8h_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected&#32;*&#32;(1.0&#32;+&#32;MAX_DOUBLE_ERROR));
<anchor xml:id="_testlib_8h_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result&#32;&gt;=&#32;minv&#32;&amp;&amp;&#32;result&#32;&lt;=&#32;maxv;
<anchor xml:id="_testlib_8h_source_1l00502"/>00502 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00503"/>00503 }
<anchor xml:id="_testlib_8h_source_1l00504"/>00504 
<anchor xml:id="_testlib_8h_source_1l00505"/>00505 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00506"/>00506 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00507"/>00507 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00508"/><link linkend="_testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82">00508</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82">doubleDelta</link>(<emphasis role="keywordtype">double</emphasis>&#32;expected,&#32;<emphasis role="keywordtype">double</emphasis>&#32;result)&#32;{
<anchor xml:id="_testlib_8h_source_1l00509"/>00509 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;absolute&#32;=&#32;__testlib_abs(result&#32;-&#32;expected);
<anchor xml:id="_testlib_8h_source_1l00510"/>00510 
<anchor xml:id="_testlib_8h_source_1l00511"/>00511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__testlib_abs(expected)&#32;&gt;&#32;1E-9)&#32;{
<anchor xml:id="_testlib_8h_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;relative&#32;=&#32;__testlib_abs(absolute&#32;/&#32;expected);
<anchor xml:id="_testlib_8h_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_min(absolute,&#32;relative);
<anchor xml:id="_testlib_8h_source_1l00514"/>00514 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;absolute;
<anchor xml:id="_testlib_8h_source_1l00516"/>00516 }
<anchor xml:id="_testlib_8h_source_1l00517"/>00517 
<anchor xml:id="_testlib_8h_source_1l00519"/>00519 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__testlib_set_binary(std::FILE&#32;*file)&#32;{
<anchor xml:id="_testlib_8h_source_1l00520"/>00520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;!=&#32;file)&#32;{
<anchor xml:id="_testlib_8h_source_1l00521"/>00521 <emphasis role="preprocessor">#ifdef&#32;ON_WINDOWS</emphasis>
<anchor xml:id="_testlib_8h_source_1l00522"/>00522 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;_O_BINARY</emphasis>
<anchor xml:id="_testlib_8h_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stdin&#32;==&#32;file)
<anchor xml:id="_testlib_8h_source_1l00524"/>00524 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifdef&#32;STDIN_FILENO</emphasis>
<anchor xml:id="_testlib_8h_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(_setmode(STDIN_FILENO,&#32;_O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00526"/>00526 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(_setmode(_fileno(stdin),&#32;_O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00528"/>00528 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stdout&#32;==&#32;file)
<anchor xml:id="_testlib_8h_source_1l00530"/>00530 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifdef&#32;STDOUT_FILENO</emphasis>
<anchor xml:id="_testlib_8h_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(_setmode(STDOUT_FILENO,&#32;_O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00532"/>00532 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(_setmode(_fileno(stdout),&#32;_O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00534"/>00534 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stderr&#32;==&#32;file)
<anchor xml:id="_testlib_8h_source_1l00536"/>00536 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifdef&#32;STDERR_FILENO</emphasis>
<anchor xml:id="_testlib_8h_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(_setmode(STDERR_FILENO,&#32;_O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00538"/>00538 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(_setmode(_fileno(stderr),&#32;_O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00540"/>00540 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00541"/>00541 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;O_BINARY</emphasis>
<anchor xml:id="_testlib_8h_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stdin&#32;==&#32;file)
<anchor xml:id="_testlib_8h_source_1l00543"/>00543 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifdef&#32;STDIN_FILENO</emphasis>
<anchor xml:id="_testlib_8h_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(setmode(STDIN_FILENO,&#32;O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00545"/>00545 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(setmode(fileno(stdin),&#32;O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00547"/>00547 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stdout&#32;==&#32;file)
<anchor xml:id="_testlib_8h_source_1l00549"/>00549 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifdef&#32;STDOUT_FILENO</emphasis>
<anchor xml:id="_testlib_8h_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(setmode(STDOUT_FILENO,&#32;O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00551"/>00551 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(setmode(fileno(stdout),&#32;O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00553"/>00553 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stderr&#32;==&#32;file)
<anchor xml:id="_testlib_8h_source_1l00555"/>00555 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifdef&#32;STDERR_FILENO</emphasis>
<anchor xml:id="_testlib_8h_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(setmode(STDERR_FILENO,&#32;O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00557"/>00557 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;void(setmode(fileno(stderr),&#32;O_BINARY));
<anchor xml:id="_testlib_8h_source_1l00559"/>00559 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00560"/>00560 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00561"/>00561 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00562"/>00562 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00563"/>00563 }
<anchor xml:id="_testlib_8h_source_1l00564"/>00564 
<anchor xml:id="_testlib_8h_source_1l00565"/>00565 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;199711L&#32;||&#32;defined(_MSC_VER)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00566"/>00566 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00567"/>00567 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00568"/>00568 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l00569"/>00569 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00570"/>00570 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;vtos(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;t,&#32;std::true_type)&#32;{
<anchor xml:id="_testlib_8h_source_1l00571"/>00571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l00573"/>00573 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>(t);
<anchor xml:id="_testlib_8h_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;negative&#32;=&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&lt;&#32;0;
<anchor xml:id="_testlib_8h_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;s;
<anchor xml:id="_testlib_8h_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;!=&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;digit&#32;=&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;%&#32;10;
<anchor xml:id="_testlib_8h_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(digit&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l00580"/>00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digit&#32;=&#32;-digit;
<anchor xml:id="_testlib_8h_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;char(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;digit);
<anchor xml:id="_testlib_8h_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;/=&#32;10;
<anchor xml:id="_testlib_8h_source_1l00583"/>00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::reverse(s.begin(),&#32;s.end());
<anchor xml:id="_testlib_8h_source_1l00585"/>00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;negative&#32;?&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>&#32;+&#32;s&#32;:&#32;s;
<anchor xml:id="_testlib_8h_source_1l00586"/>00586 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00587"/>00587 }
<anchor xml:id="_testlib_8h_source_1l00588"/>00588 
<anchor xml:id="_testlib_8h_source_1l00589"/>00589 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00590"/>00590 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;vtos(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;t,&#32;std::false_type)&#32;{
<anchor xml:id="_testlib_8h_source_1l00591"/>00591 &#32;&#32;&#32;&#32;std::string&#32;s;
<anchor xml:id="_testlib_8h_source_1l00592"/>00592 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::stringstream&#32;ss;
<anchor xml:id="_testlib_8h_source_1l00593"/>00593 &#32;&#32;&#32;&#32;ss.str(std::string());
<anchor xml:id="_testlib_8h_source_1l00594"/>00594 &#32;&#32;&#32;&#32;ss.clear();
<anchor xml:id="_testlib_8h_source_1l00595"/>00595 &#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;t;
<anchor xml:id="_testlib_8h_source_1l00596"/>00596 &#32;&#32;&#32;&#32;ss&#32;&gt;&gt;&#32;s;
<anchor xml:id="_testlib_8h_source_1l00597"/>00597 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
<anchor xml:id="_testlib_8h_source_1l00598"/>00598 }
<anchor xml:id="_testlib_8h_source_1l00599"/>00599 
<anchor xml:id="_testlib_8h_source_1l00600"/>00600 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00601"/>00601 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;vtos(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;t)&#32;{
<anchor xml:id="_testlib_8h_source_1l00602"/>00602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtos(t,&#32;std::is_integral&lt;T&gt;());
<anchor xml:id="_testlib_8h_source_1l00603"/>00603 }
<anchor xml:id="_testlib_8h_source_1l00604"/>00604 
<anchor xml:id="_testlib_8h_source_1l00605"/>00605 <emphasis role="comment">/*&#32;signed&#32;case.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00606"/>00606 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00607"/>00607 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;toHumanReadableString(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;std::false_type)&#32;{
<anchor xml:id="_testlib_8h_source_1l00608"/>00608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l00609"/>00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtos(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l00610"/>00610 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;trailingZeroCount&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l00611"/>00611 &#32;&#32;&#32;&#32;T&#32;n_&#32;=&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
<anchor xml:id="_testlib_8h_source_1l00612"/>00612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(n_&#32;%&#32;10&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_&#32;/=&#32;10,&#32;trailingZeroCount++;
<anchor xml:id="_testlib_8h_source_1l00614"/>00614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(trailingZeroCount&#32;&gt;=&#32;7)&#32;{
<anchor xml:id="_testlib_8h_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n_&#32;==&#32;1)
<anchor xml:id="_testlib_8h_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;10^&quot;</emphasis>&#32;+&#32;vtos(trailingZeroCount);
<anchor xml:id="_testlib_8h_source_1l00617"/>00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n_&#32;==&#32;-1)
<anchor xml:id="_testlib_8h_source_1l00618"/>00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;-10^&quot;</emphasis>&#32;+&#32;vtos(trailingZeroCount);
<anchor xml:id="_testlib_8h_source_1l00619"/>00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtos(n_)&#32;+&#32;<emphasis role="stringliteral">&quot;*10^&quot;</emphasis>&#32;+&#32;vtos(trailingZeroCount);
<anchor xml:id="_testlib_8h_source_1l00621"/>00621 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00622"/>00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtos(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l00623"/>00623 }
<anchor xml:id="_testlib_8h_source_1l00624"/>00624 
<anchor xml:id="_testlib_8h_source_1l00625"/>00625 <emphasis role="comment">/*&#32;unsigned&#32;case.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00626"/>00626 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00627"/>00627 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;toHumanReadableString(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;std::true_type)&#32;{
<anchor xml:id="_testlib_8h_source_1l00628"/>00628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l00629"/>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtos(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l00630"/>00630 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;trailingZeroCount&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l00631"/>00631 &#32;&#32;&#32;&#32;T&#32;n_&#32;=&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
<anchor xml:id="_testlib_8h_source_1l00632"/>00632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(n_&#32;%&#32;10&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l00633"/>00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_&#32;/=&#32;10,&#32;trailingZeroCount++;
<anchor xml:id="_testlib_8h_source_1l00634"/>00634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(trailingZeroCount&#32;&gt;=&#32;7)&#32;{
<anchor xml:id="_testlib_8h_source_1l00635"/>00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n_&#32;==&#32;1)
<anchor xml:id="_testlib_8h_source_1l00636"/>00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;10^&quot;</emphasis>&#32;+&#32;vtos(trailingZeroCount);
<anchor xml:id="_testlib_8h_source_1l00637"/>00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00638"/>00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtos(n_)&#32;+&#32;<emphasis role="stringliteral">&quot;*10^&quot;</emphasis>&#32;+&#32;vtos(trailingZeroCount);
<anchor xml:id="_testlib_8h_source_1l00639"/>00639 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00640"/>00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtos(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l00641"/>00641 }
<anchor xml:id="_testlib_8h_source_1l00642"/>00642 
<anchor xml:id="_testlib_8h_source_1l00643"/>00643 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00644"/>00644 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;toHumanReadableString(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l00645"/>00645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toHumanReadableString(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;std::is_unsigned&lt;T&gt;());
<anchor xml:id="_testlib_8h_source_1l00646"/>00646 }
<anchor xml:id="_testlib_8h_source_1l00647"/>00647 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00648"/>00648 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00649"/>00649 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;vtos(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;t)
<anchor xml:id="_testlib_8h_source_1l00650"/>00650 {
<anchor xml:id="_testlib_8h_source_1l00651"/>00651 &#32;&#32;&#32;&#32;std::string&#32;s;
<anchor xml:id="_testlib_8h_source_1l00652"/>00652 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::stringstream&#32;ss;
<anchor xml:id="_testlib_8h_source_1l00653"/>00653 &#32;&#32;&#32;&#32;ss.str(std::string());
<anchor xml:id="_testlib_8h_source_1l00654"/>00654 &#32;&#32;&#32;&#32;ss.clear();
<anchor xml:id="_testlib_8h_source_1l00655"/>00655 &#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;t;
<anchor xml:id="_testlib_8h_source_1l00656"/>00656 &#32;&#32;&#32;&#32;ss&#32;&gt;&gt;&#32;s;
<anchor xml:id="_testlib_8h_source_1l00657"/>00657 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
<anchor xml:id="_testlib_8h_source_1l00658"/>00658 }
<anchor xml:id="_testlib_8h_source_1l00659"/>00659 
<anchor xml:id="_testlib_8h_source_1l00660"/>00660 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00661"/>00661 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;toHumanReadableString(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l00662"/>00662 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtos(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l00663"/>00663 }
<anchor xml:id="_testlib_8h_source_1l00664"/>00664 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00665"/>00665 
<anchor xml:id="_testlib_8h_source_1l00666"/>00666 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l00667"/>00667 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;toString(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;t)&#32;{
<anchor xml:id="_testlib_8h_source_1l00668"/>00668 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtos(t);
<anchor xml:id="_testlib_8h_source_1l00669"/>00669 }
<anchor xml:id="_testlib_8h_source_1l00670"/>00670 
<anchor xml:id="_testlib_8h_source_1l00671"/>00671 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;199711L&#32;||&#32;defined(_MSC_VER)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00672"/>00672 <emphasis role="comment">/*&#32;opts&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00673"/>00673 <emphasis role="keywordtype">void</emphasis>&#32;prepareOpts(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;argv[]);
<anchor xml:id="_testlib_8h_source_1l00674"/>00674 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00675"/>00675 
<anchor xml:id="_testlib_8h_source_1l00676"/>00676 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00677"/>00677 <emphasis role="comment">&#32;*&#32;Very&#32;simple&#32;regex-like&#32;pattern.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00678"/>00678 <emphasis role="comment">&#32;*&#32;It&#32;used&#32;for&#32;two&#32;purposes:&#32;validation&#32;and&#32;generation.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00679"/>00679 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00680"/>00680 <emphasis role="comment">&#32;*&#32;For&#32;example,&#32;pattern(&quot;[a-z]{1,5}&quot;).next(rnd)&#32;will&#32;return</emphasis>
<anchor xml:id="_testlib_8h_source_1l00681"/>00681 <emphasis role="comment">&#32;*&#32;random&#32;string&#32;from&#32;lowercase&#32;latin&#32;letters&#32;with&#32;length</emphasis>
<anchor xml:id="_testlib_8h_source_1l00682"/>00682 <emphasis role="comment">&#32;*&#32;from&#32;1&#32;to&#32;5.&#32;It&#32;is&#32;easier&#32;to&#32;call&#32;rnd.next(&quot;[a-z]{1,5}&quot;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00683"/>00683 <emphasis role="comment">&#32;*&#32;for&#32;the&#32;same&#32;effect.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00684"/>00684 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00685"/>00685 <emphasis role="comment">&#32;*&#32;Another&#32;samples:</emphasis>
<anchor xml:id="_testlib_8h_source_1l00686"/>00686 <emphasis role="comment">&#32;*&#32;&quot;mike|john&quot;&#32;will&#32;generate&#32;(match)&#32;&quot;mike&quot;&#32;or&#32;&quot;john&quot;;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00687"/>00687 <emphasis role="comment">&#32;*&#32;&quot;-?[1-9][0-9]{0,3}&quot;&#32;will&#32;generate&#32;(match)&#32;non-zero&#32;integers&#32;from&#32;-9999&#32;to&#32;9999;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00688"/>00688 <emphasis role="comment">&#32;*&#32;&quot;id-([ac]|b{2})&quot;&#32;will&#32;generate&#32;(match)&#32;&quot;id-a&quot;,&#32;&quot;id-bb&quot;,&#32;&quot;id-c&quot;;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00689"/>00689 <emphasis role="comment">&#32;*&#32;&quot;[^0-9]*&quot;&#32;will&#32;match&#32;sequences&#32;(empty&#32;or&#32;non-empty)&#32;without&#32;digits,&#32;you&#32;can&apos;t</emphasis>
<anchor xml:id="_testlib_8h_source_1l00690"/>00690 <emphasis role="comment">&#32;*&#32;use&#32;it&#32;for&#32;generations.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00691"/>00691 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00692"/>00692 <emphasis role="comment">&#32;*&#32;You&#32;can&apos;t&#32;use&#32;pattern&#32;for&#32;generation&#32;if&#32;it&#32;contains&#32;meta-symbol&#32;&apos;*&apos;.&#32;Also&#32;it</emphasis>
<anchor xml:id="_testlib_8h_source_1l00693"/>00693 <emphasis role="comment">&#32;*&#32;is&#32;not&#32;recommended&#32;to&#32;use&#32;it&#32;for&#32;char-sets&#32;with&#32;meta-symbol&#32;&apos;^&apos;&#32;like&#32;[^a-z].</emphasis>
<anchor xml:id="_testlib_8h_source_1l00694"/>00694 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00695"/>00695 <emphasis role="comment">&#32;*&#32;For&#32;matching&#32;very&#32;simple&#32;greedy&#32;algorithm&#32;is&#32;used.&#32;For&#32;example,&#32;pattern</emphasis>
<anchor xml:id="_testlib_8h_source_1l00696"/>00696 <emphasis role="comment">&#32;*&#32;&quot;[0-9]?1&quot;&#32;will&#32;not&#32;match&#32;&quot;1&quot;,&#32;because&#32;of&#32;greedy&#32;nature&#32;of&#32;matching.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00697"/>00697 <emphasis role="comment">&#32;*&#32;Alternations&#32;(meta-symbols&#32;&quot;|&quot;)&#32;are&#32;processed&#32;with&#32;brute-force&#32;algorithm,&#32;so</emphasis>
<anchor xml:id="_testlib_8h_source_1l00698"/>00698 <emphasis role="comment">&#32;*&#32;do&#32;not&#32;use&#32;many&#32;alternations&#32;in&#32;one&#32;expression.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00699"/>00699 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00700"/>00700 <emphasis role="comment">&#32;*&#32;If&#32;you&#32;want&#32;to&#32;use&#32;one&#32;expression&#32;many&#32;times&#32;it&#32;is&#32;better&#32;to&#32;compile&#32;it&#32;into</emphasis>
<anchor xml:id="_testlib_8h_source_1l00701"/>00701 <emphasis role="comment">&#32;*&#32;a&#32;single&#32;pattern&#32;like&#32;&quot;pattern&#32;p(&quot;[a-z]+&quot;)&quot;.&#32;Later&#32;you&#32;can&#32;use</emphasis>
<anchor xml:id="_testlib_8h_source_1l00702"/>00702 <emphasis role="comment">&#32;*&#32;&quot;p.matches(std::string&#32;s)&quot;&#32;or&#32;&quot;p.next(random_t&amp;&#32;rd)&quot;&#32;to&#32;check&#32;matching&#32;or&#32;generate</emphasis>
<anchor xml:id="_testlib_8h_source_1l00703"/>00703 <emphasis role="comment">&#32;*&#32;new&#32;string&#32;by&#32;pattern.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00704"/>00704 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00705"/>00705 <emphasis role="comment">&#32;*&#32;Simpler&#32;way&#32;to&#32;read&#32;token&#32;and&#32;check&#32;it&#32;for&#32;pattern&#32;matching&#32;is&#32;&quot;inf.readToken(&quot;[a-z]+&quot;)&quot;.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00706"/>00706 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00707"/>00707 <emphasis role="comment">&#32;*&#32;All&#32;spaces&#32;are&#32;ignored&#32;in&#32;regex,&#32;unless&#32;escaped&#32;with&#32;\.&#32;For&#32;example,&#32;ouf.readLine(&quot;NO&#32;SOLUTION&quot;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l00708"/>00708 <emphasis role="comment">&#32;*&#32;will&#32;expect&#32;&quot;NOSOLUTION&quot;,&#32;the&#32;correct&#32;call&#32;should&#32;be&#32;ouf.readLine(&quot;NO\\&#32;SOLUTION&quot;)&#32;or</emphasis>
<anchor xml:id="_testlib_8h_source_1l00709"/>00709 <emphasis role="comment">&#32;*&#32;ouf.readLine(R&quot;(NO\&#32;SOLUTION)&quot;)&#32;if&#32;you&#32;prefer&#32;raw&#32;string&#32;literals&#32;from&#32;C++11.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00710"/>00710 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00711"/>00711 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classrandom__t">random_t</link>;
<anchor xml:id="_testlib_8h_source_1l00712"/>00712 
<anchor xml:id="_testlib_8h_source_1l00713"/><link linkend="_classpattern">00713</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classpattern">pattern</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l00714"/>00714 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_testlib_8h_source_1l00715"/>00715 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Create&#32;pattern&#32;instance&#32;by&#32;string.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00716"/>00716 &#32;&#32;&#32;&#32;<link linkend="_classpattern_1a40258f871a5d68827191054e3e845ccf">pattern</link>(std::string&#32;s);
<anchor xml:id="_testlib_8h_source_1l00717"/>00717 
<anchor xml:id="_testlib_8h_source_1l00718"/>00718 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Generate&#32;new&#32;string&#32;by&#32;pattern&#32;and&#32;given&#32;random_t.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00719"/>00719 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classpattern_1afc240d1630f47a451af22aff8dbf073d">next</link>(<link linkend="_classrandom__t">random_t</link>&#32;&amp;<link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">rnd</link>)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="_testlib_8h_source_1l00720"/>00720 
<anchor xml:id="_testlib_8h_source_1l00721"/>00721 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Checks&#32;if&#32;given&#32;string&#32;match&#32;the&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00722"/>00722 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">matches</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="_testlib_8h_source_1l00723"/>00723 
<anchor xml:id="_testlib_8h_source_1l00724"/>00724 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;source&#32;string&#32;of&#32;the&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00725"/>00725 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="_testlib_8h_source_1l00726"/>00726 
<anchor xml:id="_testlib_8h_source_1l00727"/>00727 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l00728"/>00728 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">matches</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="_testlib_8h_source_1l00729"/>00729 
<anchor xml:id="_testlib_8h_source_1l00730"/>00730 &#32;&#32;&#32;&#32;std::string&#32;s;
<anchor xml:id="_testlib_8h_source_1l00731"/>00731 &#32;&#32;&#32;&#32;std::vector&lt;pattern&gt;&#32;children;
<anchor xml:id="_testlib_8h_source_1l00732"/>00732 &#32;&#32;&#32;&#32;std::vector&lt;char&gt;&#32;chars;
<anchor xml:id="_testlib_8h_source_1l00733"/>00733 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;from;
<anchor xml:id="_testlib_8h_source_1l00734"/>00734 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;to;
<anchor xml:id="_testlib_8h_source_1l00735"/>00735 };
<anchor xml:id="_testlib_8h_source_1l00736"/>00736 
<anchor xml:id="_testlib_8h_source_1l00737"/>00737 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00738"/>00738 <emphasis role="comment">&#32;*&#32;Use&#32;random_t&#32;instances&#32;to&#32;generate&#32;random&#32;values.&#32;It&#32;is&#32;preferred</emphasis>
<anchor xml:id="_testlib_8h_source_1l00739"/>00739 <emphasis role="comment">&#32;*&#32;way&#32;to&#32;use&#32;randoms&#32;instead&#32;of&#32;rand()&#32;function&#32;or&#32;self-written</emphasis>
<anchor xml:id="_testlib_8h_source_1l00740"/>00740 <emphasis role="comment">&#32;*&#32;randoms.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00741"/>00741 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00742"/>00742 <emphasis role="comment">&#32;*&#32;Testlib&#32;defines&#32;global&#32;variable&#32;&quot;rnd&quot;&#32;of&#32;random_t&#32;class.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00743"/>00743 <emphasis role="comment">&#32;*&#32;Use&#32;registerGen(argc,&#32;argv,&#32;1)&#32;to&#32;setup&#32;random_t&#32;seed&#32;be&#32;command</emphasis>
<anchor xml:id="_testlib_8h_source_1l00744"/>00744 <emphasis role="comment">&#32;*&#32;line&#32;(to&#32;use&#32;latest&#32;random&#32;generator&#32;version).</emphasis>
<anchor xml:id="_testlib_8h_source_1l00745"/>00745 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00746"/>00746 <emphasis role="comment">&#32;*&#32;Random&#32;generates&#32;uniformly&#32;distributed&#32;values&#32;if&#32;another&#32;strategy&#32;is</emphasis>
<anchor xml:id="_testlib_8h_source_1l00747"/>00747 <emphasis role="comment">&#32;*&#32;not&#32;specified&#32;explicitly.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00748"/>00748 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00749"/><link linkend="_classrandom__t">00749</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classrandom__t">random_t</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l00750"/>00750 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l00751"/>00751 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;seed;
<anchor xml:id="_testlib_8h_source_1l00752"/>00752 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;multiplier;
<anchor xml:id="_testlib_8h_source_1l00753"/>00753 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;addend;
<anchor xml:id="_testlib_8h_source_1l00754"/>00754 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;mask;
<anchor xml:id="_testlib_8h_source_1l00755"/>00755 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;lim;
<anchor xml:id="_testlib_8h_source_1l00756"/>00756 
<anchor xml:id="_testlib_8h_source_1l00757"/>00757 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;nextBits(<emphasis role="keywordtype">int</emphasis>&#32;bits)&#32;{
<anchor xml:id="_testlib_8h_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;&lt;=&#32;48)&#32;{
<anchor xml:id="_testlib_8h_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;=&#32;(seed&#32;*&#32;multiplier&#32;+&#32;addend)&#32;&amp;&#32;mask;
<anchor xml:id="_testlib_8h_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(seed&#32;&gt;&gt;&#32;(48&#32;-&#32;bits));
<anchor xml:id="_testlib_8h_source_1l00761"/>00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l00762"/>00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;&gt;&#32;63)
<anchor xml:id="_testlib_8h_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::nextBits(int&#32;bits):&#32;n&#32;must&#32;be&#32;less&#32;than&#32;64&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00764"/>00764 
<anchor xml:id="_testlib_8h_source_1l00765"/>00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lowerBitCount&#32;=&#32;(<link linkend="_classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868">random_t::version</link>&#32;==&#32;0&#32;?&#32;31&#32;:&#32;32);
<anchor xml:id="_testlib_8h_source_1l00766"/>00766 
<anchor xml:id="_testlib_8h_source_1l00767"/>00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;left&#32;=&#32;(nextBits(31)&#32;&lt;&lt;&#32;32);
<anchor xml:id="_testlib_8h_source_1l00768"/>00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;right&#32;=&#32;nextBits(lowerBitCount);
<anchor xml:id="_testlib_8h_source_1l00769"/>00769 
<anchor xml:id="_testlib_8h_source_1l00770"/>00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;left&#32;^&#32;right;
<anchor xml:id="_testlib_8h_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00772"/>00772 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00773"/>00773 
<anchor xml:id="_testlib_8h_source_1l00774"/>00774 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_testlib_8h_source_1l00775"/><link linkend="_classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868">00775</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868">version</link>;
<anchor xml:id="_testlib_8h_source_1l00776"/>00776 
<anchor xml:id="_testlib_8h_source_1l00777"/>00777 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;New&#32;random_t&#32;with&#32;fixed&#32;seed.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00778"/><link linkend="_classrandom__t_1a200954ff6ef69dbe691a1d9bc6f73543">00778</link> &#32;&#32;&#32;&#32;<link linkend="_classrandom__t_1a200954ff6ef69dbe691a1d9bc6f73543">random_t</link>()
<anchor xml:id="_testlib_8h_source_1l00779"/>00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;seed(3905348978240129619LL)&#32;{
<anchor xml:id="_testlib_8h_source_1l00780"/>00780 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00781"/>00781 
<anchor xml:id="_testlib_8h_source_1l00782"/>00782 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Sets&#32;seed&#32;by&#32;command&#32;line.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00783"/><link linkend="_classrandom__t_1a091210e52bff54e02afeda4d343e081d">00783</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classrandom__t_1a091210e52bff54e02afeda4d343e081d">setSeed</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[])&#32;{
<anchor xml:id="_testlib_8h_source_1l00784"/>00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classrandom__t">random_t</link>&#32;p;
<anchor xml:id="_testlib_8h_source_1l00785"/>00785 
<anchor xml:id="_testlib_8h_source_1l00786"/>00786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;=&#32;3905348978240129619LL;
<anchor xml:id="_testlib_8h_source_1l00787"/>00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;argc;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;le&#32;=&#32;std::strlen(argv[i]);
<anchor xml:id="_testlib_8h_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;le;&#32;j++)
<anchor xml:id="_testlib_8h_source_1l00790"/>00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;=&#32;seed&#32;*&#32;multiplier&#32;+&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;(argv[i][j])&#32;+&#32;addend;
<anchor xml:id="_testlib_8h_source_1l00791"/>00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;+=&#32;multiplier&#32;/&#32;addend;
<anchor xml:id="_testlib_8h_source_1l00792"/>00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00793"/>00793 
<anchor xml:id="_testlib_8h_source_1l00794"/>00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;=&#32;seed&#32;&amp;&#32;mask;
<anchor xml:id="_testlib_8h_source_1l00795"/>00795 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00796"/>00796 
<anchor xml:id="_testlib_8h_source_1l00797"/>00797 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Sets&#32;seed&#32;by&#32;given&#32;value.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00798"/><link linkend="_classrandom__t_1a5a4c52c8814df1402bd4451a54c62596">00798</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classrandom__t_1a5a4c52c8814df1402bd4451a54c62596">setSeed</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;_seed)&#32;{
<anchor xml:id="_testlib_8h_source_1l00799"/>00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;long)&#32;_seed;
<anchor xml:id="_testlib_8h_source_1l00800"/>00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;=&#32;(seed&#32;^&#32;multiplier)&#32;&amp;&#32;mask;
<anchor xml:id="_testlib_8h_source_1l00801"/>00801 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00802"/>00802 
<anchor xml:id="_testlib_8h_source_1l00803"/>00803 <emphasis role="preprocessor">#ifndef&#32;__BORLANDC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00804"/>00804 
<anchor xml:id="_testlib_8h_source_1l00805"/>00805 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;string&#32;value&#32;by&#32;given&#32;pattern&#32;(see&#32;pattern&#32;documentation).&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00806"/><link linkend="_classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6">00806</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6">next</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn)&#32;{
<anchor xml:id="_testlib_8h_source_1l00807"/>00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpattern">pattern</link>&#32;p(ptrn);
<anchor xml:id="_testlib_8h_source_1l00808"/>00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p.<link linkend="_classpattern_1afc240d1630f47a451af22aff8dbf073d">next</link>(*<emphasis role="keyword">this</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00809"/>00809 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00810"/>00810 
<anchor xml:id="_testlib_8h_source_1l00811"/>00811 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00812"/>00812 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;string&#32;value&#32;by&#32;given&#32;pattern&#32;(see&#32;pattern&#32;documentation).&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00813"/>00813 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(std::string&#32;ptrn)
<anchor xml:id="_testlib_8h_source_1l00814"/>00814 &#32;&#32;&#32;&#32;{
<anchor xml:id="_testlib_8h_source_1l00815"/>00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpattern">pattern</link>&#32;p(ptrn);
<anchor xml:id="_testlib_8h_source_1l00816"/>00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p.next(*<emphasis role="keyword">this</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00817"/>00817 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00818"/>00818 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00819"/>00819 
<anchor xml:id="_testlib_8h_source_1l00820"/>00820 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;value&#32;in&#32;range&#32;[0,&#32;n-1].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00821"/><link linkend="_classrandom__t_1a6a2a9da34c281767ff0d2eba26ab10aa">00821</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1a6a2a9da34c281767ff0d2eba26ab10aa">next</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l00822"/>00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l00823"/>00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::next(int&#32;n):&#32;n&#32;must&#32;be&#32;positive&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00824"/>00824 
<anchor xml:id="_testlib_8h_source_1l00825"/>00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&amp;&#32;-<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;==&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;&#32;<emphasis role="comment">//&#32;n&#32;is&#32;a&#32;power&#32;of&#32;2</emphasis>
<anchor xml:id="_testlib_8h_source_1l00826"/>00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;((<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;*&#32;(<emphasis role="keywordtype">long</emphasis>&#32;long)&#32;nextBits(31))&#32;&gt;&gt;&#32;31);
<anchor xml:id="_testlib_8h_source_1l00827"/>00827 
<anchor xml:id="_testlib_8h_source_1l00828"/>00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;limit&#32;=&#32;INT_MAX&#32;/&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;*&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
<anchor xml:id="_testlib_8h_source_1l00829"/>00829 
<anchor xml:id="_testlib_8h_source_1l00830"/>00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;bits;
<anchor xml:id="_testlib_8h_source_1l00831"/>00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l00832"/>00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bits&#32;=&#32;nextBits(31);
<anchor xml:id="_testlib_8h_source_1l00833"/>00833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(bits&#32;&gt;=&#32;limit);
<anchor xml:id="_testlib_8h_source_1l00834"/>00834 
<anchor xml:id="_testlib_8h_source_1l00835"/>00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int(bits&#32;%&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l00836"/>00836 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00837"/>00837 
<anchor xml:id="_testlib_8h_source_1l00838"/>00838 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;value&#32;in&#32;range&#32;[0,&#32;n-1].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00839"/><link linkend="_classrandom__t_1a1a80c042ba815ff52c119c52771170b7">00839</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1a1a80c042ba815ff52c119c52771170b7">next</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l00840"/>00840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&gt;=&#32;INT_MAX)
<anchor xml:id="_testlib_8h_source_1l00841"/>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::next(unsigned&#32;int&#32;n):&#32;n&#32;must&#32;be&#32;less&#32;INT_MAX&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00842"/>00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(<emphasis role="keywordtype">int</emphasis>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>));
<anchor xml:id="_testlib_8h_source_1l00843"/>00843 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00844"/>00844 
<anchor xml:id="_testlib_8h_source_1l00845"/>00845 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;value&#32;in&#32;range&#32;[0,&#32;n-1].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00846"/><link linkend="_classrandom__t_1a45c008fa70962b5f24cd3b964fe4685a">00846</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a45c008fa70962b5f24cd3b964fe4685a">next</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l00847"/>00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l00848"/>00848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::next(long&#32;long&#32;n):&#32;n&#32;must&#32;be&#32;positive&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00849"/>00849 
<anchor xml:id="_testlib_8h_source_1l00850"/>00850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;limit&#32;=&#32;<link linkend="_testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf">__TESTLIB_LONGLONG_MAX</link>&#32;/&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;*&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
<anchor xml:id="_testlib_8h_source_1l00851"/>00851 
<anchor xml:id="_testlib_8h_source_1l00852"/>00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;bits;
<anchor xml:id="_testlib_8h_source_1l00853"/>00853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l00854"/>00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bits&#32;=&#32;nextBits(63);
<anchor xml:id="_testlib_8h_source_1l00855"/>00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(bits&#32;&gt;=&#32;limit);
<anchor xml:id="_testlib_8h_source_1l00856"/>00856 
<anchor xml:id="_testlib_8h_source_1l00857"/>00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bits&#32;%&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
<anchor xml:id="_testlib_8h_source_1l00858"/>00858 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00859"/>00859 
<anchor xml:id="_testlib_8h_source_1l00860"/>00860 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;value&#32;in&#32;range&#32;[0,&#32;n-1].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00861"/><link linkend="_classrandom__t_1a67074aceedb1cc4e0e632d766bdecb64">00861</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a67074aceedb1cc4e0e632d766bdecb64">next</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l00862"/>00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&gt;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(<link linkend="_testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf">__TESTLIB_LONGLONG_MAX</link>))
<anchor xml:id="_testlib_8h_source_1l00863"/>00863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::next(unsigned&#32;long&#32;long&#32;n):&#32;n&#32;must&#32;be&#32;less&#32;LONGLONG_MAX&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00864"/>00864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>((<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>));
<anchor xml:id="_testlib_8h_source_1l00865"/>00865 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00866"/>00866 
<anchor xml:id="_testlib_8h_source_1l00867"/>00867 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;value&#32;in&#32;range&#32;[0,&#32;n-1].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00868"/><link linkend="_classrandom__t_1abfb4c6c332de59554b9ff536f739f6f6">00868</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1abfb4c6c332de59554b9ff536f739f6f6">next</link>(<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l00869"/>00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">long</emphasis>)&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>((<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>));
<anchor xml:id="_testlib_8h_source_1l00870"/>00870 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00871"/>00871 
<anchor xml:id="_testlib_8h_source_1l00872"/>00872 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;value&#32;in&#32;range&#32;[0,&#32;n-1].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00873"/><link linkend="_classrandom__t_1a92799ea85fc3b92554ca5d1c0696a48f">00873</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a92799ea85fc3b92554ca5d1c0696a48f">next</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l00874"/>00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&gt;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(LONG_MAX))
<anchor xml:id="_testlib_8h_source_1l00875"/>00875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::next(unsigned&#32;long&#32;n):&#32;n&#32;must&#32;be&#32;less&#32;LONG_MAX&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00876"/>00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>));
<anchor xml:id="_testlib_8h_source_1l00877"/>00877 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00878"/>00878 
<anchor xml:id="_testlib_8h_source_1l00879"/>00879 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;value&#32;in&#32;range&#32;[from,to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00880"/><link linkend="_classrandom__t_1a02e0d6d3acf4dc0348b7e6893a9db59a">00880</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1a02e0d6d3acf4dc0348b7e6893a9db59a">next</link>(<emphasis role="keywordtype">int</emphasis>&#32;from,&#32;<emphasis role="keywordtype">int</emphasis>&#32;to)&#32;{
<anchor xml:id="_testlib_8h_source_1l00881"/>00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int(<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>((<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;to&#32;-&#32;from&#32;+&#32;1)&#32;+&#32;from);
<anchor xml:id="_testlib_8h_source_1l00882"/>00882 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00883"/>00883 
<anchor xml:id="_testlib_8h_source_1l00884"/>00884 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;value&#32;in&#32;range&#32;[from,to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00885"/><link linkend="_classrandom__t_1a96576e50564fa3380dcd950a8ae708b2">00885</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1a96576e50564fa3380dcd950a8ae708b2">next</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;from,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;to)&#32;{
<anchor xml:id="_testlib_8h_source_1l00886"/>00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;(<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>((<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;to&#32;-&#32;from&#32;+&#32;1)&#32;+&#32;from);
<anchor xml:id="_testlib_8h_source_1l00887"/>00887 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00888"/>00888 
<anchor xml:id="_testlib_8h_source_1l00889"/>00889 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;value&#32;in&#32;range&#32;[from,to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00890"/><link linkend="_classrandom__t_1ac8efd50ad04ad63205279f8ad9f5cfd8">00890</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1ac8efd50ad04ad63205279f8ad9f5cfd8">next</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;from,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;to)&#32;{
<anchor xml:id="_testlib_8h_source_1l00891"/>00891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(to&#32;-&#32;from&#32;+&#32;1)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l00892"/>00892 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00893"/>00893 
<anchor xml:id="_testlib_8h_source_1l00894"/>00894 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;value&#32;in&#32;range&#32;[from,to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00895"/><link linkend="_classrandom__t_1af906bf4a0d3f94dce8362e6ad91b73c1">00895</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1af906bf4a0d3f94dce8362e6ad91b73c1">next</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;from,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;to)&#32;{
<anchor xml:id="_testlib_8h_source_1l00896"/>00896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l00897"/>00897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::next(unsigned&#32;long&#32;long&#32;from,&#32;unsigned&#32;long&#32;long&#32;to):&#32;from&#32;can&apos;t&#32;not&#32;exceed&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00898"/>00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(to&#32;-&#32;from&#32;+&#32;1)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l00899"/>00899 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00900"/>00900 
<anchor xml:id="_testlib_8h_source_1l00901"/>00901 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;value&#32;in&#32;range&#32;[from,to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00902"/><link linkend="_classrandom__t_1a94266e882ca443601604c27215b5b4b6">00902</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a94266e882ca443601604c27215b5b4b6">next</link>(<emphasis role="keywordtype">long</emphasis>&#32;from,&#32;<emphasis role="keywordtype">long</emphasis>&#32;to)&#32;{
<anchor xml:id="_testlib_8h_source_1l00903"/>00903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(to&#32;-&#32;from&#32;+&#32;1)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l00904"/>00904 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00905"/>00905 
<anchor xml:id="_testlib_8h_source_1l00906"/>00906 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;value&#32;in&#32;range&#32;[from,to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00907"/><link linkend="_classrandom__t_1a4d087e798a7882b0e06ea23bffee99b6">00907</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a4d087e798a7882b0e06ea23bffee99b6">next</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;from,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;to)&#32;{
<anchor xml:id="_testlib_8h_source_1l00908"/>00908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l00909"/>00909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::next(unsigned&#32;long&#32;from,&#32;unsigned&#32;long&#32;to):&#32;from&#32;can&apos;t&#32;not&#32;exceed&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00910"/>00910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(to&#32;-&#32;from&#32;+&#32;1)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l00911"/>00911 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00912"/>00912 
<anchor xml:id="_testlib_8h_source_1l00913"/>00913 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;double&#32;value&#32;in&#32;range&#32;[0,&#32;1).&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00914"/><link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">00914</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l00915"/>00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;left&#32;=&#32;((<emphasis role="keywordtype">long</emphasis>&#32;long)&#32;(nextBits(26))&#32;&lt;&lt;&#32;27);
<anchor xml:id="_testlib_8h_source_1l00916"/>00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;right&#32;=&#32;nextBits(27);
<anchor xml:id="_testlib_8h_source_1l00917"/>00917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_crop((<emphasis role="keywordtype">double</emphasis>)&#32;(left&#32;+&#32;right)&#32;/&#32;(<emphasis role="keywordtype">double</emphasis>)&#32;(1LL&#32;&lt;&lt;&#32;53),&#32;0.0,&#32;1.0);
<anchor xml:id="_testlib_8h_source_1l00918"/>00918 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00919"/>00919 
<anchor xml:id="_testlib_8h_source_1l00920"/>00920 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;double&#32;value&#32;in&#32;range&#32;[0,&#32;n).&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00921"/><link linkend="_classrandom__t_1a025fe558e59c74de018660fcc106afa1">00921</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classrandom__t_1a025fe558e59c74de018660fcc106afa1">next</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l00922"/>00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&lt;=&#32;0.0)
<anchor xml:id="_testlib_8h_source_1l00923"/>00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::next(double):&#32;n&#32;should&#32;be&#32;positive&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00924"/>00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_crop(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;*&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(),&#32;0.0,&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l00925"/>00925 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00926"/>00926 
<anchor xml:id="_testlib_8h_source_1l00927"/>00927 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;double&#32;value&#32;in&#32;range&#32;[from,&#32;to).&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00928"/><link linkend="_classrandom__t_1a8066c6224478692f9df72ab92268cee9">00928</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classrandom__t_1a8066c6224478692f9df72ab92268cee9">next</link>(<emphasis role="keywordtype">double</emphasis>&#32;from,&#32;<emphasis role="keywordtype">double</emphasis>&#32;to)&#32;{
<anchor xml:id="_testlib_8h_source_1l00929"/>00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;=&#32;to)
<anchor xml:id="_testlib_8h_source_1l00930"/>00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::next(double&#32;from,&#32;double&#32;to):&#32;from&#32;should&#32;be&#32;strictly&#32;less&#32;than&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00931"/>00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(to&#32;-&#32;from)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l00932"/>00932 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00933"/>00933 
<anchor xml:id="_testlib_8h_source_1l00934"/>00934 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;element&#32;from&#32;container.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00935"/>00935 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Container&gt;
<anchor xml:id="_testlib_8h_source_1l00936"/><link linkend="_classrandom__t_1a6ad67430ee6f8a5ba04d716239ad0001">00936</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Container::value_type&#32;<link linkend="_classrandom__t_1a6ad67430ee6f8a5ba04d716239ad0001">any</link>(<emphasis role="keyword">const</emphasis>&#32;Container&#32;&amp;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l00937"/>00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;int(c.size());
<anchor xml:id="_testlib_8h_source_1l00938"/>00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l00939"/>00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::any(const&#32;Container&amp;&#32;c):&#32;c.size()&#32;must&#32;be&#32;positive&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00940"/>00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Container::const_iterator&#32;it&#32;=&#32;c.begin();
<anchor xml:id="_testlib_8h_source_1l00941"/>00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(it,&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(size));
<anchor xml:id="_testlib_8h_source_1l00942"/>00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*it;
<anchor xml:id="_testlib_8h_source_1l00943"/>00943 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00944"/>00944 
<anchor xml:id="_testlib_8h_source_1l00945"/>00945 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;element&#32;from&#32;iterator&#32;range.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00946"/>00946 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Iter&gt;
<anchor xml:id="_testlib_8h_source_1l00947"/><link linkend="_classrandom__t_1a56614b8ab0529e6fe2b17d50f9188184">00947</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Iter::value_type&#32;<link linkend="_classrandom__t_1a56614b8ab0529e6fe2b17d50f9188184">any</link>(<emphasis role="keyword">const</emphasis>&#32;Iter&#32;&amp;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;Iter&#32;&amp;end)&#32;{
<anchor xml:id="_testlib_8h_source_1l00948"/>00948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::distance(begin,&#32;end));
<anchor xml:id="_testlib_8h_source_1l00949"/>00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l00950"/>00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::any(const&#32;Iter&amp;&#32;begin,&#32;const&#32;Iter&amp;&#32;end):&#32;range&#32;must&#32;have&#32;positive&#32;length&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00951"/>00951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Iter&#32;it&#32;=&#32;begin;
<anchor xml:id="_testlib_8h_source_1l00952"/>00952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(it,&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(size));
<anchor xml:id="_testlib_8h_source_1l00953"/>00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*it;
<anchor xml:id="_testlib_8h_source_1l00954"/>00954 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00955"/>00955 
<anchor xml:id="_testlib_8h_source_1l00956"/>00956 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Random&#32;string&#32;value&#32;by&#32;given&#32;pattern&#32;(see&#32;pattern&#32;documentation).&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00957"/>00957 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l00958"/>00958 &#32;&#32;&#32;&#32;__attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;2,&#32;3)))
<anchor xml:id="_testlib_8h_source_1l00959"/>00959 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l00960"/><link linkend="_classrandom__t_1aacdef5e80fbdb890878a20d22bf819fd">00960</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classrandom__t_1aacdef5e80fbdb890878a20d22bf819fd">next</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l00961"/>00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;ptrn);
<anchor xml:id="_testlib_8h_source_1l00962"/>00962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(ptrn);
<anchor xml:id="_testlib_8h_source_1l00963"/>00963 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00964"/>00964 
<anchor xml:id="_testlib_8h_source_1l00965"/>00965 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00966"/>00966 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Weighted&#32;next.&#32;If&#32;type&#32;==&#32;0&#32;than&#32;it&#32;is&#32;usual&#32;&quot;next()&quot;.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00967"/>00967 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00968"/>00968 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;If&#32;type&#32;=&#32;1,&#32;than&#32;it&#32;returns&#32;&quot;max(next(),&#32;next())&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l00969"/>00969 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(the&#32;number&#32;of&#32;&quot;max&quot;&#32;functions&#32;equals&#32;to&#32;&quot;type&quot;).</emphasis>
<anchor xml:id="_testlib_8h_source_1l00970"/>00970 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l00971"/>00971 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;If&#32;type&#32;&lt;&#32;0,&#32;than&#32;&quot;max&quot;&#32;function&#32;replaces&#32;with&#32;&quot;min&quot;.</emphasis>
<anchor xml:id="_testlib_8h_source_1l00972"/>00972 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l00973"/><link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">00973</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l00974"/>00974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l00975"/>00975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(int&#32;n,&#32;int&#32;type):&#32;n&#32;must&#32;be&#32;positive&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l00976"/>00976 
<anchor xml:id="_testlib_8h_source_1l00977"/>00977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(abs(type)&#32;&lt;&#32;random_t::lim)&#32;{
<anchor xml:id="_testlib_8h_source_1l00978"/>00978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result&#32;=&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l00979"/>00979 
<anchor xml:id="_testlib_8h_source_1l00980"/>00980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;+type;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l00981"/>00981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;__testlib_max(result,&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>));
<anchor xml:id="_testlib_8h_source_1l00982"/>00982 
<anchor xml:id="_testlib_8h_source_1l00983"/>00983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;-type;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l00984"/>00984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;__testlib_min(result,&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>));
<anchor xml:id="_testlib_8h_source_1l00985"/>00985 
<anchor xml:id="_testlib_8h_source_1l00986"/>00986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l00987"/>00987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l00988"/>00988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;p;
<anchor xml:id="_testlib_8h_source_1l00989"/>00989 
<anchor xml:id="_testlib_8h_source_1l00990"/>00990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;&gt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l00991"/>00991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;std::pow(<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>()&#32;+&#32;0.0,&#32;1.0&#32;/&#32;(type&#32;+&#32;1));
<anchor xml:id="_testlib_8h_source_1l00992"/>00992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l00993"/>00993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1&#32;-&#32;std::pow(<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>()&#32;+&#32;0.0,&#32;1.0&#32;/&#32;(-type&#32;+&#32;1));
<anchor xml:id="_testlib_8h_source_1l00994"/>00994 
<anchor xml:id="_testlib_8h_source_1l00995"/>00995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_crop((<emphasis role="keywordtype">int</emphasis>)&#32;(<emphasis role="keywordtype">double</emphasis>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;*&#32;p),&#32;0,&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l00996"/>00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00997"/>00997 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l00998"/>00998 
<anchor xml:id="_testlib_8h_source_1l00999"/>00999 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;wnext(int,&#32;int).&#32;It&#32;uses&#32;the&#32;same&#32;algorithms.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01000"/><link linkend="_classrandom__t_1a0ee4b3d21fe3f8e765cdb55593f6b698">01000</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a0ee4b3d21fe3f8e765cdb55593f6b698">wnext</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01001"/>01001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l01002"/>01002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(long&#32;long&#32;n,&#32;int&#32;type):&#32;n&#32;must&#32;be&#32;positive&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01003"/>01003 
<anchor xml:id="_testlib_8h_source_1l01004"/>01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(abs(type)&#32;&lt;&#32;random_t::lim)&#32;{
<anchor xml:id="_testlib_8h_source_1l01005"/>01005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;result&#32;=&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l01006"/>01006 
<anchor xml:id="_testlib_8h_source_1l01007"/>01007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;+type;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01008"/>01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;__testlib_max(result,&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>));
<anchor xml:id="_testlib_8h_source_1l01009"/>01009 
<anchor xml:id="_testlib_8h_source_1l01010"/>01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;-type;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01011"/>01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;__testlib_min(result,&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>));
<anchor xml:id="_testlib_8h_source_1l01012"/>01012 
<anchor xml:id="_testlib_8h_source_1l01013"/>01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l01014"/>01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01015"/>01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;p;
<anchor xml:id="_testlib_8h_source_1l01016"/>01016 
<anchor xml:id="_testlib_8h_source_1l01017"/>01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;&gt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l01018"/>01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;std::pow(<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>()&#32;+&#32;0.0,&#32;1.0&#32;/&#32;(type&#32;+&#32;1));
<anchor xml:id="_testlib_8h_source_1l01019"/>01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01020"/>01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1&#32;-&#32;std::pow(<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>()&#32;+&#32;0.0,&#32;1.0&#32;/&#32;(-type&#32;+&#32;1));
<anchor xml:id="_testlib_8h_source_1l01021"/>01021 
<anchor xml:id="_testlib_8h_source_1l01022"/>01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_crop((<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(<emphasis role="keywordtype">double</emphasis>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;*&#32;p),&#32;0LL,&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l01023"/>01023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01024"/>01024 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01025"/>01025 
<anchor xml:id="_testlib_8h_source_1l01026"/>01026 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;value&#32;in&#32;[0,&#32;n).&#32;See&#32;wnext(int,&#32;int).&#32;It&#32;uses&#32;the&#32;same&#32;algorithms.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01027"/><link linkend="_classrandom__t_1a45f6cc6e3ecc6677b66e5c756fe4bfe4">01027</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classrandom__t_1a45f6cc6e3ecc6677b66e5c756fe4bfe4">wnext</link>(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01028"/>01028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l01029"/>01029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(double&#32;n,&#32;int&#32;type):&#32;n&#32;must&#32;be&#32;positive&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01030"/>01030 
<anchor xml:id="_testlib_8h_source_1l01031"/>01031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(abs(type)&#32;&lt;&#32;random_t::lim)&#32;{
<anchor xml:id="_testlib_8h_source_1l01032"/>01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;result&#32;=&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>();
<anchor xml:id="_testlib_8h_source_1l01033"/>01033 
<anchor xml:id="_testlib_8h_source_1l01034"/>01034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;+type;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01035"/>01035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;__testlib_max(result,&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>());
<anchor xml:id="_testlib_8h_source_1l01036"/>01036 
<anchor xml:id="_testlib_8h_source_1l01037"/>01037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;-type;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01038"/>01038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;__testlib_min(result,&#32;<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>());
<anchor xml:id="_testlib_8h_source_1l01039"/>01039 
<anchor xml:id="_testlib_8h_source_1l01040"/>01040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;*&#32;result;
<anchor xml:id="_testlib_8h_source_1l01041"/>01041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01042"/>01042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;p;
<anchor xml:id="_testlib_8h_source_1l01043"/>01043 
<anchor xml:id="_testlib_8h_source_1l01044"/>01044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;&gt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l01045"/>01045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;std::pow(<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>()&#32;+&#32;0.0,&#32;1.0&#32;/&#32;(type&#32;+&#32;1));
<anchor xml:id="_testlib_8h_source_1l01046"/>01046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01047"/>01047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;1&#32;-&#32;std::pow(<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>()&#32;+&#32;0.0,&#32;1.0&#32;/&#32;(-type&#32;+&#32;1));
<anchor xml:id="_testlib_8h_source_1l01048"/>01048 
<anchor xml:id="_testlib_8h_source_1l01049"/>01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_crop(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;*&#32;p,&#32;0.0,&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l01050"/>01050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01051"/>01051 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01052"/>01052 
<anchor xml:id="_testlib_8h_source_1l01053"/>01053 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;value&#32;in&#32;[0,&#32;1).&#32;See&#32;wnext(int,&#32;int).&#32;It&#32;uses&#32;the&#32;same&#32;algorithms.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01054"/><link linkend="_classrandom__t_1a040834a196ac9423950b70444fa9e815">01054</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classrandom__t_1a040834a196ac9423950b70444fa9e815">wnext</link>(<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01055"/>01055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(1.0,&#32;type);
<anchor xml:id="_testlib_8h_source_1l01056"/>01056 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01057"/>01057 
<anchor xml:id="_testlib_8h_source_1l01058"/>01058 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;wnext(int,&#32;int).&#32;It&#32;uses&#32;the&#32;same&#32;algorithms.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01059"/><link linkend="_classrandom__t_1a25bd3838df67822270e9b357ed99753b">01059</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1a25bd3838df67822270e9b357ed99753b">wnext</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01060"/>01060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&gt;=&#32;INT_MAX)
<anchor xml:id="_testlib_8h_source_1l01061"/>01061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(unsigned&#32;int&#32;n,&#32;int&#32;type):&#32;n&#32;must&#32;be&#32;less&#32;INT_MAX&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01062"/>01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(<emphasis role="keywordtype">int</emphasis>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>),&#32;type);
<anchor xml:id="_testlib_8h_source_1l01063"/>01063 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01064"/>01064 
<anchor xml:id="_testlib_8h_source_1l01065"/>01065 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;wnext(int,&#32;int).&#32;It&#32;uses&#32;the&#32;same&#32;algorithms.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01066"/><link linkend="_classrandom__t_1adc03869fcf6b80381e36e196d324a792">01066</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1adc03869fcf6b80381e36e196d324a792">wnext</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01067"/>01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&gt;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(<link linkend="_testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf">__TESTLIB_LONGLONG_MAX</link>))
<anchor xml:id="_testlib_8h_source_1l01068"/>01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(unsigned&#32;long&#32;long&#32;n,&#32;int&#32;type):&#32;n&#32;must&#32;be&#32;less&#32;LONGLONG_MAX&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01069"/>01069 
<anchor xml:id="_testlib_8h_source_1l01070"/>01070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>((<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>),&#32;type);
<anchor xml:id="_testlib_8h_source_1l01071"/>01071 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01072"/>01072 
<anchor xml:id="_testlib_8h_source_1l01073"/>01073 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;wnext(int,&#32;int).&#32;It&#32;uses&#32;the&#32;same&#32;algorithms.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01074"/><link linkend="_classrandom__t_1a78d4e3af24a4d2dc4330d5cbcce6504a">01074</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a78d4e3af24a4d2dc4330d5cbcce6504a">wnext</link>(<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01075"/>01075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">long</emphasis>)&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>((<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>),&#32;type);
<anchor xml:id="_testlib_8h_source_1l01076"/>01076 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01077"/>01077 
<anchor xml:id="_testlib_8h_source_1l01078"/>01078 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;wnext(int,&#32;int).&#32;It&#32;uses&#32;the&#32;same&#32;algorithms.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01079"/><link linkend="_classrandom__t_1a02872a7a16d8e5012c679b84b79a3c9f">01079</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a02872a7a16d8e5012c679b84b79a3c9f">wnext</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01080"/>01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&gt;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(LONG_MAX))
<anchor xml:id="_testlib_8h_source_1l01081"/>01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(unsigned&#32;long&#32;n,&#32;int&#32;type):&#32;n&#32;must&#32;be&#32;less&#32;LONG_MAX&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01082"/>01082 
<anchor xml:id="_testlib_8h_source_1l01083"/>01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>),&#32;type);
<anchor xml:id="_testlib_8h_source_1l01084"/>01084 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01085"/>01085 
<anchor xml:id="_testlib_8h_source_1l01086"/>01086 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;weighted&#32;random&#32;value&#32;in&#32;range&#32;[from,&#32;to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01087"/><link linkend="_classrandom__t_1aa72f4c64829957376aad6cc9103d4201">01087</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1aa72f4c64829957376aad6cc9103d4201">wnext</link>(<emphasis role="keywordtype">int</emphasis>&#32;from,&#32;<emphasis role="keywordtype">int</emphasis>&#32;to,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01088"/>01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l01089"/>01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(int&#32;from,&#32;int&#32;to,&#32;int&#32;type):&#32;from&#32;can&apos;t&#32;not&#32;exceed&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01090"/>01090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(to&#32;-&#32;from&#32;+&#32;1,&#32;type)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l01091"/>01091 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01092"/>01092 
<anchor xml:id="_testlib_8h_source_1l01093"/>01093 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;weighted&#32;random&#32;value&#32;in&#32;range&#32;[from,&#32;to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01094"/><link linkend="_classrandom__t_1a1b4c0bf6ead1bb3d8fe4dc2175dacdf4">01094</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1a1b4c0bf6ead1bb3d8fe4dc2175dacdf4">wnext</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;from,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;to,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01095"/>01095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l01096"/>01096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(unsigned&#32;int&#32;from,&#32;unsigned&#32;int&#32;to,&#32;int&#32;type):&#32;from&#32;can&apos;t&#32;not&#32;exceed&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01097"/>01097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int(<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(to&#32;-&#32;from&#32;+&#32;1,&#32;type)&#32;+&#32;from);
<anchor xml:id="_testlib_8h_source_1l01098"/>01098 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01099"/>01099 
<anchor xml:id="_testlib_8h_source_1l01100"/>01100 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;weighted&#32;random&#32;value&#32;in&#32;range&#32;[from,&#32;to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01101"/><link linkend="_classrandom__t_1a5257c1a948d7ef92d664980e9a435fa5">01101</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a5257c1a948d7ef92d664980e9a435fa5">wnext</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;from,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;to,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01102"/>01102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l01103"/>01103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(long&#32;long&#32;from,&#32;long&#32;long&#32;to,&#32;int&#32;type):&#32;from&#32;can&apos;t&#32;not&#32;exceed&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01104"/>01104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(to&#32;-&#32;from&#32;+&#32;1,&#32;type)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l01105"/>01105 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01106"/>01106 
<anchor xml:id="_testlib_8h_source_1l01107"/>01107 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;weighted&#32;random&#32;value&#32;in&#32;range&#32;[from,&#32;to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01108"/><link linkend="_classrandom__t_1abd0776ec850dcd8f057699f03cd54d49">01108</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1abd0776ec850dcd8f057699f03cd54d49">wnext</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;from,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;to,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01109"/>01109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l01110"/>01110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(
<anchor xml:id="_testlib_8h_source_1l01111"/>01111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;random_t::wnext(unsigned&#32;long&#32;long&#32;from,&#32;unsigned&#32;long&#32;long&#32;to,&#32;int&#32;type):&#32;from&#32;can&apos;t&#32;not&#32;exceed&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01112"/>01112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(to&#32;-&#32;from&#32;+&#32;1,&#32;type)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l01113"/>01113 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01114"/>01114 
<anchor xml:id="_testlib_8h_source_1l01115"/>01115 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;weighted&#32;random&#32;value&#32;in&#32;range&#32;[from,&#32;to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01116"/><link linkend="_classrandom__t_1a501082f1d8f8ca94d9a952c822d7c992">01116</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a501082f1d8f8ca94d9a952c822d7c992">wnext</link>(<emphasis role="keywordtype">long</emphasis>&#32;from,&#32;<emphasis role="keywordtype">long</emphasis>&#32;to,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01117"/>01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l01118"/>01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(long&#32;from,&#32;long&#32;to,&#32;int&#32;type):&#32;from&#32;can&apos;t&#32;not&#32;exceed&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01119"/>01119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(to&#32;-&#32;from&#32;+&#32;1,&#32;type)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l01120"/>01120 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01121"/>01121 
<anchor xml:id="_testlib_8h_source_1l01122"/>01122 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;weighted&#32;random&#32;value&#32;in&#32;range&#32;[from,&#32;to].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01123"/><link linkend="_classrandom__t_1a652d3dac50de94daaef2e69cc3ab8ede">01123</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classrandom__t_1a652d3dac50de94daaef2e69cc3ab8ede">wnext</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;from,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;to,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01124"/>01124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l01125"/>01125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(unsigned&#32;long&#32;from,&#32;unsigned&#32;long&#32;to,&#32;int&#32;type):&#32;from&#32;can&apos;t&#32;not&#32;exceed&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01126"/>01126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(to&#32;-&#32;from&#32;+&#32;1,&#32;type)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l01127"/>01127 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01128"/>01128 
<anchor xml:id="_testlib_8h_source_1l01129"/>01129 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;weighted&#32;random&#32;double&#32;value&#32;in&#32;range&#32;[from,&#32;to).&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01130"/><link linkend="_classrandom__t_1a90cf6b1677f5c6f875f8c88a5933ea40">01130</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classrandom__t_1a90cf6b1677f5c6f875f8c88a5933ea40">wnext</link>(<emphasis role="keywordtype">double</emphasis>&#32;from,&#32;<emphasis role="keywordtype">double</emphasis>&#32;to,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01131"/>01131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;=&#32;to)
<anchor xml:id="_testlib_8h_source_1l01132"/>01132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wnext(double&#32;from,&#32;double&#32;to,&#32;int&#32;type):&#32;from&#32;should&#32;be&#32;strictly&#32;less&#32;than&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01133"/>01133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(to&#32;-&#32;from,&#32;type)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l01134"/>01134 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01135"/>01135 
<anchor xml:id="_testlib_8h_source_1l01136"/>01136 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;weighted&#32;random&#32;element&#32;from&#32;container.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01137"/>01137 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Container&gt;
<anchor xml:id="_testlib_8h_source_1l01138"/><link linkend="_classrandom__t_1a9f733f388bbb553a9afabcbbfc68888d">01138</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Container::value_type&#32;<link linkend="_classrandom__t_1a9f733f388bbb553a9afabcbbfc68888d">wany</link>(<emphasis role="keyword">const</emphasis>&#32;Container&#32;&amp;c,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01139"/>01139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;int(c.size());
<anchor xml:id="_testlib_8h_source_1l01140"/>01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l01141"/>01141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::wany(const&#32;Container&amp;&#32;c,&#32;int&#32;type):&#32;c.size()&#32;must&#32;be&#32;positive&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01142"/>01142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Container::const_iterator&#32;it&#32;=&#32;c.begin();
<anchor xml:id="_testlib_8h_source_1l01143"/>01143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(it,&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(size,&#32;type));
<anchor xml:id="_testlib_8h_source_1l01144"/>01144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*it;
<anchor xml:id="_testlib_8h_source_1l01145"/>01145 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01146"/>01146 
<anchor xml:id="_testlib_8h_source_1l01147"/>01147 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;weighted&#32;random&#32;element&#32;from&#32;iterator&#32;range.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01148"/>01148 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Iter&gt;
<anchor xml:id="_testlib_8h_source_1l01149"/><link linkend="_classrandom__t_1aa988d6e195c81a659985aa9714ee5607">01149</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Iter::value_type&#32;<link linkend="_classrandom__t_1aa988d6e195c81a659985aa9714ee5607">wany</link>(<emphasis role="keyword">const</emphasis>&#32;Iter&#32;&amp;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;Iter&#32;&amp;end,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type)&#32;{
<anchor xml:id="_testlib_8h_source_1l01150"/>01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::distance(begin,&#32;end));
<anchor xml:id="_testlib_8h_source_1l01151"/>01151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l01152"/>01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(
<anchor xml:id="_testlib_8h_source_1l01153"/>01153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;random_t::any(const&#32;Iter&amp;&#32;begin,&#32;const&#32;Iter&amp;&#32;end,&#32;int&#32;type):&#32;range&#32;must&#32;have&#32;positive&#32;length&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01154"/>01154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Iter&#32;it&#32;=&#32;begin;
<anchor xml:id="_testlib_8h_source_1l01155"/>01155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(it,&#32;<link linkend="_classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9">wnext</link>(size,&#32;type));
<anchor xml:id="_testlib_8h_source_1l01156"/>01156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*it;
<anchor xml:id="_testlib_8h_source_1l01157"/>01157 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01158"/>01158 
<anchor xml:id="_testlib_8h_source_1l01159"/>01159 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;permutation&#32;of&#32;the&#32;given&#32;size&#32;(values&#32;are&#32;between&#32;`first`&#32;and&#32;`first`+size-1)*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01160"/>01160 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;E&gt;
<anchor xml:id="_testlib_8h_source_1l01161"/><link linkend="_classrandom__t_1a8307bf13307e17694c4d38f76e1457e0">01161</link> &#32;&#32;&#32;&#32;std::vector&lt;E&gt;&#32;<link linkend="_classrandom__t_1a8307bf13307e17694c4d38f76e1457e0">perm</link>(T&#32;size,&#32;E&#32;first)&#32;{
<anchor xml:id="_testlib_8h_source_1l01162"/>01162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l01163"/>01163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::perm(T&#32;size,&#32;E&#32;first&#32;=&#32;0):&#32;size&#32;must&#32;non-negative&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01164"/>01164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l01165"/>01165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::vector&lt;E&gt;();
<anchor xml:id="_testlib_8h_source_1l01166"/>01166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;E&gt;&#32;p(size);
<anchor xml:id="_testlib_8h_source_1l01167"/>01167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;current&#32;=&#32;first;
<anchor xml:id="_testlib_8h_source_1l01168"/>01168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(T&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01169"/>01169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p[i]&#32;=&#32;current++;
<anchor xml:id="_testlib_8h_source_1l01170"/>01170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&gt;&#32;1)
<anchor xml:id="_testlib_8h_source_1l01171"/>01171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(T&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;size;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01172"/>01172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::swap(p[i],&#32;p[<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(i&#32;+&#32;1)]);
<anchor xml:id="_testlib_8h_source_1l01173"/>01173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
<anchor xml:id="_testlib_8h_source_1l01174"/>01174 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01175"/>01175 
<anchor xml:id="_testlib_8h_source_1l01176"/>01176 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;permutation&#32;of&#32;the&#32;given&#32;size&#32;(values&#32;are&#32;between&#32;0&#32;and&#32;size-1)*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01177"/>01177 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l01178"/><link linkend="_classrandom__t_1ae7d1ae42c9e6f534a871b0e38a6b5743">01178</link> &#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;<link linkend="_classrandom__t_1ae7d1ae42c9e6f534a871b0e38a6b5743">perm</link>(T&#32;size)&#32;{
<anchor xml:id="_testlib_8h_source_1l01179"/>01179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1a8307bf13307e17694c4d38f76e1457e0">perm</link>(size,&#32;T(0));
<anchor xml:id="_testlib_8h_source_1l01180"/>01180 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01181"/>01181 
<anchor xml:id="_testlib_8h_source_1l01182"/>01182 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;`size`&#32;unordered&#32;(unsorted)&#32;distinct&#32;numbers&#32;between&#32;`from`&#32;and&#32;`to`.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01183"/>01183 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l01184"/><link linkend="_classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5">01184</link> &#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;<link linkend="_classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5">distinct</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;T&#32;from,&#32;T&#32;to)&#32;{
<anchor xml:id="_testlib_8h_source_1l01185"/>01185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;result;
<anchor xml:id="_testlib_8h_source_1l01186"/>01186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l01187"/>01187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l01188"/>01188 
<anchor xml:id="_testlib_8h_source_1l01189"/>01189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l01190"/>01190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::distinct&#32;expected&#32;from&#32;&lt;=&#32;to&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01191"/>01191 
<anchor xml:id="_testlib_8h_source_1l01192"/>01192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l01193"/>01193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::distinct&#32;expected&#32;size&#32;&gt;=&#32;0&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01194"/>01194 
<anchor xml:id="_testlib_8h_source_1l01195"/>01195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;=&#32;to&#32;-&#32;from&#32;+&#32;1;
<anchor xml:id="_testlib_8h_source_1l01196"/>01196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uint64_t(size)&#32;&gt;&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)
<anchor xml:id="_testlib_8h_source_1l01197"/>01197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::distinct&#32;expected&#32;size&#32;&lt;=&#32;to&#32;-&#32;from&#32;+&#32;1&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01198"/>01198 
<anchor xml:id="_testlib_8h_source_1l01199"/>01199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;expected&#32;=&#32;0.0;
<anchor xml:id="_testlib_8h_source_1l01200"/>01200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;size;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01201"/>01201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected&#32;+=&#32;<emphasis role="keywordtype">double</emphasis>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;/&#32;double(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;-&#32;i&#32;+&#32;1);
<anchor xml:id="_testlib_8h_source_1l01202"/>01202 
<anchor xml:id="_testlib_8h_source_1l01203"/>01203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expected&#32;&lt;&#32;<emphasis role="keywordtype">double</emphasis>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01204"/>01204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::set&lt;T&gt;&#32;vals;
<anchor xml:id="_testlib_8h_source_1l01205"/>01205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>(vals.size())&#32;&lt;&#32;size)&#32;{
<anchor xml:id="_testlib_8h_source_1l01206"/>01206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;x&#32;=&#32;T(<link linkend="_classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26">next</link>(from,&#32;to));
<anchor xml:id="_testlib_8h_source_1l01207"/>01207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vals.insert(x).second)
<anchor xml:id="_testlib_8h_source_1l01208"/>01208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(x);
<anchor xml:id="_testlib_8h_source_1l01209"/>01209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01210"/>01210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01211"/>01211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;&gt;&#32;1000000000)
<anchor xml:id="_testlib_8h_source_1l01212"/>01212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::distinct&#32;here&#32;expected&#32;to&#32;-&#32;from&#32;+&#32;1&#32;&lt;=&#32;1000000000&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01213"/>01213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;p(<link linkend="_classrandom__t_1a8307bf13307e17694c4d38f76e1457e0">perm</link>(<emphasis role="keywordtype">int</emphasis>(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>),&#32;from));
<anchor xml:id="_testlib_8h_source_1l01214"/>01214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.insert(result.end(),&#32;p.begin(),&#32;p.begin()&#32;+&#32;size);
<anchor xml:id="_testlib_8h_source_1l01215"/>01215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01216"/>01216 
<anchor xml:id="_testlib_8h_source_1l01217"/>01217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l01218"/>01218 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01219"/>01219 
<anchor xml:id="_testlib_8h_source_1l01220"/>01220 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;`size`&#32;unordered&#32;(unsorted)&#32;distinct&#32;numbers&#32;between&#32;`0`&#32;and&#32;`upper`-1.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01221"/>01221 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l01222"/><link linkend="_classrandom__t_1a1333938e6448e31ea379d246a7f007cb">01222</link> &#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;<link linkend="_classrandom__t_1a1333938e6448e31ea379d246a7f007cb">distinct</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;T&#32;upper)&#32;{
<anchor xml:id="_testlib_8h_source_1l01223"/>01223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l01224"/>01224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::distinct&#32;expected&#32;size&#32;&gt;=&#32;0&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01225"/>01225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l01226"/>01226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::vector&lt;T&gt;();
<anchor xml:id="_testlib_8h_source_1l01227"/>01227 
<anchor xml:id="_testlib_8h_source_1l01228"/>01228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(upper&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l01229"/>01229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::distinct&#32;expected&#32;upper&#32;&gt;&#32;0&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01230"/>01230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&gt;&#32;upper)
<anchor xml:id="_testlib_8h_source_1l01231"/>01231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::distinct&#32;expected&#32;size&#32;&lt;=&#32;upper&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01232"/>01232 
<anchor xml:id="_testlib_8h_source_1l01233"/>01233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5">distinct</link>(size,&#32;T(0),&#32;upper&#32;-&#32;1);
<anchor xml:id="_testlib_8h_source_1l01234"/>01234 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01235"/>01235 
<anchor xml:id="_testlib_8h_source_1l01236"/>01236 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;(unsorted)&#32;partition&#32;which&#32;is&#32;a&#32;representation&#32;of&#32;sum&#32;as&#32;a&#32;sum&#32;of&#32;integers&#32;not&#32;less&#32;than&#32;min_part.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01237"/>01237 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l01238"/><link linkend="_classrandom__t_1a7aa0ff6ea67a8e4e8f13caa5ab74f445">01238</link> &#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;<link linkend="_classrandom__t_1a7aa0ff6ea67a8e4e8f13caa5ab74f445">partition</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;T&#32;sum,&#32;T&#32;min_part)&#32;{
<anchor xml:id="_testlib_8h_source_1l01239"/>01239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l01240"/>01240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::partition:&#32;size&#32;&lt;&#32;0&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01241"/>01241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;0&#32;&amp;&amp;&#32;sum&#32;!=&#32;0)
<anchor xml:id="_testlib_8h_source_1l01242"/>01242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::partition:&#32;size&#32;==&#32;0&#32;&amp;&amp;&#32;sum&#32;!=&#32;0&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01243"/>01243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(min_part&#32;*&#32;size&#32;&gt;&#32;sum)
<anchor xml:id="_testlib_8h_source_1l01244"/>01244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::partition:&#32;min_part&#32;*&#32;size&#32;&gt;&#32;sum&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01245"/>01245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;0&#32;&amp;&amp;&#32;sum&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l01246"/>01246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::vector&lt;T&gt;();
<anchor xml:id="_testlib_8h_source_1l01247"/>01247 
<anchor xml:id="_testlib_8h_source_1l01248"/>01248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;sum_&#32;=&#32;sum;
<anchor xml:id="_testlib_8h_source_1l01249"/>01249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;-=&#32;min_part&#32;*&#32;size;
<anchor xml:id="_testlib_8h_source_1l01250"/>01250 
<anchor xml:id="_testlib_8h_source_1l01251"/>01251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;septums(size);
<anchor xml:id="_testlib_8h_source_1l01252"/>01252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;d&#32;=&#32;<link linkend="_classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5">distinct</link>(size&#32;-&#32;1,&#32;T(1),&#32;T(sum&#32;+&#32;size&#32;-&#32;1));
<anchor xml:id="_testlib_8h_source_1l01253"/>01253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;+&#32;1&#32;&lt;&#32;size;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01254"/>01254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;septums[i&#32;+&#32;1]&#32;=&#32;d[i];
<anchor xml:id="_testlib_8h_source_1l01255"/>01255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sort(septums.begin(),&#32;septums.end());
<anchor xml:id="_testlib_8h_source_1l01256"/>01256 
<anchor xml:id="_testlib_8h_source_1l01257"/>01257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;result(size);
<anchor xml:id="_testlib_8h_source_1l01258"/>01258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;+&#32;1&#32;&lt;&#32;size;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01259"/>01259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[i]&#32;=&#32;septums[i&#32;+&#32;1]&#32;-&#32;septums[i]&#32;-&#32;1;
<anchor xml:id="_testlib_8h_source_1l01260"/>01260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[size&#32;-&#32;1]&#32;=&#32;sum&#32;+&#32;size&#32;-&#32;1&#32;-&#32;septums.back();
<anchor xml:id="_testlib_8h_source_1l01261"/>01261 
<anchor xml:id="_testlib_8h_source_1l01262"/>01262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;result.size();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01263"/>01263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[i]&#32;+=&#32;min_part;
<anchor xml:id="_testlib_8h_source_1l01264"/>01264 
<anchor xml:id="_testlib_8h_source_1l01265"/>01265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;result_sum&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01266"/>01266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;result.size();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01267"/>01267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result_sum&#32;+=&#32;result[i];
<anchor xml:id="_testlib_8h_source_1l01268"/>01268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result_sum&#32;!=&#32;sum_)
<anchor xml:id="_testlib_8h_source_1l01269"/>01269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::partition:&#32;partition&#32;sum&#32;is&#32;expected&#32;to&#32;be&#32;the&#32;given&#32;sum&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01270"/>01270 
<anchor xml:id="_testlib_8h_source_1l01271"/>01271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*std::min_element(result.begin(),&#32;result.end())&#32;&lt;&#32;min_part)
<anchor xml:id="_testlib_8h_source_1l01272"/>01272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::partition:&#32;partition&#32;min&#32;is&#32;expected&#32;to&#32;be&#32;no&#32;less&#32;than&#32;the&#32;given&#32;min_part&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01273"/>01273 
<anchor xml:id="_testlib_8h_source_1l01274"/>01274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>(result.size())&#32;!=&#32;size&#32;||&#32;result.size()&#32;!=&#32;(<emphasis role="keywordtype">size_t</emphasis>)&#32;size)
<anchor xml:id="_testlib_8h_source_1l01275"/>01275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;random_t::partition:&#32;partition&#32;size&#32;is&#32;expected&#32;to&#32;be&#32;equal&#32;to&#32;the&#32;given&#32;size&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01276"/>01276 
<anchor xml:id="_testlib_8h_source_1l01277"/>01277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l01278"/>01278 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01279"/>01279 
<anchor xml:id="_testlib_8h_source_1l01280"/>01280 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;random&#32;(unsorted)&#32;partition&#32;which&#32;is&#32;a&#32;representation&#32;of&#32;sum&#32;as&#32;a&#32;sum&#32;of&#32;positive&#32;integers.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01281"/>01281 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l01282"/><link linkend="_classrandom__t_1a2a9ceb1c9f011f481d967f162f16d53a">01282</link> &#32;&#32;&#32;&#32;std::vector&lt;T&gt;&#32;<link linkend="_classrandom__t_1a2a9ceb1c9f011f481d967f162f16d53a">partition</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;T&#32;sum)&#32;{
<anchor xml:id="_testlib_8h_source_1l01283"/>01283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classrandom__t_1a7aa0ff6ea67a8e4e8f13caa5ab74f445">partition</link>(size,&#32;sum,&#32;T(1));
<anchor xml:id="_testlib_8h_source_1l01284"/>01284 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01285"/>01285 };
<anchor xml:id="_testlib_8h_source_1l01286"/>01286 
<anchor xml:id="_testlib_8h_source_1l01287"/>01287 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;random_t::lim&#32;=&#32;25;
<anchor xml:id="_testlib_8h_source_1l01288"/>01288 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;random_t::multiplier&#32;=&#32;0x5DEECE66DLL;
<anchor xml:id="_testlib_8h_source_1l01289"/>01289 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;random_t::addend&#32;=&#32;0xBLL;
<anchor xml:id="_testlib_8h_source_1l01290"/>01290 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;random_t::mask&#32;=&#32;(1LL&#32;&lt;&lt;&#32;48)&#32;-&#32;1;
<anchor xml:id="_testlib_8h_source_1l01291"/>01291 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868">random_t::version</link>&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l01292"/>01292 
<anchor xml:id="_testlib_8h_source_1l01293"/>01293 <emphasis role="comment">/*&#32;Pattern&#32;implementation&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01294"/><link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">01294</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">pattern::matches</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l01295"/>01295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">matches</link>(s,&#32;0);
<anchor xml:id="_testlib_8h_source_1l01296"/>01296 }
<anchor xml:id="_testlib_8h_source_1l01297"/>01297 
<anchor xml:id="_testlib_8h_source_1l01298"/>01298 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__pattern_isSlash(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos)&#32;{
<anchor xml:id="_testlib_8h_source_1l01299"/>01299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s[pos]&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01300"/>01300 }
<anchor xml:id="_testlib_8h_source_1l01301"/>01301 
<anchor xml:id="_testlib_8h_source_1l01302"/>01302 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l01303"/>01303 __attribute__((pure))
<anchor xml:id="_testlib_8h_source_1l01304"/>01304 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l01305"/>01305 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__pattern_isCommandChar(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos,&#32;<emphasis role="keywordtype">char</emphasis>&#32;value)&#32;{
<anchor xml:id="_testlib_8h_source_1l01306"/>01306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&gt;=&#32;s.length())
<anchor xml:id="_testlib_8h_source_1l01307"/>01307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01308"/>01308 
<anchor xml:id="_testlib_8h_source_1l01309"/>01309 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;slashes&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01310"/>01310 
<anchor xml:id="_testlib_8h_source_1l01311"/>01311 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;before&#32;=&#32;int(pos)&#32;-&#32;1;
<anchor xml:id="_testlib_8h_source_1l01312"/>01312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(before&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;s[before]&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l01313"/>01313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;before--,&#32;slashes++;
<anchor xml:id="_testlib_8h_source_1l01314"/>01314 
<anchor xml:id="_testlib_8h_source_1l01315"/>01315 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slashes&#32;%&#32;2&#32;==&#32;0&#32;&amp;&amp;&#32;s[pos]&#32;==&#32;value;
<anchor xml:id="_testlib_8h_source_1l01316"/>01316 }
<anchor xml:id="_testlib_8h_source_1l01317"/>01317 
<anchor xml:id="_testlib_8h_source_1l01318"/>01318 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__pattern_getChar(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&amp;pos)&#32;{
<anchor xml:id="_testlib_8h_source_1l01319"/>01319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isSlash(s,&#32;pos))
<anchor xml:id="_testlib_8h_source_1l01320"/>01320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;2;
<anchor xml:id="_testlib_8h_source_1l01321"/>01321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01322"/>01322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01323"/>01323 
<anchor xml:id="_testlib_8h_source_1l01324"/>01324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s[pos&#32;-&#32;1];
<anchor xml:id="_testlib_8h_source_1l01325"/>01325 }
<anchor xml:id="_testlib_8h_source_1l01326"/>01326 
<anchor xml:id="_testlib_8h_source_1l01327"/>01327 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l01328"/>01328 __attribute__((pure))
<anchor xml:id="_testlib_8h_source_1l01329"/>01329 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l01330"/>01330 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__pattern_greedyMatch(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;char&gt;&#32;chars)&#32;{
<anchor xml:id="_testlib_8h_source_1l01331"/>01331 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01332"/>01332 
<anchor xml:id="_testlib_8h_source_1l01333"/>01333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos&#32;&lt;&#32;s.length())&#32;{
<anchor xml:id="_testlib_8h_source_1l01334"/>01334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;s[pos++];
<anchor xml:id="_testlib_8h_source_1l01335"/>01335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::binary_search(chars.begin(),&#32;chars.end(),&#32;c))
<anchor xml:id="_testlib_8h_source_1l01336"/>01336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01337"/>01337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01338"/>01338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result++;
<anchor xml:id="_testlib_8h_source_1l01339"/>01339 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01340"/>01340 
<anchor xml:id="_testlib_8h_source_1l01341"/>01341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l01342"/>01342 }
<anchor xml:id="_testlib_8h_source_1l01343"/>01343 
<anchor xml:id="_testlib_8h_source_1l01344"/><link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">01344</link> std::string&#32;<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">pattern::src</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l01345"/>01345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
<anchor xml:id="_testlib_8h_source_1l01346"/>01346 }
<anchor xml:id="_testlib_8h_source_1l01347"/>01347 
<anchor xml:id="_testlib_8h_source_1l01348"/>01348 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">pattern::matches</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l01349"/>01349 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_testlib_8h_source_1l01350"/>01350 
<anchor xml:id="_testlib_8h_source_1l01351"/>01351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(to&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l01352"/>01352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;__pattern_greedyMatch(s,&#32;pos,&#32;chars);
<anchor xml:id="_testlib_8h_source_1l01353"/>01353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;&#32;from)
<anchor xml:id="_testlib_8h_source_1l01354"/>01354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01355"/>01355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l01356"/>01356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;to;
<anchor xml:id="_testlib_8h_source_1l01357"/>01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;size;
<anchor xml:id="_testlib_8h_source_1l01358"/>01358 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01359"/>01359 
<anchor xml:id="_testlib_8h_source_1l01360"/>01360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(children.size()&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l01361"/>01361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;child&#32;=&#32;0;&#32;child&#32;&lt;&#32;children.size();&#32;child++)
<anchor xml:id="_testlib_8h_source_1l01362"/>01362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(children[child].<link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">matches</link>(s,&#32;pos))
<anchor xml:id="_testlib_8h_source_1l01363"/>01363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01364"/>01364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01365"/>01365 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01366"/>01366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos&#32;==&#32;s.length();
<anchor xml:id="_testlib_8h_source_1l01367"/>01367 }
<anchor xml:id="_testlib_8h_source_1l01368"/>01368 
<anchor xml:id="_testlib_8h_source_1l01369"/><link linkend="_classpattern_1afc240d1630f47a451af22aff8dbf073d">01369</link> std::string&#32;<link linkend="_classpattern_1afc240d1630f47a451af22aff8dbf073d">pattern::next</link>(<link linkend="_classrandom__t">random_t</link>&#32;&amp;<link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">rnd</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l01370"/>01370 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_testlib_8h_source_1l01371"/>01371 &#32;&#32;&#32;&#32;result.reserve(20);
<anchor xml:id="_testlib_8h_source_1l01372"/>01372 
<anchor xml:id="_testlib_8h_source_1l01373"/>01373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(to&#32;==&#32;INT_MAX)
<anchor xml:id="_testlib_8h_source_1l01374"/>01374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern::next(random_t&amp;&#32;rnd):&#32;can&apos;t&#32;process&#32;character&#32;&apos;*&apos;&#32;for&#32;generation&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01375"/>01375 
<anchor xml:id="_testlib_8h_source_1l01376"/>01376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(to&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l01377"/>01377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;<link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">rnd</link>.<link linkend="_classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6">next</link>(to&#32;-&#32;from&#32;+&#32;1)&#32;+&#32;from;
<anchor xml:id="_testlib_8h_source_1l01378"/>01378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01379"/>01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;chars[<link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">rnd</link>.<link linkend="_classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6">next</link>(<emphasis role="keywordtype">int</emphasis>(chars.size()))];
<anchor xml:id="_testlib_8h_source_1l01380"/>01380 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01381"/>01381 
<anchor xml:id="_testlib_8h_source_1l01382"/>01382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(children.size()&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l01383"/>01383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;child&#32;=&#32;<link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">rnd</link>.<link linkend="_classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6">next</link>(<emphasis role="keywordtype">int</emphasis>(children.size()));
<anchor xml:id="_testlib_8h_source_1l01384"/>01384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;children[child].next(<link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">rnd</link>);
<anchor xml:id="_testlib_8h_source_1l01385"/>01385 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01386"/>01386 
<anchor xml:id="_testlib_8h_source_1l01387"/>01387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l01388"/>01388 }
<anchor xml:id="_testlib_8h_source_1l01389"/>01389 
<anchor xml:id="_testlib_8h_source_1l01390"/>01390 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__pattern_scanCounts(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&amp;pos,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;from,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;to)&#32;{
<anchor xml:id="_testlib_8h_source_1l01391"/>01391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&gt;=&#32;s.length())&#32;{
<anchor xml:id="_testlib_8h_source_1l01392"/>01392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;from&#32;=&#32;to&#32;=&#32;1;
<anchor xml:id="_testlib_8h_source_1l01393"/>01393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01394"/>01394 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01395"/>01395 
<anchor xml:id="_testlib_8h_source_1l01396"/>01396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01397"/>01397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;parts;
<anchor xml:id="_testlib_8h_source_1l01398"/>01398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;part;
<anchor xml:id="_testlib_8h_source_1l01399"/>01399 
<anchor xml:id="_testlib_8h_source_1l01400"/>01400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01401"/>01401 
<anchor xml:id="_testlib_8h_source_1l01402"/>01402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos&#32;&lt;&#32;s.length()&#32;&amp;&amp;&#32;!__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01403"/>01403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>))
<anchor xml:id="_testlib_8h_source_1l01404"/>01404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parts.push_back(part),&#32;part&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01405"/>01405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01406"/>01406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;part&#32;+=&#32;__pattern_getChar(s,&#32;pos);
<anchor xml:id="_testlib_8h_source_1l01407"/>01407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01408"/>01408 
<anchor xml:id="_testlib_8h_source_1l01409"/>01409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(part&#32;!=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l01410"/>01410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parts.push_back(part);
<anchor xml:id="_testlib_8h_source_1l01411"/>01411 
<anchor xml:id="_testlib_8h_source_1l01412"/>01412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>))
<anchor xml:id="_testlib_8h_source_1l01413"/>01413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01414"/>01414 
<anchor xml:id="_testlib_8h_source_1l01415"/>01415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01416"/>01416 
<anchor xml:id="_testlib_8h_source_1l01417"/>01417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parts.size()&#32;&lt;&#32;1&#32;||&#32;parts.size()&#32;&gt;&#32;2)
<anchor xml:id="_testlib_8h_source_1l01418"/>01418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01419"/>01419 
<anchor xml:id="_testlib_8h_source_1l01420"/>01420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;numbers;
<anchor xml:id="_testlib_8h_source_1l01421"/>01421 
<anchor xml:id="_testlib_8h_source_1l01422"/>01422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;parts.size();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l01423"/>01423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parts[i].length()&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l01424"/>01424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01425"/>01425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;number;
<anchor xml:id="_testlib_8h_source_1l01426"/>01426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::sscanf(parts[i].c_str(),&#32;<emphasis role="stringliteral">&quot;%d&quot;</emphasis>,&#32;&amp;number)&#32;!=&#32;1)
<anchor xml:id="_testlib_8h_source_1l01427"/>01427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01428"/>01428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numbers.push_back(number);
<anchor xml:id="_testlib_8h_source_1l01429"/>01429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01430"/>01430 
<anchor xml:id="_testlib_8h_source_1l01431"/>01431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numbers.size()&#32;==&#32;1)
<anchor xml:id="_testlib_8h_source_1l01432"/>01432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;from&#32;=&#32;to&#32;=&#32;numbers[0];
<anchor xml:id="_testlib_8h_source_1l01433"/>01433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01434"/>01434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;from&#32;=&#32;numbers[0],&#32;to&#32;=&#32;numbers[1];
<anchor xml:id="_testlib_8h_source_1l01435"/>01435 
<anchor xml:id="_testlib_8h_source_1l01436"/>01436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(from&#32;&gt;&#32;to)
<anchor xml:id="_testlib_8h_source_1l01437"/>01437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01438"/>01438 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01439"/>01439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01440"/>01440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;from&#32;=&#32;0,&#32;to&#32;=&#32;1,&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01441"/>01441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01442"/>01442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01443"/>01443 
<anchor xml:id="_testlib_8h_source_1l01444"/>01444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01445"/>01445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;from&#32;=&#32;0,&#32;to&#32;=&#32;INT_MAX,&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01446"/>01446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01447"/>01447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01448"/>01448 
<anchor xml:id="_testlib_8h_source_1l01449"/>01449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01450"/>01450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;from&#32;=&#32;1,&#32;to&#32;=&#32;INT_MAX,&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01451"/>01451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01452"/>01452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01453"/>01453 
<anchor xml:id="_testlib_8h_source_1l01454"/>01454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;from&#32;=&#32;to&#32;=&#32;1;
<anchor xml:id="_testlib_8h_source_1l01455"/>01455 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01456"/>01456 }
<anchor xml:id="_testlib_8h_source_1l01457"/>01457 
<anchor xml:id="_testlib_8h_source_1l01458"/>01458 <emphasis role="keyword">static</emphasis>&#32;std::vector&lt;char&gt;&#32;__pattern_scanCharSet(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&amp;pos)&#32;{
<anchor xml:id="_testlib_8h_source_1l01459"/>01459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&gt;=&#32;s.length())
<anchor xml:id="_testlib_8h_source_1l01460"/>01460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01461"/>01461 
<anchor xml:id="_testlib_8h_source_1l01462"/>01462 &#32;&#32;&#32;&#32;std::vector&lt;char&gt;&#32;result;
<anchor xml:id="_testlib_8h_source_1l01463"/>01463 
<anchor xml:id="_testlib_8h_source_1l01464"/>01464 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01465"/>01465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01466"/>01466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;negative&#32;=&#32;__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;^&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01467"/>01467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(negative)
<anchor xml:id="_testlib_8h_source_1l01468"/>01468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01469"/>01469 
<anchor xml:id="_testlib_8h_source_1l01470"/>01470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;prev&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01471"/>01471 
<anchor xml:id="_testlib_8h_source_1l01472"/>01472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos&#32;&lt;&#32;s.length()&#32;&amp;&amp;&#32;!__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01473"/>01473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;&amp;&amp;&#32;prev&#32;!=&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l01474"/>01474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01475"/>01475 
<anchor xml:id="_testlib_8h_source_1l01476"/>01476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;+&#32;1&#32;==&#32;s.length()&#32;||&#32;__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01477"/>01477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(prev);
<anchor xml:id="_testlib_8h_source_1l01478"/>01478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01479"/>01479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01480"/>01480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01481"/>01481 
<anchor xml:id="_testlib_8h_source_1l01482"/>01482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;next&#32;=&#32;__pattern_getChar(s,&#32;pos);
<anchor xml:id="_testlib_8h_source_1l01483"/>01483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;&gt;&#32;next)
<anchor xml:id="_testlib_8h_source_1l01484"/>01484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01485"/>01485 
<anchor xml:id="_testlib_8h_source_1l01486"/>01486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;prev;&#32;c&#32;!=&#32;next;&#32;c++)
<anchor xml:id="_testlib_8h_source_1l01487"/>01487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(c);
<anchor xml:id="_testlib_8h_source_1l01488"/>01488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(next);
<anchor xml:id="_testlib_8h_source_1l01489"/>01489 
<anchor xml:id="_testlib_8h_source_1l01490"/>01490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01491"/>01491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01492"/>01492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;!=&#32;0)
<anchor xml:id="_testlib_8h_source_1l01493"/>01493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(prev);
<anchor xml:id="_testlib_8h_source_1l01494"/>01494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;__pattern_getChar(s,&#32;pos);
<anchor xml:id="_testlib_8h_source_1l01495"/>01495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01496"/>01496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01497"/>01497 
<anchor xml:id="_testlib_8h_source_1l01498"/>01498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;!=&#32;0)
<anchor xml:id="_testlib_8h_source_1l01499"/>01499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(prev);
<anchor xml:id="_testlib_8h_source_1l01500"/>01500 
<anchor xml:id="_testlib_8h_source_1l01501"/>01501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__pattern_isCommandChar(s,&#32;pos,&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>))
<anchor xml:id="_testlib_8h_source_1l01502"/>01502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01503"/>01503 
<anchor xml:id="_testlib_8h_source_1l01504"/>01504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01505"/>01505 
<anchor xml:id="_testlib_8h_source_1l01506"/>01506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(negative)&#32;{
<anchor xml:id="_testlib_8h_source_1l01507"/>01507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(result.begin(),&#32;result.end());
<anchor xml:id="_testlib_8h_source_1l01508"/>01508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;char&gt;&#32;actuals;
<anchor xml:id="_testlib_8h_source_1l01509"/>01509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;code&#32;=&#32;0;&#32;code&#32;&lt;&#32;255;&#32;code++)&#32;{
<anchor xml:id="_testlib_8h_source_1l01510"/>01510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;char(code);
<anchor xml:id="_testlib_8h_source_1l01511"/>01511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::binary_search(result.begin(),&#32;result.end(),&#32;c))
<anchor xml:id="_testlib_8h_source_1l01512"/>01512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actuals.push_back(c);
<anchor xml:id="_testlib_8h_source_1l01513"/>01513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01514"/>01514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;actuals;
<anchor xml:id="_testlib_8h_source_1l01515"/>01515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01516"/>01516 
<anchor xml:id="_testlib_8h_source_1l01517"/>01517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(result.begin(),&#32;result.end());
<anchor xml:id="_testlib_8h_source_1l01518"/>01518 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01519"/>01519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(__pattern_getChar(s,&#32;pos));
<anchor xml:id="_testlib_8h_source_1l01520"/>01520 
<anchor xml:id="_testlib_8h_source_1l01521"/>01521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l01522"/>01522 }
<anchor xml:id="_testlib_8h_source_1l01523"/>01523 
<anchor xml:id="_testlib_8h_source_1l01524"/><link linkend="_classpattern_1a40258f871a5d68827191054e3e845ccf">01524</link> <link linkend="_classpattern_1a40258f871a5d68827191054e3e845ccf">pattern::pattern</link>(std::string&#32;s)&#32;:&#32;s(s),&#32;from(0),&#32;to(0)&#32;{
<anchor xml:id="_testlib_8h_source_1l01525"/>01525 &#32;&#32;&#32;&#32;std::string&#32;t;
<anchor xml:id="_testlib_8h_source_1l01526"/>01526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l01527"/>01527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__pattern_isCommandChar(s,&#32;i,&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>))
<anchor xml:id="_testlib_8h_source_1l01528"/>01528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l01529"/>01529 &#32;&#32;&#32;&#32;s&#32;=&#32;t;
<anchor xml:id="_testlib_8h_source_1l01530"/>01530 
<anchor xml:id="_testlib_8h_source_1l01531"/>01531 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;opened&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01532"/>01532 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;firstClose&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l01533"/>01533 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;seps;
<anchor xml:id="_testlib_8h_source_1l01534"/>01534 
<anchor xml:id="_testlib_8h_source_1l01535"/>01535 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l01536"/>01536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;i,&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01537"/>01537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opened++;
<anchor xml:id="_testlib_8h_source_1l01538"/>01538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01539"/>01539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01540"/>01540 
<anchor xml:id="_testlib_8h_source_1l01541"/>01541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;i,&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01542"/>01542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opened--;
<anchor xml:id="_testlib_8h_source_1l01543"/>01543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opened&#32;==&#32;0&#32;&amp;&amp;&#32;firstClose&#32;==&#32;-1)
<anchor xml:id="_testlib_8h_source_1l01544"/>01544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstClose&#32;=&#32;int(i);
<anchor xml:id="_testlib_8h_source_1l01545"/>01545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01546"/>01546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01547"/>01547 
<anchor xml:id="_testlib_8h_source_1l01548"/>01548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opened&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l01549"/>01549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01550"/>01550 
<anchor xml:id="_testlib_8h_source_1l01551"/>01551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pattern_isCommandChar(s,&#32;i,&#32;<emphasis role="charliteral">&apos;|&apos;</emphasis>)&#32;&amp;&amp;&#32;opened&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l01552"/>01552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seps.push_back(<emphasis role="keywordtype">int</emphasis>(i));
<anchor xml:id="_testlib_8h_source_1l01553"/>01553 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01554"/>01554 
<anchor xml:id="_testlib_8h_source_1l01555"/>01555 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opened&#32;!=&#32;0)
<anchor xml:id="_testlib_8h_source_1l01556"/>01556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;pattern:&#32;Illegal&#32;pattern&#32;(or&#32;part)&#32;\&quot;&quot;</emphasis>&#32;+&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01557"/>01557 
<anchor xml:id="_testlib_8h_source_1l01558"/>01558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seps.size()&#32;==&#32;0&#32;&amp;&amp;&#32;firstClose&#32;+&#32;1&#32;==&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;s.length()
<anchor xml:id="_testlib_8h_source_1l01559"/>01559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__pattern_isCommandChar(s,&#32;0,&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>)&#32;&amp;&amp;&#32;__pattern_isCommandChar(s,&#32;s.length()&#32;-&#32;1,&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>))&#32;{
<anchor xml:id="_testlib_8h_source_1l01560"/>01560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;children.push_back(<link linkend="_classpattern_1a40258f871a5d68827191054e3e845ccf">pattern</link>(s.substr(1,&#32;s.length()&#32;-&#32;2)));
<anchor xml:id="_testlib_8h_source_1l01561"/>01561 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01562"/>01562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seps.size()&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l01563"/>01563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seps.push_back(<emphasis role="keywordtype">int</emphasis>(s.length()));
<anchor xml:id="_testlib_8h_source_1l01564"/>01564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;last&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01565"/>01565 
<anchor xml:id="_testlib_8h_source_1l01566"/>01566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;seps.size();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l01567"/>01567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;children.push_back(<link linkend="_classpattern_1a40258f871a5d68827191054e3e845ccf">pattern</link>(s.substr(last,&#32;seps[i]&#32;-&#32;last)));
<anchor xml:id="_testlib_8h_source_1l01568"/>01568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last&#32;=&#32;seps[i]&#32;+&#32;1;
<anchor xml:id="_testlib_8h_source_1l01569"/>01569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01570"/>01570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01571"/>01571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01572"/>01572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chars&#32;=&#32;__pattern_scanCharSet(s,&#32;pos);
<anchor xml:id="_testlib_8h_source_1l01573"/>01573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pattern_scanCounts(s,&#32;pos,&#32;from,&#32;to);
<anchor xml:id="_testlib_8h_source_1l01574"/>01574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&lt;&#32;s.length())
<anchor xml:id="_testlib_8h_source_1l01575"/>01575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;children.push_back(<link linkend="_classpattern_1a40258f871a5d68827191054e3e845ccf">pattern</link>(s.substr(pos)));
<anchor xml:id="_testlib_8h_source_1l01576"/>01576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01577"/>01577 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01578"/>01578 }
<anchor xml:id="_testlib_8h_source_1l01579"/>01579 
<anchor xml:id="_testlib_8h_source_1l01580"/>01580 <emphasis role="comment">/*&#32;End&#32;of&#32;pattern&#32;implementation&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01581"/>01581 
<anchor xml:id="_testlib_8h_source_1l01582"/>01582 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;C&gt;
<anchor xml:id="_testlib_8h_source_1l01583"/><link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">01583</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>(C&#32;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l01584"/>01584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>;
<anchor xml:id="_testlib_8h_source_1l01585"/>01585 }
<anchor xml:id="_testlib_8h_source_1l01586"/>01586 
<anchor xml:id="_testlib_8h_source_1l01587"/>01587 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;C&gt;
<anchor xml:id="_testlib_8h_source_1l01588"/><link linkend="_testlib_8h_1a8da048ae3bc25fe4bb2dcfceb53a90fc">01588</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_testlib_8h_1a8da048ae3bc25fe4bb2dcfceb53a90fc">isEoln</link>(C&#32;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l01589"/>01589 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>&#32;||&#32;c&#32;==&#32;<link linkend="_testlib_8h_1a876ce77f3c672c7162658151e648389e">CR</link>);
<anchor xml:id="_testlib_8h_source_1l01590"/>01590 }
<anchor xml:id="_testlib_8h_source_1l01591"/>01591 
<anchor xml:id="_testlib_8h_source_1l01592"/>01592 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;C&gt;
<anchor xml:id="_testlib_8h_source_1l01593"/><link linkend="_testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c">01593</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c">isBlanks</link>(C&#32;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l01594"/>01594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>&#32;||&#32;c&#32;==&#32;<link linkend="_testlib_8h_1a876ce77f3c672c7162658151e648389e">CR</link>&#32;||&#32;c&#32;==&#32;<link linkend="_testlib_8h_1a5ff6e798033f03e74730e99f01936f84">SPACE</link>&#32;||&#32;c&#32;==&#32;<link linkend="_testlib_8h_1ad58a1fbfc85c7e4790fc55e654f50221">TAB</link>);
<anchor xml:id="_testlib_8h_source_1l01595"/>01595 }
<anchor xml:id="_testlib_8h_source_1l01596"/>01596 
<anchor xml:id="_testlib_8h_source_1l01597"/><link linkend="_testlib_8h_1a1a32c4d3bd87256731e67936766c65ca">01597</link> <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_testlib_8h_1a1a32c4d3bd87256731e67936766c65ca">trim</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l01598"/>01598 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s.empty())
<anchor xml:id="_testlib_8h_source_1l01599"/>01599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
<anchor xml:id="_testlib_8h_source_1l01600"/>01600 
<anchor xml:id="_testlib_8h_source_1l01601"/>01601 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;left&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01602"/>01602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(left&#32;&lt;&#32;<emphasis role="keywordtype">int</emphasis>(s.length())&#32;&amp;&amp;&#32;<link linkend="_testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c">isBlanks</link>(s[left]))
<anchor xml:id="_testlib_8h_source_1l01603"/>01603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;left++;
<anchor xml:id="_testlib_8h_source_1l01604"/>01604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(left&#32;&gt;=&#32;<emphasis role="keywordtype">int</emphasis>(s.length()))
<anchor xml:id="_testlib_8h_source_1l01605"/>01605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01606"/>01606 
<anchor xml:id="_testlib_8h_source_1l01607"/>01607 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;right&#32;=&#32;int(s.length())&#32;-&#32;1;
<anchor xml:id="_testlib_8h_source_1l01608"/>01608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(right&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;<link linkend="_testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c">isBlanks</link>(s[right]))
<anchor xml:id="_testlib_8h_source_1l01609"/>01609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;right--;
<anchor xml:id="_testlib_8h_source_1l01610"/>01610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(right&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l01611"/>01611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01612"/>01612 
<anchor xml:id="_testlib_8h_source_1l01613"/>01613 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s.substr(left,&#32;right&#32;-&#32;left&#32;+&#32;1);
<anchor xml:id="_testlib_8h_source_1l01614"/>01614 }
<anchor xml:id="_testlib_8h_source_1l01615"/>01615 
<anchor xml:id="_testlib_8h_source_1l01616"/><link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddb">01616</link> <emphasis role="keyword">enum</emphasis>&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddb">TMode</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l01617"/><link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">01617</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">_input</link>,&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6">_output</link>,&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61">_answer</link>
<anchor xml:id="_testlib_8h_source_1l01618"/><link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61">01618</link> };
<anchor xml:id="_testlib_8h_source_1l01619"/>01619 
<anchor xml:id="_testlib_8h_source_1l01620"/>01620 <emphasis role="comment">/*&#32;Outcomes&#32;6-15&#32;are&#32;reserved&#32;for&#32;future&#32;use.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01621"/><link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">01621</link> <emphasis role="keyword">enum</emphasis>&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l01622"/><link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77">01622</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77">_ok</link>&#32;=&#32;0,
<anchor xml:id="_testlib_8h_source_1l01623"/><link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">01623</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>&#32;=&#32;1,
<anchor xml:id="_testlib_8h_source_1l01624"/><link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">01624</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>&#32;=&#32;2,
<anchor xml:id="_testlib_8h_source_1l01625"/><link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">01625</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>&#32;=&#32;3,
<anchor xml:id="_testlib_8h_source_1l01626"/><link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43">01626</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43">_dirt</link>&#32;=&#32;4,
<anchor xml:id="_testlib_8h_source_1l01627"/><link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">01627</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">_points</link>&#32;=&#32;5,
<anchor xml:id="_testlib_8h_source_1l01628"/><link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">01628</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>&#32;=&#32;8,
<anchor xml:id="_testlib_8h_source_1l01629"/>01629 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece">_partially</link>&#32;=&#32;16
<anchor xml:id="_testlib_8h_source_1l01630"/><link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece">01630</link> };
<anchor xml:id="_testlib_8h_source_1l01631"/>01631 
<anchor xml:id="_testlib_8h_source_1l01632"/><link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158f">01632</link> <emphasis role="keyword">enum</emphasis>&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158f">TTestlibMode</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l01633"/><link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fad23f42b9c6d23ab5679d79151c4585ff">01633</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fa344a85f02f1ac239f9f648738a856eb6">_unknown</link>,&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fad23f42b9c6d23ab5679d79151c4585ff">_checker</link>,&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f">_validator</link>,&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fa5311ad9bde7f5dbdc28c1f8264456fd5">_generator</link>,&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fadaea9b0ac8f600ff71b0f7616869deac">_interactor</link>,&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa">_scorer</link>
<anchor xml:id="_testlib_8h_source_1l01634"/><link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa">01634</link> };
<anchor xml:id="_testlib_8h_source_1l01635"/>01635 
<anchor xml:id="_testlib_8h_source_1l01636"/><link linkend="_testlib_8h_1a1e8859af5c334b6c4bebb434505b9ae4">01636</link> <emphasis role="preprocessor">#define&#32;_pc(exitCode)&#32;(TResult(_partially&#32;+&#32;(exitCode)))</emphasis>
<anchor xml:id="_testlib_8h_source_1l01637"/>01637 
<anchor xml:id="_testlib_8h_source_1l01638"/>01638 <emphasis role="comment">/*&#32;Outcomes&#32;6-15&#32;are&#32;reserved&#32;for&#32;future&#32;use.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01639"/><link linkend="_testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59">01639</link> <emphasis role="keyword">const</emphasis>&#32;std::string&#32;<link linkend="_testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59">outcomes</link>[]&#32;=&#32;{
<anchor xml:id="_testlib_8h_source_1l01640"/>01640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;accepted&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01641"/>01641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrong-answer&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01642"/>01642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;presentation-error&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01643"/>01643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;fail&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01644"/>01644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;fail&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01645"/>01645 <emphasis role="preprocessor">#ifndef&#32;PCMS2</emphasis>
<anchor xml:id="_testlib_8h_source_1l01646"/>01646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;points&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01647"/>01647 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01648"/>01648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;relative-scoring&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01649"/>01649 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l01650"/>01650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reserved&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01651"/>01651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reserved&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01652"/>01652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;unexpected-eof&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01653"/>01653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reserved&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01654"/>01654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reserved&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01655"/>01655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reserved&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01656"/>01656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reserved&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01657"/>01657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reserved&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01658"/>01658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reserved&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01659"/>01659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reserved&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l01660"/>01660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;partially-correct&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l01661"/>01661 };
<anchor xml:id="_testlib_8h_source_1l01662"/>01662 
<anchor xml:id="_testlib_8h_source_1l01663"/><link linkend="_class_input_stream_reader">01663</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_input_stream_reader">InputStreamReader</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l01664"/>01664 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_testlib_8h_source_1l01665"/><link linkend="_class_input_stream_reader_1a06ef5f907b494fa52a75b2644dea6d7b">01665</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_input_stream_reader_1a06ef5f907b494fa52a75b2644dea6d7b">setTestCase</link>(<emphasis role="keywordtype">int</emphasis>&#32;testCase)&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01666"/>01666 
<anchor xml:id="_testlib_8h_source_1l01667"/><link linkend="_class_input_stream_reader_1a382091a8b54e0f77ae1d2e59bfa34814">01667</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::vector&lt;int&gt;&#32;<link linkend="_class_input_stream_reader_1a382091a8b54e0f77ae1d2e59bfa34814">getReadChars</link>()&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01668"/>01668 &#32;&#32;&#32;&#32;
<anchor xml:id="_testlib_8h_source_1l01669"/><link linkend="_class_input_stream_reader_1a80448788833a59a503853b4a45a96137">01669</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_input_stream_reader_1a80448788833a59a503853b4a45a96137">curChar</link>()&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01670"/>01670 
<anchor xml:id="_testlib_8h_source_1l01671"/><link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">01671</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>()&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01672"/>01672 
<anchor xml:id="_testlib_8h_source_1l01673"/><link linkend="_class_input_stream_reader_1ad01b8b4dd307c70472afb7dae417401a">01673</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_input_stream_reader_1ad01b8b4dd307c70472afb7dae417401a">skipChar</link>()&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01674"/>01674 
<anchor xml:id="_testlib_8h_source_1l01675"/><link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">01675</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(<emphasis role="keywordtype">int</emphasis>&#32;c)&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01676"/>01676 
<anchor xml:id="_testlib_8h_source_1l01677"/><link linkend="_class_input_stream_reader_1a583d351a74f37fdabfe2e262e35760a7">01677</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::string&#32;<link linkend="_class_input_stream_reader_1a583d351a74f37fdabfe2e262e35760a7">getName</link>()&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01678"/>01678 
<anchor xml:id="_testlib_8h_source_1l01679"/><link linkend="_class_input_stream_reader_1a90d0f46a473a2ff2f6224614b7af0ab3">01679</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_input_stream_reader_1a90d0f46a473a2ff2f6224614b7af0ab3">eof</link>()&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01680"/>01680 
<anchor xml:id="_testlib_8h_source_1l01681"/><link linkend="_class_input_stream_reader_1aa145a0fcdb6b0a73cc3b91b22e5183cb">01681</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_input_stream_reader_1aa145a0fcdb6b0a73cc3b91b22e5183cb">close</link>()&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01682"/>01682 
<anchor xml:id="_testlib_8h_source_1l01683"/><link linkend="_class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881">01683</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881">getLine</link>()&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01684"/>01684 
<anchor xml:id="_testlib_8h_source_1l01685"/>01685 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class_input_stream_reader_1a9df7ac536f2c9367abb461d203099a4d">~InputStreamReader</link>()&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l01686"/>01686 };
<anchor xml:id="_testlib_8h_source_1l01687"/>01687 
<anchor xml:id="_testlib_8h_source_1l01688"/><link linkend="_class_input_stream_reader_1a9df7ac536f2c9367abb461d203099a4d">01688</link> <link linkend="_class_input_stream_reader_1a9df7ac536f2c9367abb461d203099a4d">InputStreamReader::~InputStreamReader</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01689"/>01689 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;operations.</emphasis>
<anchor xml:id="_testlib_8h_source_1l01690"/>01690 }
<anchor xml:id="_testlib_8h_source_1l01691"/>01691 
<anchor xml:id="_testlib_8h_source_1l01692"/><link linkend="_class_string_input_stream_reader">01692</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_string_input_stream_reader">StringInputStreamReader</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_input_stream_reader">InputStreamReader</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l01693"/>01693 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l01694"/>01694 &#32;&#32;&#32;&#32;std::string&#32;s;
<anchor xml:id="_testlib_8h_source_1l01695"/>01695 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos;
<anchor xml:id="_testlib_8h_source_1l01696"/>01696 
<anchor xml:id="_testlib_8h_source_1l01697"/>01697 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_testlib_8h_source_1l01698"/><link linkend="_class_string_input_stream_reader_1a1282a084cf2b5894390e20fac07068ff">01698</link> &#32;&#32;&#32;&#32;<link linkend="_class_string_input_stream_reader_1a1282a084cf2b5894390e20fac07068ff">StringInputStreamReader</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;content)&#32;:&#32;s(content),&#32;pos(0)&#32;{
<anchor xml:id="_testlib_8h_source_1l01699"/>01699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;operations.</emphasis>
<anchor xml:id="_testlib_8h_source_1l01700"/>01700 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01701"/>01701 
<anchor xml:id="_testlib_8h_source_1l01702"/><link linkend="_class_string_input_stream_reader_1af5b847200799d3549c883228103bd961">01702</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_string_input_stream_reader_1af5b847200799d3549c883228103bd961">setTestCase</link>(<emphasis role="keywordtype">int</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l01703"/>01703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;setTestCase&#32;not&#32;implemented&#32;in&#32;StringInputStreamReader&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01704"/>01704 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01705"/>01705 
<anchor xml:id="_testlib_8h_source_1l01706"/><link linkend="_class_string_input_stream_reader_1a104e77d9ed74af3095c70d207540b2d5">01706</link> &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;<link linkend="_class_string_input_stream_reader_1a104e77d9ed74af3095c70d207540b2d5">getReadChars</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01707"/>01707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;getReadChars&#32;not&#32;implemented&#32;in&#32;StringInputStreamReader&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01708"/>01708 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01709"/>01709 &#32;&#32;&#32;&#32;
<anchor xml:id="_testlib_8h_source_1l01710"/><link linkend="_class_string_input_stream_reader_1aa5cf9b35451b06d2b158d558e8d1bf01">01710</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_string_input_stream_reader_1aa5cf9b35451b06d2b158d558e8d1bf01">curChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01711"/>01711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&gt;=&#32;s.length())
<anchor xml:id="_testlib_8h_source_1l01712"/>01712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>;
<anchor xml:id="_testlib_8h_source_1l01713"/>01713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01714"/>01714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s[pos];
<anchor xml:id="_testlib_8h_source_1l01715"/>01715 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01716"/>01716 
<anchor xml:id="_testlib_8h_source_1l01717"/><link linkend="_class_string_input_stream_reader_1a554fbedcf4b908fd940299e753ff009d">01717</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_string_input_stream_reader_1a554fbedcf4b908fd940299e753ff009d">nextChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01718"/>01718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&gt;=&#32;s.length())&#32;{
<anchor xml:id="_testlib_8h_source_1l01719"/>01719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01720"/>01720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>;
<anchor xml:id="_testlib_8h_source_1l01721"/>01721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01722"/>01722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s[pos++];
<anchor xml:id="_testlib_8h_source_1l01723"/>01723 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01724"/>01724 
<anchor xml:id="_testlib_8h_source_1l01725"/><link linkend="_class_string_input_stream_reader_1a6d3d26f8ceb666e4017edd2e4239e30e">01725</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_string_input_stream_reader_1a6d3d26f8ceb666e4017edd2e4239e30e">skipChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01726"/>01726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l01727"/>01727 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01728"/>01728 
<anchor xml:id="_testlib_8h_source_1l01729"/><link linkend="_class_string_input_stream_reader_1a193b5942839c98ed3b79e8260858dd00">01729</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_string_input_stream_reader_1a193b5942839c98ed3b79e8260858dd00">unreadChar</link>(<emphasis role="keywordtype">int</emphasis>&#32;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l01730"/>01730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l01731"/>01731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;StringInputStreamReader::unreadChar(int):&#32;pos&#32;==&#32;0.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01732"/>01732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos--;
<anchor xml:id="_testlib_8h_source_1l01733"/>01733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&lt;&#32;s.length())
<anchor xml:id="_testlib_8h_source_1l01734"/>01734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s[pos]&#32;=&#32;char(c);
<anchor xml:id="_testlib_8h_source_1l01735"/>01735 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01736"/>01736 
<anchor xml:id="_testlib_8h_source_1l01737"/><link linkend="_class_string_input_stream_reader_1a874513b4124401f7874e524fc17b1aa6">01737</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_string_input_stream_reader_1a874513b4124401f7874e524fc17b1aa6">getName</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01738"/>01738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_part(s);
<anchor xml:id="_testlib_8h_source_1l01739"/>01739 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01740"/>01740 
<anchor xml:id="_testlib_8h_source_1l01741"/><link linkend="_class_string_input_stream_reader_1a50a1cc8ef204cb6c84430b4d99c41fa1">01741</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_string_input_stream_reader_1a50a1cc8ef204cb6c84430b4d99c41fa1">getLine</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01742"/>01742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_testlib_8h_source_1l01743"/>01743 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01744"/>01744 
<anchor xml:id="_testlib_8h_source_1l01745"/><link linkend="_class_string_input_stream_reader_1a130c48a7af5de77562a4ebea4d4299c5">01745</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_string_input_stream_reader_1a130c48a7af5de77562a4ebea4d4299c5">eof</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01746"/>01746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos&#32;&gt;=&#32;s.length();
<anchor xml:id="_testlib_8h_source_1l01747"/>01747 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01748"/>01748 
<anchor xml:id="_testlib_8h_source_1l01749"/><link linkend="_class_string_input_stream_reader_1a91362e7b8706d208cda988cf136fe4c4">01749</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_string_input_stream_reader_1a91362e7b8706d208cda988cf136fe4c4">close</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01750"/>01750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;operations.</emphasis>
<anchor xml:id="_testlib_8h_source_1l01751"/>01751 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01752"/>01752 };
<anchor xml:id="_testlib_8h_source_1l01753"/>01753 
<anchor xml:id="_testlib_8h_source_1l01754"/><link linkend="_class_file_input_stream_reader">01754</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_file_input_stream_reader">FileInputStreamReader</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_input_stream_reader">InputStreamReader</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l01755"/>01755 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l01756"/>01756 &#32;&#32;&#32;&#32;std::FILE&#32;*file;
<anchor xml:id="_testlib_8h_source_1l01757"/>01757 &#32;&#32;&#32;&#32;std::string&#32;name;
<anchor xml:id="_testlib_8h_source_1l01758"/>01758 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line;
<anchor xml:id="_testlib_8h_source_1l01759"/>01759 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;undoChars;
<anchor xml:id="_testlib_8h_source_1l01760"/>01760 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;readChars;
<anchor xml:id="_testlib_8h_source_1l01761"/>01761 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;undoReadChars;
<anchor xml:id="_testlib_8h_source_1l01762"/>01762 
<anchor xml:id="_testlib_8h_source_1l01763"/>01763 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;postprocessGetc(<emphasis role="keywordtype">int</emphasis>&#32;getcResult)&#32;{
<anchor xml:id="_testlib_8h_source_1l01764"/>01764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getcResult&#32;!=&#32;EOF)
<anchor xml:id="_testlib_8h_source_1l01765"/>01765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getcResult;
<anchor xml:id="_testlib_8h_source_1l01766"/>01766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01767"/>01767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>;
<anchor xml:id="_testlib_8h_source_1l01768"/>01768 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01769"/>01769 
<anchor xml:id="_testlib_8h_source_1l01770"/>01770 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;getc(FILE&#32;*file)&#32;{
<anchor xml:id="_testlib_8h_source_1l01771"/>01771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c;
<anchor xml:id="_testlib_8h_source_1l01772"/>01772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rc;
<anchor xml:id="_testlib_8h_source_1l01773"/>01773 
<anchor xml:id="_testlib_8h_source_1l01774"/>01774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(undoChars.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l01775"/>01775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;rc&#32;=&#32;::getc(file);
<anchor xml:id="_testlib_8h_source_1l01776"/>01776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01777"/>01777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;undoChars.back();
<anchor xml:id="_testlib_8h_source_1l01778"/>01778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;undoChars.pop_back();
<anchor xml:id="_testlib_8h_source_1l01779"/>01779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;undoReadChars.back();
<anchor xml:id="_testlib_8h_source_1l01780"/>01780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;undoReadChars.pop_back();
<anchor xml:id="_testlib_8h_source_1l01781"/>01781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01782"/>01782 
<anchor xml:id="_testlib_8h_source_1l01783"/>01783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>)
<anchor xml:id="_testlib_8h_source_1l01784"/>01784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line++;
<anchor xml:id="_testlib_8h_source_1l01785"/>01785 
<anchor xml:id="_testlib_8h_source_1l01786"/>01786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readChars.push_back(rc);
<anchor xml:id="_testlib_8h_source_1l01787"/>01787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="_testlib_8h_source_1l01788"/>01788 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01789"/>01789 
<anchor xml:id="_testlib_8h_source_1l01790"/>01790 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ungetc(<emphasis role="keywordtype">int</emphasis>&#32;c<emphasis role="comment">/*,&#32;FILE*&#32;file*/</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l01791"/>01791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!readChars.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l01792"/>01792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;undoReadChars.push_back(readChars.back());
<anchor xml:id="_testlib_8h_source_1l01793"/>01793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readChars.pop_back();
<anchor xml:id="_testlib_8h_source_1l01794"/>01794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01795"/>01795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>)
<anchor xml:id="_testlib_8h_source_1l01796"/>01796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line--;
<anchor xml:id="_testlib_8h_source_1l01797"/>01797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;undoChars.push_back(c);
<anchor xml:id="_testlib_8h_source_1l01798"/>01798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="_testlib_8h_source_1l01799"/>01799 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01800"/>01800 
<anchor xml:id="_testlib_8h_source_1l01801"/>01801 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_testlib_8h_source_1l01802"/><link linkend="_class_file_input_stream_reader_1a6dcc254451d2f6f0ee1a027c011de529">01802</link> &#32;&#32;&#32;&#32;<link linkend="_class_file_input_stream_reader_1a6dcc254451d2f6f0ee1a027c011de529">FileInputStreamReader</link>(std::FILE&#32;*file,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;name)&#32;:&#32;file(file),&#32;name(name),&#32;line(1)&#32;{
<anchor xml:id="_testlib_8h_source_1l01803"/>01803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;operations.</emphasis>
<anchor xml:id="_testlib_8h_source_1l01804"/>01804 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01805"/>01805 
<anchor xml:id="_testlib_8h_source_1l01806"/><link linkend="_class_file_input_stream_reader_1ae9cca5f0fb8c409348a3ef86561d9c1b">01806</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_input_stream_reader_1ae9cca5f0fb8c409348a3ef86561d9c1b">setTestCase</link>(<emphasis role="keywordtype">int</emphasis>&#32;testCase)&#32;{
<anchor xml:id="_testlib_8h_source_1l01807"/>01807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(testCase&#32;&lt;&#32;0&#32;||&#32;testCase&#32;&gt;&#32;<link linkend="_testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0">__TESTLIB_MAX_TEST_CASE</link>)
<anchor xml:id="_testlib_8h_source_1l01808"/>01808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;testCase&#32;expected&#32;fit&#32;in&#32;[1,%d],&#32;but&#32;%d&#32;doesn&apos;t&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0">__TESTLIB_MAX_TEST_CASE</link>,&#32;testCase));
<anchor xml:id="_testlib_8h_source_1l01809"/>01809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readChars.push_back(testCase&#32;+&#32;256);
<anchor xml:id="_testlib_8h_source_1l01810"/>01810 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01811"/>01811 
<anchor xml:id="_testlib_8h_source_1l01812"/><link linkend="_class_file_input_stream_reader_1ac14b525a2cda436c7442fd681e3f1bf4">01812</link> &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;<link linkend="_class_file_input_stream_reader_1ac14b525a2cda436c7442fd681e3f1bf4">getReadChars</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01813"/>01813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;readChars;
<anchor xml:id="_testlib_8h_source_1l01814"/>01814 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01815"/>01815 
<anchor xml:id="_testlib_8h_source_1l01816"/><link linkend="_class_file_input_stream_reader_1a5c7894d247d016ae7e2223f7ee1c2787">01816</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_file_input_stream_reader_1a5c7894d247d016ae7e2223f7ee1c2787">curChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01817"/>01817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(feof(file))
<anchor xml:id="_testlib_8h_source_1l01818"/>01818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>;
<anchor xml:id="_testlib_8h_source_1l01819"/>01819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01820"/>01820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;getc(file);
<anchor xml:id="_testlib_8h_source_1l01821"/>01821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ungetc(c<emphasis role="comment">/*,&#32;file*/</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01822"/>01822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;postprocessGetc(c);
<anchor xml:id="_testlib_8h_source_1l01823"/>01823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01824"/>01824 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01825"/>01825 
<anchor xml:id="_testlib_8h_source_1l01826"/><link linkend="_class_file_input_stream_reader_1af0ad18bf18442da1c4fa2c1b89dd3c7a">01826</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_file_input_stream_reader_1af0ad18bf18442da1c4fa2c1b89dd3c7a">nextChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01827"/>01827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(feof(file))
<anchor xml:id="_testlib_8h_source_1l01828"/>01828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>;
<anchor xml:id="_testlib_8h_source_1l01829"/>01829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01830"/>01830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;postprocessGetc(getc(file));
<anchor xml:id="_testlib_8h_source_1l01831"/>01831 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01832"/>01832 
<anchor xml:id="_testlib_8h_source_1l01833"/><link linkend="_class_file_input_stream_reader_1a728b65f5513f16b3b889e40737b0fb9e">01833</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_input_stream_reader_1a728b65f5513f16b3b889e40737b0fb9e">skipChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01834"/>01834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getc(file);
<anchor xml:id="_testlib_8h_source_1l01835"/>01835 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01836"/>01836 
<anchor xml:id="_testlib_8h_source_1l01837"/><link linkend="_class_file_input_stream_reader_1ae84ce16cd265dfbc8699eaefc3b8a8af">01837</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_input_stream_reader_1ae84ce16cd265dfbc8699eaefc3b8a8af">unreadChar</link>(<emphasis role="keywordtype">int</emphasis>&#32;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l01838"/>01838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ungetc(c<emphasis role="comment">/*,&#32;file*/</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01839"/>01839 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01840"/>01840 
<anchor xml:id="_testlib_8h_source_1l01841"/><link linkend="_class_file_input_stream_reader_1a0d97d880a07804664631517d90bb1382">01841</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_file_input_stream_reader_1a0d97d880a07804664631517d90bb1382">getName</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01842"/>01842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;name;
<anchor xml:id="_testlib_8h_source_1l01843"/>01843 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01844"/>01844 
<anchor xml:id="_testlib_8h_source_1l01845"/><link linkend="_class_file_input_stream_reader_1afeeeb04cb0c27f089aec013886fadf67">01845</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_file_input_stream_reader_1afeeeb04cb0c27f089aec013886fadf67">getLine</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01846"/>01846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;line;
<anchor xml:id="_testlib_8h_source_1l01847"/>01847 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01848"/>01848 
<anchor xml:id="_testlib_8h_source_1l01849"/><link linkend="_class_file_input_stream_reader_1afe85545ef0381d65f1b2215af45d7b78">01849</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_file_input_stream_reader_1afe85545ef0381d65f1b2215af45d7b78">eof</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01850"/>01850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;==&#32;file&#32;||&#32;feof(file))
<anchor xml:id="_testlib_8h_source_1l01851"/>01851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01852"/>01852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l01853"/>01853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;<link linkend="_class_file_input_stream_reader_1af0ad18bf18442da1c4fa2c1b89dd3c7a">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l01854"/>01854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>&#32;||&#32;(c&#32;==&#32;EOF&#32;&amp;&amp;&#32;feof(file)))
<anchor xml:id="_testlib_8h_source_1l01855"/>01855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01856"/>01856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_file_input_stream_reader_1ae84ce16cd265dfbc8699eaefc3b8a8af">unreadChar</link>(c);
<anchor xml:id="_testlib_8h_source_1l01857"/>01857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01858"/>01858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01859"/>01859 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01860"/>01860 
<anchor xml:id="_testlib_8h_source_1l01861"/><link linkend="_class_file_input_stream_reader_1a853f9cd15904383ab72f4763d48c2f42">01861</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_input_stream_reader_1a853f9cd15904383ab72f4763d48c2f42">close</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01862"/>01862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;!=&#32;file)&#32;{
<anchor xml:id="_testlib_8h_source_1l01863"/>01863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fclose(file);
<anchor xml:id="_testlib_8h_source_1l01864"/>01864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;=&#32;NULL;
<anchor xml:id="_testlib_8h_source_1l01865"/>01865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01866"/>01866 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01867"/>01867 };
<anchor xml:id="_testlib_8h_source_1l01868"/>01868 
<anchor xml:id="_testlib_8h_source_1l01869"/><link linkend="_class_buffered_file_input_stream_reader">01869</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_buffered_file_input_stream_reader">BufferedFileInputStreamReader</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_input_stream_reader">InputStreamReader</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l01870"/>01870 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l01871"/>01871 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;BUFFER_SIZE;
<anchor xml:id="_testlib_8h_source_1l01872"/>01872 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;MAX_UNREAD_COUNT;
<anchor xml:id="_testlib_8h_source_1l01873"/>01873 
<anchor xml:id="_testlib_8h_source_1l01874"/>01874 &#32;&#32;&#32;&#32;std::FILE&#32;*file;
<anchor xml:id="_testlib_8h_source_1l01875"/>01875 &#32;&#32;&#32;&#32;std::string&#32;name;
<anchor xml:id="_testlib_8h_source_1l01876"/>01876 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line;
<anchor xml:id="_testlib_8h_source_1l01877"/>01877 
<anchor xml:id="_testlib_8h_source_1l01878"/>01878 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer;
<anchor xml:id="_testlib_8h_source_1l01879"/>01879 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;*isEof;
<anchor xml:id="_testlib_8h_source_1l01880"/>01880 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bufferPos;
<anchor xml:id="_testlib_8h_source_1l01881"/>01881 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bufferSize;
<anchor xml:id="_testlib_8h_source_1l01882"/>01882 
<anchor xml:id="_testlib_8h_source_1l01883"/>01883 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;refill()&#32;{
<anchor xml:id="_testlib_8h_source_1l01884"/>01884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;==&#32;file)
<anchor xml:id="_testlib_8h_source_1l01885"/>01885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;BufferedFileInputStreamReader:&#32;file&#32;==&#32;NULL&#32;(&quot;</emphasis>&#32;+&#32;<link linkend="_class_buffered_file_input_stream_reader_1aaf1c31412eaee82b8b07c8f5df6f5370">getName</link>()&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01886"/>01886 
<anchor xml:id="_testlib_8h_source_1l01887"/>01887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bufferPos&#32;&gt;=&#32;<emphasis role="keywordtype">int</emphasis>(bufferSize))&#32;{
<anchor xml:id="_testlib_8h_source_1l01888"/>01888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;readSize&#32;=&#32;fread(
<anchor xml:id="_testlib_8h_source_1l01889"/>01889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;+&#32;MAX_UNREAD_COUNT,
<anchor xml:id="_testlib_8h_source_1l01890"/>01890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,
<anchor xml:id="_testlib_8h_source_1l01891"/>01891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BUFFER_SIZE&#32;-&#32;MAX_UNREAD_COUNT,
<anchor xml:id="_testlib_8h_source_1l01892"/>01892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file
<anchor xml:id="_testlib_8h_source_1l01893"/>01893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_testlib_8h_source_1l01894"/>01894 
<anchor xml:id="_testlib_8h_source_1l01895"/>01895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(readSize&#32;&lt;&#32;BUFFER_SIZE&#32;-&#32;MAX_UNREAD_COUNT
<anchor xml:id="_testlib_8h_source_1l01896"/>01896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;ferror(file))
<anchor xml:id="_testlib_8h_source_1l01897"/>01897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;BufferedFileInputStreamReader:&#32;unable&#32;to&#32;read&#32;(&quot;</emphasis>&#32;+&#32;<link linkend="_class_buffered_file_input_stream_reader_1aaf1c31412eaee82b8b07c8f5df6f5370">getName</link>()&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01898"/>01898 
<anchor xml:id="_testlib_8h_source_1l01899"/>01899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferSize&#32;=&#32;MAX_UNREAD_COUNT&#32;+&#32;readSize;
<anchor xml:id="_testlib_8h_source_1l01900"/>01900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferPos&#32;=&#32;int(MAX_UNREAD_COUNT);
<anchor xml:id="_testlib_8h_source_1l01901"/>01901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memset(<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>&#32;+&#32;MAX_UNREAD_COUNT,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>[0])&#32;*&#32;readSize);
<anchor xml:id="_testlib_8h_source_1l01902"/>01902 
<anchor xml:id="_testlib_8h_source_1l01903"/>01903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;readSize&#32;&gt;&#32;0;
<anchor xml:id="_testlib_8h_source_1l01904"/>01904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l01905"/>01905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l01906"/>01906 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01907"/>01907 
<anchor xml:id="_testlib_8h_source_1l01908"/>01908 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;increment()&#32;{
<anchor xml:id="_testlib_8h_source_1l01909"/>01909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c;
<anchor xml:id="_testlib_8h_source_1l01910"/>01910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;=&#32;buffer[bufferPos++])&#32;==&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>)
<anchor xml:id="_testlib_8h_source_1l01911"/>01911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line++;
<anchor xml:id="_testlib_8h_source_1l01912"/>01912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="_testlib_8h_source_1l01913"/>01913 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01914"/>01914 
<anchor xml:id="_testlib_8h_source_1l01915"/>01915 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_testlib_8h_source_1l01916"/><link linkend="_class_buffered_file_input_stream_reader_1a6461df3ebed7aab0634aa91faba73791">01916</link> &#32;&#32;&#32;&#32;<link linkend="_class_buffered_file_input_stream_reader_1a6461df3ebed7aab0634aa91faba73791">BufferedFileInputStreamReader</link>(std::FILE&#32;*file,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;name)&#32;:&#32;file(file),&#32;name(name),&#32;line(1)&#32;{
<anchor xml:id="_testlib_8h_source_1l01917"/>01917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[BUFFER_SIZE];
<anchor xml:id="_testlib_8h_source_1l01918"/>01918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>[BUFFER_SIZE];
<anchor xml:id="_testlib_8h_source_1l01919"/>01919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferSize&#32;=&#32;MAX_UNREAD_COUNT;
<anchor xml:id="_testlib_8h_source_1l01920"/>01920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferPos&#32;=&#32;int(MAX_UNREAD_COUNT);
<anchor xml:id="_testlib_8h_source_1l01921"/>01921 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01922"/>01922 
<anchor xml:id="_testlib_8h_source_1l01923"/><link linkend="_class_buffered_file_input_stream_reader_1aaccbc87abb38906895c921b96ec35f0b">01923</link> &#32;&#32;&#32;&#32;<link linkend="_class_buffered_file_input_stream_reader_1aaccbc87abb38906895c921b96ec35f0b">~BufferedFileInputStreamReader</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01924"/>01924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;!=&#32;buffer)&#32;{
<anchor xml:id="_testlib_8h_source_1l01925"/>01925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;buffer;
<anchor xml:id="_testlib_8h_source_1l01926"/>01926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;NULL;
<anchor xml:id="_testlib_8h_source_1l01927"/>01927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01928"/>01928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;!=&#32;<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l01929"/>01929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>;
<anchor xml:id="_testlib_8h_source_1l01930"/>01930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>&#32;=&#32;NULL;
<anchor xml:id="_testlib_8h_source_1l01931"/>01931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01932"/>01932 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01933"/>01933 
<anchor xml:id="_testlib_8h_source_1l01934"/><link linkend="_class_buffered_file_input_stream_reader_1a9cb09f53b2ce90a3fab93d40dde3a044">01934</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_buffered_file_input_stream_reader_1a9cb09f53b2ce90a3fab93d40dde3a044">setTestCase</link>(<emphasis role="keywordtype">int</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l01935"/>01935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;setTestCase&#32;not&#32;implemented&#32;in&#32;BufferedFileInputStreamReader&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01936"/>01936 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01937"/>01937 
<anchor xml:id="_testlib_8h_source_1l01938"/><link linkend="_class_buffered_file_input_stream_reader_1ab0ca30e956ff85c10b82e9c424b0c53e">01938</link> &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;<link linkend="_class_buffered_file_input_stream_reader_1ab0ca30e956ff85c10b82e9c424b0c53e">getReadChars</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01939"/>01939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;getReadChars&#32;not&#32;implemented&#32;in&#32;BufferedFileInputStreamReader&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01940"/>01940 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01941"/>01941 &#32;&#32;&#32;&#32;
<anchor xml:id="_testlib_8h_source_1l01942"/><link linkend="_class_buffered_file_input_stream_reader_1a468df465bd263e44be6b38df8a18cf07">01942</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_buffered_file_input_stream_reader_1a468df465bd263e44be6b38df8a18cf07">curChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01943"/>01943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!refill())
<anchor xml:id="_testlib_8h_source_1l01944"/>01944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>;
<anchor xml:id="_testlib_8h_source_1l01945"/>01945 
<anchor xml:id="_testlib_8h_source_1l01946"/>01946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>[bufferPos]&#32;?&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>&#32;:&#32;buffer[bufferPos];
<anchor xml:id="_testlib_8h_source_1l01947"/>01947 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01948"/>01948 
<anchor xml:id="_testlib_8h_source_1l01949"/><link linkend="_class_buffered_file_input_stream_reader_1a8bac4ef540ddce255c39c6024ca7530b">01949</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_buffered_file_input_stream_reader_1a8bac4ef540ddce255c39c6024ca7530b">nextChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01950"/>01950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!refill())
<anchor xml:id="_testlib_8h_source_1l01951"/>01951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>;
<anchor xml:id="_testlib_8h_source_1l01952"/>01952 
<anchor xml:id="_testlib_8h_source_1l01953"/>01953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>[bufferPos]&#32;?&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>&#32;:&#32;increment();
<anchor xml:id="_testlib_8h_source_1l01954"/>01954 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01955"/>01955 
<anchor xml:id="_testlib_8h_source_1l01956"/><link linkend="_class_buffered_file_input_stream_reader_1af6982815e72b0689f11c7798b63a8c11">01956</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_buffered_file_input_stream_reader_1af6982815e72b0689f11c7798b63a8c11">skipChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01957"/>01957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;increment();
<anchor xml:id="_testlib_8h_source_1l01958"/>01958 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01959"/>01959 
<anchor xml:id="_testlib_8h_source_1l01960"/><link linkend="_class_buffered_file_input_stream_reader_1aceeb77345c539a488be643c0d8152837">01960</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_buffered_file_input_stream_reader_1aceeb77345c539a488be643c0d8152837">unreadChar</link>(<emphasis role="keywordtype">int</emphasis>&#32;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l01961"/>01961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferPos--;
<anchor xml:id="_testlib_8h_source_1l01962"/>01962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bufferPos&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l01963"/>01963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;BufferedFileInputStreamReader::unreadChar(int):&#32;bufferPos&#32;&lt;&#32;0&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l01964"/>01964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a8be64904de021941ee6d1aa96ee4da14">isEof</link>[bufferPos]&#32;=&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>);
<anchor xml:id="_testlib_8h_source_1l01965"/>01965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[bufferPos]&#32;=&#32;char(c);
<anchor xml:id="_testlib_8h_source_1l01966"/>01966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>)
<anchor xml:id="_testlib_8h_source_1l01967"/>01967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line--;
<anchor xml:id="_testlib_8h_source_1l01968"/>01968 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01969"/>01969 
<anchor xml:id="_testlib_8h_source_1l01970"/><link linkend="_class_buffered_file_input_stream_reader_1aaf1c31412eaee82b8b07c8f5df6f5370">01970</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_buffered_file_input_stream_reader_1aaf1c31412eaee82b8b07c8f5df6f5370">getName</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01971"/>01971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;name;
<anchor xml:id="_testlib_8h_source_1l01972"/>01972 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01973"/>01973 
<anchor xml:id="_testlib_8h_source_1l01974"/><link linkend="_class_buffered_file_input_stream_reader_1a005e2082f57977cde391ceafb220e728">01974</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_buffered_file_input_stream_reader_1a005e2082f57977cde391ceafb220e728">getLine</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01975"/>01975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;line;
<anchor xml:id="_testlib_8h_source_1l01976"/>01976 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01977"/>01977 
<anchor xml:id="_testlib_8h_source_1l01978"/><link linkend="_class_buffered_file_input_stream_reader_1a395d51259e292bcc9db8180b0941382c">01978</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_buffered_file_input_stream_reader_1a395d51259e292bcc9db8180b0941382c">eof</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01979"/>01979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!refill()&#32;||&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>&#32;==&#32;<link linkend="_class_buffered_file_input_stream_reader_1a468df465bd263e44be6b38df8a18cf07">curChar</link>();
<anchor xml:id="_testlib_8h_source_1l01980"/>01980 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01981"/>01981 
<anchor xml:id="_testlib_8h_source_1l01982"/><link linkend="_class_buffered_file_input_stream_reader_1ab5c370f1b5e43ae4c9e1947e00dbfafd">01982</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_buffered_file_input_stream_reader_1ab5c370f1b5e43ae4c9e1947e00dbfafd">close</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l01983"/>01983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;!=&#32;file)&#32;{
<anchor xml:id="_testlib_8h_source_1l01984"/>01984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fclose(file);
<anchor xml:id="_testlib_8h_source_1l01985"/>01985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;=&#32;NULL;
<anchor xml:id="_testlib_8h_source_1l01986"/>01986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01987"/>01987 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l01988"/>01988 };
<anchor xml:id="_testlib_8h_source_1l01989"/>01989 
<anchor xml:id="_testlib_8h_source_1l01990"/>01990 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;BufferedFileInputStreamReader::BUFFER_SIZE&#32;=&#32;2000000;
<anchor xml:id="_testlib_8h_source_1l01991"/>01991 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;BufferedFileInputStreamReader::MAX_UNREAD_COUNT&#32;=&#32;BufferedFileInputStreamReader::BUFFER_SIZE&#32;/&#32;2;
<anchor xml:id="_testlib_8h_source_1l01992"/>01992 
<anchor xml:id="_testlib_8h_source_1l01993"/>01993 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l01994"/>01994 <emphasis role="comment">&#32;*&#32;Streams&#32;to&#32;be&#32;used&#32;for&#32;reading&#32;data&#32;in&#32;checkers&#32;or&#32;validators.</emphasis>
<anchor xml:id="_testlib_8h_source_1l01995"/>01995 <emphasis role="comment">&#32;*&#32;Each&#32;read*()&#32;method&#32;moves&#32;pointer&#32;to&#32;the&#32;next&#32;character&#32;after&#32;the</emphasis>
<anchor xml:id="_testlib_8h_source_1l01996"/>01996 <emphasis role="comment">&#32;*&#32;read&#32;value.</emphasis>
<anchor xml:id="_testlib_8h_source_1l01997"/>01997 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l01998"/><link linkend="_struct_in_stream">01998</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_in_stream">InStream</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l01999"/>01999 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Do&#32;not&#32;use&#32;them.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02000"/>02000 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd">InStream</link>();
<anchor xml:id="_testlib_8h_source_1l02001"/>02001 
<anchor xml:id="_testlib_8h_source_1l02002"/>02002 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab75c26c4747d2a23388735cdfebbe4fa">~InStream</link>();
<anchor xml:id="_testlib_8h_source_1l02003"/>02003 
<anchor xml:id="_testlib_8h_source_1l02004"/>02004 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Wrap&#32;std::string&#32;with&#32;InStream.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02005"/>02005 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd">InStream</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_in_stream">InStream</link>&#32;&amp;baseStream,&#32;std::string&#32;content);
<anchor xml:id="_testlib_8h_source_1l02006"/>02006 
<anchor xml:id="_testlib_8h_source_1l02007"/><link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">02007</link> &#32;&#32;&#32;&#32;<link linkend="_class_input_stream_reader">InputStreamReader</link>&#32;*<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>;
<anchor xml:id="_testlib_8h_source_1l02008"/><link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">02008</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>;
<anchor xml:id="_testlib_8h_source_1l02009"/>02009 
<anchor xml:id="_testlib_8h_source_1l02010"/><link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">02010</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>;
<anchor xml:id="_testlib_8h_source_1l02011"/><link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">02011</link> &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddb">TMode</link>&#32;<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>;
<anchor xml:id="_testlib_8h_source_1l02012"/><link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">02012</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>;
<anchor xml:id="_testlib_8h_source_1l02013"/><link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">02013</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>;
<anchor xml:id="_testlib_8h_source_1l02014"/><link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">02014</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>;
<anchor xml:id="_testlib_8h_source_1l02015"/>02015 
<anchor xml:id="_testlib_8h_source_1l02016"/><link linkend="_struct_in_stream_1a8afeeed49266480bd239d832415fb85b">02016</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1a8afeeed49266480bd239d832415fb85b">wordReserveSize</link>;
<anchor xml:id="_testlib_8h_source_1l02017"/><link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">02017</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>;
<anchor xml:id="_testlib_8h_source_1l02018"/>02018 
<anchor xml:id="_testlib_8h_source_1l02019"/><link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">02019</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>;
<anchor xml:id="_testlib_8h_source_1l02020"/><link linkend="_struct_in_stream_1a14e6d7455706cea771265a7ab8407918">02020</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_in_stream_1a14e6d7455706cea771265a7ab8407918">maxFileSize</link>;
<anchor xml:id="_testlib_8h_source_1l02021"/><link linkend="_struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26">02021</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26">maxTokenLength</link>;
<anchor xml:id="_testlib_8h_source_1l02022"/><link linkend="_struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a">02022</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a">maxMessageLength</link>;
<anchor xml:id="_testlib_8h_source_1l02023"/>02023 
<anchor xml:id="_testlib_8h_source_1l02024"/>02024 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(std::string&#32;fileName,&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddb">TMode</link>&#32;<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>);
<anchor xml:id="_testlib_8h_source_1l02025"/>02025 
<anchor xml:id="_testlib_8h_source_1l02026"/>02026 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(std::FILE&#32;*f,&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddb">TMode</link>&#32;<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>);
<anchor xml:id="_testlib_8h_source_1l02027"/>02027 
<anchor xml:id="_testlib_8h_source_1l02028"/>02028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a7e9ee69fe14cc6c19b059b384eebed5c">setTestCase</link>(<emphasis role="keywordtype">int</emphasis>&#32;testCase);
<anchor xml:id="_testlib_8h_source_1l02029"/>02029 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;<link linkend="_struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd">getReadChars</link>();
<anchor xml:id="_testlib_8h_source_1l02030"/>02030 
<anchor xml:id="_testlib_8h_source_1l02031"/>02031 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Moves&#32;stream&#32;pointer&#32;to&#32;the&#32;first&#32;non-white-space&#32;character&#32;or&#32;EOF.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02032"/>02032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3caea7dc5003207a13b690e1e6523759">skipBlanks</link>();
<anchor xml:id="_testlib_8h_source_1l02033"/>02033 
<anchor xml:id="_testlib_8h_source_1l02034"/>02034 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;current&#32;character&#32;in&#32;the&#32;stream.&#32;Doesn&apos;t&#32;remove&#32;it&#32;from&#32;stream.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02035"/>02035 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1af208d97fa6484d10b88d611012fce578">curChar</link>();
<anchor xml:id="_testlib_8h_source_1l02036"/>02036 
<anchor xml:id="_testlib_8h_source_1l02037"/>02037 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Moves&#32;stream&#32;pointer&#32;one&#32;character&#32;forward.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02038"/>02038 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a15dbd488971ba0da79085f7bd980f1f1">skipChar</link>();
<anchor xml:id="_testlib_8h_source_1l02039"/>02039 
<anchor xml:id="_testlib_8h_source_1l02040"/>02040 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;current&#32;character&#32;and&#32;moves&#32;pointer&#32;one&#32;character&#32;forward.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02041"/>02041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1af46102c51b215e59e3b9e993ac999fe5">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l02042"/>02042 
<anchor xml:id="_testlib_8h_source_1l02043"/>02043 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Returns&#32;current&#32;character&#32;and&#32;moves&#32;pointer&#32;one&#32;character&#32;forward.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02044"/>02044 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205">readChar</link>();
<anchor xml:id="_testlib_8h_source_1l02045"/>02045 
<anchor xml:id="_testlib_8h_source_1l02046"/>02046 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;As&#32;&quot;readChar()&quot;&#32;but&#32;ensures&#32;that&#32;the&#32;result&#32;is&#32;equal&#32;to&#32;given&#32;parameter.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02047"/>02047 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205">readChar</link>(<emphasis role="keywordtype">char</emphasis>&#32;c);
<anchor xml:id="_testlib_8h_source_1l02048"/>02048 
<anchor xml:id="_testlib_8h_source_1l02049"/>02049 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;As&#32;&quot;readChar()&quot;&#32;but&#32;ensures&#32;that&#32;the&#32;result&#32;is&#32;equal&#32;to&#32;the&#32;space&#32;(code=32).&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02050"/>02050 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1a012e968b18b359b82897db805faeb0f6">readSpace</link>();
<anchor xml:id="_testlib_8h_source_1l02051"/>02051 
<anchor xml:id="_testlib_8h_source_1l02052"/>02052 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Puts&#32;back&#32;the&#32;character&#32;into&#32;the&#32;stream.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02053"/>02053 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a8c656e9ae7175e852033fbdffe41550b">unreadChar</link>(<emphasis role="keywordtype">char</emphasis>&#32;c);
<anchor xml:id="_testlib_8h_source_1l02054"/>02054 
<anchor xml:id="_testlib_8h_source_1l02055"/>02055 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Reopens&#32;stream,&#32;you&#32;should&#32;not&#32;use&#32;it.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02056"/>02056 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0daf92605da53c68648ad78572965ca3">reset</link>(std::FILE&#32;*file&#32;=&#32;NULL);
<anchor xml:id="_testlib_8h_source_1l02057"/>02057 
<anchor xml:id="_testlib_8h_source_1l02058"/>02058 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Checks&#32;that&#32;current&#32;position&#32;is&#32;EOF.&#32;If&#32;not&#32;it&#32;doesn&apos;t&#32;move&#32;stream&#32;pointer.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02059"/>02059 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4">eof</link>();
<anchor xml:id="_testlib_8h_source_1l02060"/>02060 
<anchor xml:id="_testlib_8h_source_1l02061"/>02061 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Moves&#32;pointer&#32;to&#32;the&#32;first&#32;non-white-space&#32;character&#32;and&#32;calls&#32;&quot;eof()&quot;.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02062"/>02062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b">seekEof</link>();
<anchor xml:id="_testlib_8h_source_1l02063"/>02063 
<anchor xml:id="_testlib_8h_source_1l02064"/>02064 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02065"/>02065 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Checks&#32;that&#32;current&#32;position&#32;contains&#32;EOLN.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02066"/>02066 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;If&#32;not&#32;it&#32;doesn&apos;t&#32;move&#32;stream&#32;pointer.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02067"/>02067 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;In&#32;strict&#32;mode&#32;expects&#32;&quot;#13#10&quot;&#32;for&#32;windows&#32;or&#32;&quot;#10&quot;&#32;for&#32;other&#32;platforms.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02068"/>02068 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02069"/>02069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd">eoln</link>();
<anchor xml:id="_testlib_8h_source_1l02070"/>02070 
<anchor xml:id="_testlib_8h_source_1l02071"/>02071 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Moves&#32;pointer&#32;to&#32;the&#32;first&#32;non-space&#32;and&#32;non-tab&#32;character&#32;and&#32;calls&#32;&quot;eoln()&quot;.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02072"/>02072 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1a106d09bbdd844ca246bfbf2c6409f4b6">seekEoln</link>();
<anchor xml:id="_testlib_8h_source_1l02073"/>02073 
<anchor xml:id="_testlib_8h_source_1l02074"/>02074 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Moves&#32;stream&#32;pointer&#32;to&#32;the&#32;first&#32;character&#32;of&#32;the&#32;next&#32;line&#32;(if&#32;exists).&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02075"/>02075 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a86e63a6bb9bc47cae9f58f0591ecc53f">nextLine</link>();
<anchor xml:id="_testlib_8h_source_1l02076"/>02076 
<anchor xml:id="_testlib_8h_source_1l02077"/>02077 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02078"/>02078 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Reads&#32;new&#32;token.&#32;Ignores&#32;white-spaces&#32;into&#32;the&#32;non-strict&#32;mode</emphasis>
<anchor xml:id="_testlib_8h_source_1l02079"/>02079 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(strict&#32;mode&#32;is&#32;used&#32;in&#32;validators&#32;usually).</emphasis>
<anchor xml:id="_testlib_8h_source_1l02080"/>02080 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02081"/>02081 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>();
<anchor xml:id="_testlib_8h_source_1l02082"/>02082 
<anchor xml:id="_testlib_8h_source_1l02083"/>02083 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readWord()&quot;,&#32;it&#32;is&#32;preferred&#32;to&#32;use&#32;&quot;readToken()&quot;.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02084"/>02084 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0">readToken</link>();
<anchor xml:id="_testlib_8h_source_1l02085"/>02085 
<anchor xml:id="_testlib_8h_source_1l02086"/>02086 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readWord()&quot;,&#32;but&#32;ensures&#32;that&#32;token&#32;matches&#32;to&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02087"/>02087 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02088"/>02088 
<anchor xml:id="_testlib_8h_source_1l02089"/>02089 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02090"/>02090 
<anchor xml:id="_testlib_8h_source_1l02091"/>02091 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l02092"/>02092 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">readWords</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02093"/>02093 
<anchor xml:id="_testlib_8h_source_1l02094"/>02094 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l02095"/>02095 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">readWords</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02096"/>02096 
<anchor xml:id="_testlib_8h_source_1l02097"/>02097 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">readWords</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02098"/>02098 
<anchor xml:id="_testlib_8h_source_1l02099"/>02099 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readToken()&quot;,&#32;but&#32;ensures&#32;that&#32;token&#32;matches&#32;to&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02100"/>02100 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0">readToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02101"/>02101 
<anchor xml:id="_testlib_8h_source_1l02102"/>02102 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0">readToken</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02103"/>02103 
<anchor xml:id="_testlib_8h_source_1l02104"/>02104 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l02105"/>02105 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">readTokens</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02106"/>02106 
<anchor xml:id="_testlib_8h_source_1l02107"/>02107 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l02108"/>02108 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">readTokens</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02109"/>02109 
<anchor xml:id="_testlib_8h_source_1l02110"/>02110 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">readTokens</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02111"/>02111 
<anchor xml:id="_testlib_8h_source_1l02112"/>02112 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(std::string&#32;&amp;result);
<anchor xml:id="_testlib_8h_source_1l02113"/>02113 
<anchor xml:id="_testlib_8h_source_1l02114"/>02114 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02115"/>02115 
<anchor xml:id="_testlib_8h_source_1l02116"/>02116 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02117"/>02117 
<anchor xml:id="_testlib_8h_source_1l02118"/>02118 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72">readTokenTo</link>(std::string&#32;&amp;result);
<anchor xml:id="_testlib_8h_source_1l02119"/>02119 
<anchor xml:id="_testlib_8h_source_1l02120"/>02120 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72">readTokenTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02121"/>02121 
<anchor xml:id="_testlib_8h_source_1l02122"/>02122 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72">readTokenTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02123"/>02123 
<anchor xml:id="_testlib_8h_source_1l02124"/>02124 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02125"/>02125 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Reads&#32;new&#32;long&#32;long&#32;value.&#32;Ignores&#32;white-spaces&#32;into&#32;the&#32;non-strict&#32;mode</emphasis>
<anchor xml:id="_testlib_8h_source_1l02126"/>02126 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(strict&#32;mode&#32;is&#32;used&#32;in&#32;validators&#32;usually).</emphasis>
<anchor xml:id="_testlib_8h_source_1l02127"/>02127 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02128"/>02128 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">readLong</link>();
<anchor xml:id="_testlib_8h_source_1l02129"/>02129 
<anchor xml:id="_testlib_8h_source_1l02130"/>02130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_in_stream_1a473c29087621184bb71998a12957e822">readUnsignedLong</link>();
<anchor xml:id="_testlib_8h_source_1l02131"/>02131 
<anchor xml:id="_testlib_8h_source_1l02132"/>02132 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02133"/>02133 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Reads&#32;new&#32;int.&#32;Ignores&#32;white-spaces&#32;into&#32;the&#32;non-strict&#32;mode</emphasis>
<anchor xml:id="_testlib_8h_source_1l02134"/>02134 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(strict&#32;mode&#32;is&#32;used&#32;in&#32;validators&#32;usually).</emphasis>
<anchor xml:id="_testlib_8h_source_1l02135"/>02135 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02136"/>02136 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08">readInteger</link>();
<anchor xml:id="_testlib_8h_source_1l02137"/>02137 
<anchor xml:id="_testlib_8h_source_1l02138"/>02138 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02139"/>02139 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Reads&#32;new&#32;int.&#32;Ignores&#32;white-spaces&#32;into&#32;the&#32;non-strict&#32;mode</emphasis>
<anchor xml:id="_testlib_8h_source_1l02140"/>02140 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(strict&#32;mode&#32;is&#32;used&#32;in&#32;validators&#32;usually).</emphasis>
<anchor xml:id="_testlib_8h_source_1l02141"/>02141 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02142"/>02142 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">readInt</link>();
<anchor xml:id="_testlib_8h_source_1l02143"/>02143 
<anchor xml:id="_testlib_8h_source_1l02144"/>02144 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;As&#32;&quot;readLong()&quot;&#32;but&#32;ensures&#32;that&#32;value&#32;in&#32;the&#32;range&#32;[minv,maxv].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02145"/>02145 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">readLong</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02146"/>02146 
<anchor xml:id="_testlib_8h_source_1l02147"/>02147 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Reads&#32;space-separated&#32;sequence&#32;of&#32;long&#32;longs.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02148"/>02148 &#32;&#32;&#32;&#32;std::vector&lt;long&#32;long&gt;
<anchor xml:id="_testlib_8h_source_1l02149"/>02149 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a469d95f96c09746781621480b74c5c83">readLongs</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02150"/>02150 
<anchor xml:id="_testlib_8h_source_1l02151"/>02151 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Reads&#32;space-separated&#32;sequence&#32;of&#32;long&#32;longs.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02152"/>02152 &#32;&#32;&#32;&#32;std::vector&lt;long&#32;long&gt;&#32;<link linkend="_struct_in_stream_1a469d95f96c09746781621480b74c5c83">readLongs</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02153"/>02153 
<anchor xml:id="_testlib_8h_source_1l02154"/>02154 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
<anchor xml:id="_testlib_8h_source_1l02155"/>02155 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a473c29087621184bb71998a12957e822">readUnsignedLong</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02156"/>02156 
<anchor xml:id="_testlib_8h_source_1l02157"/>02157 &#32;&#32;&#32;&#32;std::vector&lt;unsigned&#32;long&#32;long&gt;
<anchor xml:id="_testlib_8h_source_1l02158"/>02158 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a">readUnsignedLongs</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l02159"/>02159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02160"/>02160 
<anchor xml:id="_testlib_8h_source_1l02161"/>02161 &#32;&#32;&#32;&#32;std::vector&lt;unsigned&#32;long&#32;long&gt;&#32;<link linkend="_struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a">readUnsignedLongs</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02162"/>02162 
<anchor xml:id="_testlib_8h_source_1l02163"/>02163 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">readLong</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02164"/>02164 
<anchor xml:id="_testlib_8h_source_1l02165"/>02165 &#32;&#32;&#32;&#32;std::vector&lt;unsigned&#32;long&#32;long&gt;
<anchor xml:id="_testlib_8h_source_1l02166"/><link linkend="_struct_in_stream_1a9bd7a7d10db6d24401dfd3b421ed6045">02166</link> &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a9bd7a7d10db6d24401dfd3b421ed6045">readLongs</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l02167"/>02167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02168"/>02168 
<anchor xml:id="_testlib_8h_source_1l02169"/>02169 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;As&#32;&quot;readInteger()&quot;&#32;but&#32;ensures&#32;that&#32;value&#32;in&#32;the&#32;range&#32;[minv,maxv].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02170"/>02170 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08">readInteger</link>(<emphasis role="keywordtype">int</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02171"/>02171 
<anchor xml:id="_testlib_8h_source_1l02172"/>02172 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;As&#32;&quot;readInt()&quot;&#32;but&#32;ensures&#32;that&#32;value&#32;in&#32;the&#32;range&#32;[minv,maxv].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02173"/>02173 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">readInt</link>(<emphasis role="keywordtype">int</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02174"/>02174 
<anchor xml:id="_testlib_8h_source_1l02175"/>02175 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Reads&#32;space-separated&#32;sequence&#32;of&#32;integers.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02176"/>02176 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;
<anchor xml:id="_testlib_8h_source_1l02177"/>02177 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea">readIntegers</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02178"/>02178 
<anchor xml:id="_testlib_8h_source_1l02179"/>02179 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Reads&#32;space-separated&#32;sequence&#32;of&#32;integers.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02180"/>02180 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;<link linkend="_struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea">readIntegers</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02181"/>02181 
<anchor xml:id="_testlib_8h_source_1l02182"/>02182 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Reads&#32;space-separated&#32;sequence&#32;of&#32;integers.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02183"/>02183 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;<link linkend="_struct_in_stream_1afe94166e208381f17f49906ee5d50ae1">readInts</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02184"/>02184 
<anchor xml:id="_testlib_8h_source_1l02185"/>02185 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Reads&#32;space-separated&#32;sequence&#32;of&#32;integers.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02186"/>02186 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;<link linkend="_struct_in_stream_1afe94166e208381f17f49906ee5d50ae1">readInts</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02187"/>02187 
<anchor xml:id="_testlib_8h_source_1l02188"/>02188 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02189"/>02189 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Reads&#32;new&#32;double.&#32;Ignores&#32;white-spaces&#32;into&#32;the&#32;non-strict&#32;mode</emphasis>
<anchor xml:id="_testlib_8h_source_1l02190"/>02190 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(strict&#32;mode&#32;is&#32;used&#32;in&#32;validators&#32;usually).</emphasis>
<anchor xml:id="_testlib_8h_source_1l02191"/>02191 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02192"/>02192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">readReal</link>();
<anchor xml:id="_testlib_8h_source_1l02193"/>02193 
<anchor xml:id="_testlib_8h_source_1l02194"/>02194 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02195"/>02195 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Reads&#32;new&#32;double.&#32;Ignores&#32;white-spaces&#32;into&#32;the&#32;non-strict&#32;mode</emphasis>
<anchor xml:id="_testlib_8h_source_1l02196"/>02196 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(strict&#32;mode&#32;is&#32;used&#32;in&#32;validators&#32;usually).</emphasis>
<anchor xml:id="_testlib_8h_source_1l02197"/>02197 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02198"/>02198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1a7409a09698273a264eaa9069ecf90abf">readDouble</link>();
<anchor xml:id="_testlib_8h_source_1l02199"/>02199 
<anchor xml:id="_testlib_8h_source_1l02200"/>02200 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;As&#32;&quot;readReal()&quot;&#32;but&#32;ensures&#32;that&#32;value&#32;in&#32;the&#32;range&#32;[minv,maxv].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02201"/>02201 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">readReal</link>(<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02202"/>02202 
<anchor xml:id="_testlib_8h_source_1l02203"/>02203 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;
<anchor xml:id="_testlib_8h_source_1l02204"/>02204 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b">readReals</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02205"/>02205 
<anchor xml:id="_testlib_8h_source_1l02206"/>02206 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;<link linkend="_struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b">readReals</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02207"/>02207 
<anchor xml:id="_testlib_8h_source_1l02208"/>02208 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;As&#32;&quot;readDouble()&quot;&#32;but&#32;ensures&#32;that&#32;value&#32;in&#32;the&#32;range&#32;[minv,maxv].&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02209"/>02209 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1a7409a09698273a264eaa9069ecf90abf">readDouble</link>(<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02210"/>02210 
<anchor xml:id="_testlib_8h_source_1l02211"/>02211 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;
<anchor xml:id="_testlib_8h_source_1l02212"/>02212 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e">readDoubles</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02213"/>02213 
<anchor xml:id="_testlib_8h_source_1l02214"/>02214 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;<link linkend="_struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e">readDoubles</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02215"/>02215 
<anchor xml:id="_testlib_8h_source_1l02216"/>02216 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02217"/>02217 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;As&#32;&quot;readReal()&quot;&#32;but&#32;ensures&#32;that&#32;value&#32;in&#32;the&#32;range&#32;[minv,maxv]&#32;and</emphasis>
<anchor xml:id="_testlib_8h_source_1l02218"/>02218 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;number&#32;of&#32;digit&#32;after&#32;the&#32;decimal&#32;point&#32;is&#32;in&#32;range&#32;[minAfterPointDigitCount,maxAfterPointDigitCount]</emphasis>
<anchor xml:id="_testlib_8h_source_1l02219"/>02219 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;and&#32;number&#32;is&#32;in&#32;the&#32;form&#32;&quot;[-]digit(s)[.digit(s)]&quot;.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02220"/>02220 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02221"/>02221 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1af4a862c387cf199c075896c046b3038b">readStrictReal</link>(<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l02222"/>02222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount,
<anchor xml:id="_testlib_8h_source_1l02223"/>02223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02224"/>02224 
<anchor xml:id="_testlib_8h_source_1l02225"/>02225 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;<link linkend="_struct_in_stream_1a05d7a1183338770dd288298e6f4378c7">readStrictReals</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l02226"/>02226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount,
<anchor xml:id="_testlib_8h_source_1l02227"/>02227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02228"/>02228 
<anchor xml:id="_testlib_8h_source_1l02229"/>02229 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02230"/>02230 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;As&#32;&quot;readDouble()&quot;&#32;but&#32;ensures&#32;that&#32;value&#32;in&#32;the&#32;range&#32;[minv,maxv]&#32;and</emphasis>
<anchor xml:id="_testlib_8h_source_1l02231"/>02231 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;number&#32;of&#32;digit&#32;after&#32;the&#32;decimal&#32;point&#32;is&#32;in&#32;range&#32;[minAfterPointDigitCount,maxAfterPointDigitCount]</emphasis>
<anchor xml:id="_testlib_8h_source_1l02232"/>02232 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;and&#32;number&#32;is&#32;in&#32;the&#32;form&#32;&quot;[-]digit(s)[.digit(s)]&quot;.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02233"/>02233 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02234"/>02234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1aaecf640ad9de7cf1873b2bc216e32b47">readStrictDouble</link>(<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l02235"/>02235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount,
<anchor xml:id="_testlib_8h_source_1l02236"/>02236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02237"/>02237 
<anchor xml:id="_testlib_8h_source_1l02238"/>02238 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;<link linkend="_struct_in_stream_1af2689fbf7c65b80728826fcb4230163f">readStrictDoubles</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l02239"/>02239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount,
<anchor xml:id="_testlib_8h_source_1l02240"/>02240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02241"/>02241 
<anchor xml:id="_testlib_8h_source_1l02242"/>02242 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;As&#32;readLine().&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02243"/>02243 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>();
<anchor xml:id="_testlib_8h_source_1l02244"/>02244 
<anchor xml:id="_testlib_8h_source_1l02245"/>02245 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Read&#32;many&#32;lines.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02246"/>02246 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">readStrings</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02247"/>02247 
<anchor xml:id="_testlib_8h_source_1l02248"/>02248 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;readLine().&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02249"/>02249 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(std::string&#32;&amp;result);
<anchor xml:id="_testlib_8h_source_1l02250"/>02250 
<anchor xml:id="_testlib_8h_source_1l02251"/>02251 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readLine()/readString()&quot;,&#32;but&#32;ensures&#32;that&#32;line&#32;matches&#32;to&#32;the&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02252"/>02252 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02253"/>02253 
<anchor xml:id="_testlib_8h_source_1l02254"/>02254 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readLine()/readString()&quot;,&#32;but&#32;ensures&#32;that&#32;line&#32;matches&#32;to&#32;the&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02255"/>02255 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02256"/>02256 
<anchor xml:id="_testlib_8h_source_1l02257"/>02257 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Read&#32;many&#32;lines.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02258"/>02258 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l02259"/>02259 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">readStrings</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02260"/>02260 
<anchor xml:id="_testlib_8h_source_1l02261"/>02261 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Read&#32;many&#32;lines.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02262"/>02262 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l02263"/>02263 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">readStrings</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02264"/>02264 
<anchor xml:id="_testlib_8h_source_1l02265"/>02265 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readLine()/readString()&quot;,&#32;but&#32;ensures&#32;that&#32;line&#32;matches&#32;to&#32;the&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02266"/>02266 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02267"/>02267 
<anchor xml:id="_testlib_8h_source_1l02268"/>02268 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readLine()/readString()&quot;,&#32;but&#32;ensures&#32;that&#32;line&#32;matches&#32;to&#32;the&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02269"/>02269 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02270"/>02270 
<anchor xml:id="_testlib_8h_source_1l02271"/>02271 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02272"/>02272 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Reads&#32;line&#32;from&#32;the&#32;current&#32;position&#32;to&#32;EOLN&#32;or&#32;EOF.&#32;Moves&#32;stream&#32;pointer&#32;to</emphasis>
<anchor xml:id="_testlib_8h_source_1l02273"/>02273 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;the&#32;first&#32;character&#32;of&#32;the&#32;new&#32;line&#32;(if&#32;possible).</emphasis>
<anchor xml:id="_testlib_8h_source_1l02274"/>02274 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02275"/>02275 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683">readLine</link>();
<anchor xml:id="_testlib_8h_source_1l02276"/>02276 
<anchor xml:id="_testlib_8h_source_1l02277"/>02277 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Read&#32;many&#32;lines.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02278"/>02278 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">readLines</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02279"/>02279 
<anchor xml:id="_testlib_8h_source_1l02280"/>02280 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;readLine().&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02281"/>02281 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447">readLineTo</link>(std::string&#32;&amp;result);
<anchor xml:id="_testlib_8h_source_1l02282"/>02282 
<anchor xml:id="_testlib_8h_source_1l02283"/>02283 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readLine()&quot;,&#32;but&#32;ensures&#32;that&#32;line&#32;matches&#32;to&#32;the&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02284"/>02284 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683">readLine</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02285"/>02285 
<anchor xml:id="_testlib_8h_source_1l02286"/>02286 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readLine()&quot;,&#32;but&#32;ensures&#32;that&#32;line&#32;matches&#32;to&#32;the&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02287"/>02287 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683">readLine</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02288"/>02288 
<anchor xml:id="_testlib_8h_source_1l02289"/>02289 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Read&#32;many&#32;lines.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02290"/>02290 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l02291"/>02291 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">readLines</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02292"/>02292 
<anchor xml:id="_testlib_8h_source_1l02293"/>02293 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Read&#32;many&#32;lines.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02294"/>02294 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l02295"/>02295 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">readLines</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase&#32;=&#32;1);
<anchor xml:id="_testlib_8h_source_1l02296"/>02296 
<anchor xml:id="_testlib_8h_source_1l02297"/>02297 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readLine()&quot;,&#32;but&#32;ensures&#32;that&#32;line&#32;matches&#32;to&#32;the&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02298"/>02298 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447">readLineTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02299"/>02299 
<anchor xml:id="_testlib_8h_source_1l02300"/>02300 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;same&#32;as&#32;&quot;readLine()&quot;,&#32;but&#32;ensures&#32;that&#32;line&#32;matches&#32;to&#32;the&#32;given&#32;pattern.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02301"/>02301 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447">readLineTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02302"/>02302 
<anchor xml:id="_testlib_8h_source_1l02303"/>02303 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Reads&#32;EOLN&#32;or&#32;fails.&#32;Use&#32;it&#32;in&#32;validators.&#32;Calls&#32;&quot;eoln()&quot;&#32;method&#32;internally.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02304"/>02304 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a034c0ee97269f7bbd1e73ccc85b13f54">readEoln</link>();
<anchor xml:id="_testlib_8h_source_1l02305"/>02305 
<anchor xml:id="_testlib_8h_source_1l02306"/>02306 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Reads&#32;EOF&#32;or&#32;fails.&#32;Use&#32;it&#32;in&#32;validators.&#32;Calls&#32;&quot;eof()&quot;&#32;method&#32;internally.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02307"/>02307 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a80e53f1d7a022f34f8d88839de43d6b5">readEof</link>();
<anchor xml:id="_testlib_8h_source_1l02308"/>02308 
<anchor xml:id="_testlib_8h_source_1l02309"/>02309 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02310"/>02310 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Quit-functions&#32;aborts&#32;program&#32;with&#32;&lt;result&gt;&#32;and&#32;&lt;message&gt;:</emphasis>
<anchor xml:id="_testlib_8h_source_1l02311"/>02311 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;input/answer&#32;streams&#32;replace&#32;any&#32;result&#32;to&#32;FAIL.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02312"/>02312 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02313"/>02313 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg);
<anchor xml:id="_testlib_8h_source_1l02314"/>02314 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02315"/>02315 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Quit-functions&#32;aborts&#32;program&#32;with&#32;&lt;result&gt;&#32;and&#32;&lt;message&gt;:</emphasis>
<anchor xml:id="_testlib_8h_source_1l02316"/>02316 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;input/answer&#32;streams&#32;replace&#32;any&#32;result&#32;to&#32;FAIL.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02317"/>02317 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02318"/>02318 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5">quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg,&#32;...);
<anchor xml:id="_testlib_8h_source_1l02319"/>02319 
<anchor xml:id="_testlib_8h_source_1l02320"/>02320 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02321"/>02321 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Quit-functions&#32;aborts&#32;program&#32;with&#32;&lt;result&gt;&#32;and&#32;&lt;message&gt;:</emphasis>
<anchor xml:id="_testlib_8h_source_1l02322"/>02322 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;input/answer&#32;streams&#32;replace&#32;any&#32;result&#32;to&#32;FAIL.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02323"/>02323 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02324"/>02324 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0c969f83376d50af370615d44186647d">quitif</link>(<emphasis role="keywordtype">bool</emphasis>&#32;condition,&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg,&#32;...);
<anchor xml:id="_testlib_8h_source_1l02325"/>02325 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02326"/>02326 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Quit-functions&#32;aborts&#32;program&#32;with&#32;&lt;result&gt;&#32;and&#32;&lt;message&gt;:</emphasis>
<anchor xml:id="_testlib_8h_source_1l02327"/>02327 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;input/answer&#32;streams&#32;replace&#32;any&#32;result&#32;to&#32;FAIL.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02328"/>02328 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02329"/>02329 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95">quits</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;std::string&#32;msg);
<anchor xml:id="_testlib_8h_source_1l02330"/>02330 
<anchor xml:id="_testlib_8h_source_1l02331"/>02331 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02332"/>02332 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Checks&#32;condition&#32;and&#32;aborts&#32;a&#32;program&#32;if&#32;condition&#32;is&#32;false.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02333"/>02333 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Returns&#32;_wa&#32;for&#32;ouf&#32;and&#32;_fail&#32;on&#32;any&#32;other&#32;streams.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02334"/>02334 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02335"/>02335 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l02336"/>02336 &#32;&#32;&#32;&#32;__attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;3,&#32;4)))
<anchor xml:id="_testlib_8h_source_1l02337"/>02337 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l02338"/>02338 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a44a5027f6d7000c62ef27c6719f225ef">ensuref</link>(<emphasis role="keywordtype">bool</emphasis>&#32;cond,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;...);
<anchor xml:id="_testlib_8h_source_1l02339"/>02339 
<anchor xml:id="_testlib_8h_source_1l02340"/>02340 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ad961f49275f9e4d97b3ab6691f4b3d07">__testlib_ensure</link>(<emphasis role="keywordtype">bool</emphasis>&#32;cond,&#32;std::string&#32;message);
<anchor xml:id="_testlib_8h_source_1l02341"/>02341 
<anchor xml:id="_testlib_8h_source_1l02342"/>02342 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f">close</link>();
<anchor xml:id="_testlib_8h_source_1l02343"/>02343 
<anchor xml:id="_testlib_8h_source_1l02344"/><link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">02344</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>&#32;=&#32;INT_MAX;
<anchor xml:id="_testlib_8h_source_1l02345"/><link linkend="_struct_in_stream_1a582ee4c10e2543041466180e6134865a">02345</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1a582ee4c10e2543041466180e6134865a">OPEN_BRACKET</link>&#32;=&#32;char(11);
<anchor xml:id="_testlib_8h_source_1l02346"/><link linkend="_struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8">02346</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8">CLOSE_BRACKET</link>&#32;=&#32;char(17);
<anchor xml:id="_testlib_8h_source_1l02347"/>02347 
<anchor xml:id="_testlib_8h_source_1l02348"/><link linkend="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836">02348</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;<link linkend="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836">LightGray</link>&#32;=&#32;0x07;
<anchor xml:id="_testlib_8h_source_1l02349"/><link linkend="_struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c">02349</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;<link linkend="_struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c">LightRed</link>&#32;=&#32;0x0c;
<anchor xml:id="_testlib_8h_source_1l02350"/><link linkend="_struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4">02350</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;<link linkend="_struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4">LightCyan</link>&#32;=&#32;0x0b;
<anchor xml:id="_testlib_8h_source_1l02351"/><link linkend="_struct_in_stream_1a088a42a5a342bf630b6288c308d276e3">02351</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;<link linkend="_struct_in_stream_1a088a42a5a342bf630b6288c308d276e3">LightGreen</link>&#32;=&#32;0x0a;
<anchor xml:id="_testlib_8h_source_1l02352"/><link linkend="_struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad">02352</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;<link linkend="_struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad">LightYellow</link>&#32;=&#32;0x0e;
<anchor xml:id="_testlib_8h_source_1l02353"/>02353 
<anchor xml:id="_testlib_8h_source_1l02354"/>02354 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">textColor</link>(<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;color);
<anchor xml:id="_testlib_8h_source_1l02355"/>02355 
<anchor xml:id="_testlib_8h_source_1l02356"/>02356 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb">quitscr</link>(<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;color,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg);
<anchor xml:id="_testlib_8h_source_1l02357"/>02357 
<anchor xml:id="_testlib_8h_source_1l02358"/>02358 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">quitscrS</link>(<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;color,&#32;std::string&#32;msg);
<anchor xml:id="_testlib_8h_source_1l02359"/>02359 
<anchor xml:id="_testlib_8h_source_1l02360"/>02360 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a7920954e072895d70f2127ccc7af789d">xmlSafeWrite</link>(std::FILE&#32;*file,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg);
<anchor xml:id="_testlib_8h_source_1l02361"/>02361 
<anchor xml:id="_testlib_8h_source_1l02362"/>02362 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Skips&#32;UTF-8&#32;Byte&#32;Order&#32;Mark.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02363"/>02363 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a1ee5c101df11ec9fe00867379bf3937f">skipBom</link>();
<anchor xml:id="_testlib_8h_source_1l02364"/>02364 
<anchor xml:id="_testlib_8h_source_1l02365"/>02365 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l02366"/>02366 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd">InStream</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_in_stream">InStream</link>&#32;&amp;);
<anchor xml:id="_testlib_8h_source_1l02367"/>02367 
<anchor xml:id="_testlib_8h_source_1l02368"/>02368 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream">InStream</link>&#32;&amp;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_in_stream">InStream</link>&#32;&amp;);
<anchor xml:id="_testlib_8h_source_1l02369"/>02369 };
<anchor xml:id="_testlib_8h_source_1l02370"/>02370 
<anchor xml:id="_testlib_8h_source_1l02371"/><link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">02371</link> <link linkend="_struct_in_stream">InStream</link>&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>;
<anchor xml:id="_testlib_8h_source_1l02372"/><link linkend="_testlib_8h_1a93822943d6413c3eba20a27b9d31336b">02372</link> <link linkend="_struct_in_stream">InStream</link>&#32;<link linkend="_testlib_8h_1a93822943d6413c3eba20a27b9d31336b">ouf</link>;
<anchor xml:id="_testlib_8h_source_1l02373"/><link linkend="_testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac">02373</link> <link linkend="_struct_in_stream">InStream</link>&#32;<link linkend="_testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac">ans</link>;
<anchor xml:id="_testlib_8h_source_1l02374"/><link linkend="_testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e">02374</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e">appesMode</link>;
<anchor xml:id="_testlib_8h_source_1l02375"/><link linkend="_testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460">02375</link> std::string&#32;<link linkend="_testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460">appesModeEncoding</link>&#32;=&#32;<emphasis role="stringliteral">&quot;windows-1251&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02376"/><link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">02376</link> std::string&#32;<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>;
<anchor xml:id="_testlib_8h_source_1l02377"/><link linkend="_testlib_8h_1a00f5e960957827ed8846cf705f810473">02377</link> std::string&#32;<link linkend="_testlib_8h_1a00f5e960957827ed8846cf705f810473">checkerName</link>&#32;=&#32;<emphasis role="stringliteral">&quot;untitled&#32;checker&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02378"/><link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">02378</link> <link linkend="_classrandom__t">random_t</link>&#32;<link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">rnd</link>;
<anchor xml:id="_testlib_8h_source_1l02379"/><link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">02379</link> <link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158f">TTestlibMode</link>&#32;<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fa344a85f02f1ac239f9f648738a856eb6">_unknown</link>;
<anchor xml:id="_testlib_8h_source_1l02380"/><link linkend="_testlib_8h_1acb5280d0779ed8499169e3537ab20fd2">02380</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_testlib_8h_1acb5280d0779ed8499169e3537ab20fd2">__testlib_points</link>&#32;=&#32;std::numeric_limits&lt;float&gt;::infinity();
<anchor xml:id="_testlib_8h_source_1l02381"/>02381 
<anchor xml:id="_testlib_8h_source_1l02382"/><link linkend="_testlib_8h_1ad2806158bb273bfbae710825328a0887">02382</link> <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_testlib_8h_1ad2806158bb273bfbae710825328a0887">VALIDATOR_MAX_VARIABLE_COUNT</link>&#32;=&#32;255;
<anchor xml:id="_testlib_8h_source_1l02383"/>02383 
<anchor xml:id="_testlib_8h_source_1l02384"/><link linkend="_struct_validator_bounds_hit">02384</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_validator_bounds_hit">ValidatorBoundsHit</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l02385"/><link linkend="_struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128">02385</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128">EPS</link>;
<anchor xml:id="_testlib_8h_source_1l02386"/><link linkend="_struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59">02386</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59">minHit</link>;
<anchor xml:id="_testlib_8h_source_1l02387"/><link linkend="_struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c">02387</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c">maxHit</link>;
<anchor xml:id="_testlib_8h_source_1l02388"/>02388 
<anchor xml:id="_testlib_8h_source_1l02389"/><link linkend="_struct_validator_bounds_hit_1a9795fcb90f8ec3f0f069cb659e587281">02389</link> &#32;&#32;&#32;&#32;<link linkend="_struct_validator_bounds_hit_1a9795fcb90f8ec3f0f069cb659e587281">ValidatorBoundsHit</link>(<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59">minHit</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c">maxHit</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;:&#32;<link linkend="_struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59">minHit</link>(<link linkend="_struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59">minHit</link>),&#32;<link linkend="_struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c">maxHit</link>(<link linkend="_struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c">maxHit</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02390"/>02390 &#32;&#32;&#32;&#32;};
<anchor xml:id="_testlib_8h_source_1l02391"/>02391 
<anchor xml:id="_testlib_8h_source_1l02392"/><link linkend="_struct_validator_bounds_hit_1ac8444da34d710fac080ec0d30e49874a">02392</link> &#32;&#32;&#32;&#32;<link linkend="_struct_validator_bounds_hit">ValidatorBoundsHit</link>&#32;<link linkend="_struct_validator_bounds_hit_1ac8444da34d710fac080ec0d30e49874a">merge</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_validator_bounds_hit">ValidatorBoundsHit</link>&#32;&amp;validatorBoundsHit,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignoreMinBound,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignoreMaxBound)&#32;{
<anchor xml:id="_testlib_8h_source_1l02393"/>02393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_validator_bounds_hit_1a9795fcb90f8ec3f0f069cb659e587281">ValidatorBoundsHit</link>(
<anchor xml:id="_testlib_8h_source_1l02394"/>02394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_max(<link linkend="_struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59">minHit</link>,&#32;validatorBoundsHit.<link linkend="_struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59">minHit</link>)&#32;||&#32;ignoreMinBound,
<anchor xml:id="_testlib_8h_source_1l02395"/>02395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_max(<link linkend="_struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c">maxHit</link>,&#32;validatorBoundsHit.<link linkend="_struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c">maxHit</link>)&#32;||&#32;ignoreMaxBound
<anchor xml:id="_testlib_8h_source_1l02396"/>02396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_testlib_8h_source_1l02397"/>02397 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02398"/>02398 };
<anchor xml:id="_testlib_8h_source_1l02399"/>02399 
<anchor xml:id="_testlib_8h_source_1l02400"/><link linkend="_struct_constant_bound">02400</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_constant_bound">ConstantBound</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l02401"/><link linkend="_struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a">02401</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a">value</link>;
<anchor xml:id="_testlib_8h_source_1l02402"/><link linkend="_struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce">02402</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce">broken</link>;
<anchor xml:id="_testlib_8h_source_1l02403"/>02403 
<anchor xml:id="_testlib_8h_source_1l02404"/>02404 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l02405"/><link linkend="_struct_constant_bound_1a3d4ab449600fba6a75ad6c5f3584bade">02405</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_constant_bound_1a3d4ab449600fba6a75ad6c5f3584bade">adjust</link>(T&#32;t)&#32;{
<anchor xml:id="_testlib_8h_source_1l02406"/>02406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;t_string&#32;=&#32;std::to_string(t);
<anchor xml:id="_testlib_8h_source_1l02407"/>02407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t_string.length()&#32;&gt;=&#32;32)&#32;{
<anchor xml:id="_testlib_8h_source_1l02408"/>02408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce">broken</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02409"/>02409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a">value</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02410"/>02410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l02411"/>02411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce">broken</link>&#32;&amp;&amp;&#32;<link linkend="_struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a">value</link>.empty())
<anchor xml:id="_testlib_8h_source_1l02412"/>02412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a">value</link>&#32;=&#32;t_string;
<anchor xml:id="_testlib_8h_source_1l02413"/>02413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce">broken</link>&#32;&amp;&amp;&#32;<link linkend="_struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a">value</link>&#32;!=&#32;t_string)&#32;{
<anchor xml:id="_testlib_8h_source_1l02414"/>02414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce">broken</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02415"/>02415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a">value</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02416"/>02416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02417"/>02417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02418"/>02418 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02419"/>02419 
<anchor xml:id="_testlib_8h_source_1l02420"/><link linkend="_struct_constant_bound_1a6e761d07b67ec9dcf0ca867e261f1997">02420</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_constant_bound_1a6e761d07b67ec9dcf0ca867e261f1997">has_value</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02421"/>02421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a">value</link>.empty()&#32;&amp;&amp;&#32;!<link linkend="_struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce">broken</link>&#32;&amp;&amp;&#32;<link linkend="_struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a">value</link>.length()&#32;&lt;&#32;32;
<anchor xml:id="_testlib_8h_source_1l02422"/>02422 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02423"/>02423 };
<anchor xml:id="_testlib_8h_source_1l02424"/>02424 
<anchor xml:id="_testlib_8h_source_1l02425"/><link linkend="_struct_constant_bounds">02425</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_constant_bounds">ConstantBounds</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l02426"/><link linkend="_struct_constant_bounds_1a643edcd332e4e6a14c0bcc23353a6cb8">02426</link> &#32;&#32;&#32;&#32;<link linkend="_struct_constant_bound">ConstantBound</link>&#32;<link linkend="_struct_constant_bounds_1a643edcd332e4e6a14c0bcc23353a6cb8">lowerBound</link>;
<anchor xml:id="_testlib_8h_source_1l02427"/><link linkend="_struct_constant_bounds_1a33be60e2711bde6355bc4de05be2cb77">02427</link> &#32;&#32;&#32;&#32;<link linkend="_struct_constant_bound">ConstantBound</link>&#32;<link linkend="_struct_constant_bounds_1a33be60e2711bde6355bc4de05be2cb77">upperBound</link>;
<anchor xml:id="_testlib_8h_source_1l02428"/>02428 };
<anchor xml:id="_testlib_8h_source_1l02429"/>02429 
<anchor xml:id="_testlib_8h_source_1l02430"/>02430 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128">ValidatorBoundsHit::EPS</link>&#32;=&#32;1E-12;
<anchor xml:id="_testlib_8h_source_1l02431"/>02431 
<anchor xml:id="_testlib_8h_source_1l02432"/><link linkend="_class_validator">02432</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_validator">Validator</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l02433"/>02433 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l02434"/>02434 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;TEST_MARKUP_HEADER;
<anchor xml:id="_testlib_8h_source_1l02435"/>02435 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;TEST_CASE_OPEN_TAG;
<anchor xml:id="_testlib_8h_source_1l02436"/>02436 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;TEST_CASE_CLOSE_TAG;
<anchor xml:id="_testlib_8h_source_1l02437"/>02437 
<anchor xml:id="_testlib_8h_source_1l02438"/>02438 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_initialized;
<anchor xml:id="_testlib_8h_source_1l02439"/>02439 &#32;&#32;&#32;&#32;std::string&#32;_testset;
<anchor xml:id="_testlib_8h_source_1l02440"/>02440 &#32;&#32;&#32;&#32;std::string&#32;_group;
<anchor xml:id="_testlib_8h_source_1l02441"/>02441 
<anchor xml:id="_testlib_8h_source_1l02442"/>02442 &#32;&#32;&#32;&#32;std::string&#32;_testOverviewLogFileName;
<anchor xml:id="_testlib_8h_source_1l02443"/>02443 &#32;&#32;&#32;&#32;std::string&#32;_testMarkupFileName;
<anchor xml:id="_testlib_8h_source_1l02444"/>02444 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_testCase&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l02445"/>02445 &#32;&#32;&#32;&#32;std::string&#32;_testCaseFileName;
<anchor xml:id="_testlib_8h_source_1l02446"/>02446 
<anchor xml:id="_testlib_8h_source_1l02447"/>02447 &#32;&#32;&#32;&#32;std::map&lt;std::string,&#32;ValidatorBoundsHit&gt;&#32;_boundsHitByVariableName;
<anchor xml:id="_testlib_8h_source_1l02448"/>02448 &#32;&#32;&#32;&#32;std::map&lt;std::string,&#32;ConstantBounds&gt;&#32;_constantBoundsByVariableName;
<anchor xml:id="_testlib_8h_source_1l02449"/>02449 &#32;&#32;&#32;&#32;std::set&lt;std::string&gt;&#32;_features;
<anchor xml:id="_testlib_8h_source_1l02450"/>02450 &#32;&#32;&#32;&#32;std::set&lt;std::string&gt;&#32;_hitFeatures;
<anchor xml:id="_testlib_8h_source_1l02451"/>02451 &#32;&#32;&#32;&#32;std::set&lt;std::string&gt;&#32;_variables;
<anchor xml:id="_testlib_8h_source_1l02452"/>02452 
<anchor xml:id="_testlib_8h_source_1l02453"/>02453 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isVariableNameBoundsAnalyzable(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02454"/>02454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;=&#32;0;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;&lt;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.length();&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>++)
<anchor xml:id="_testlib_8h_source_1l02455"/>02455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>]&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)&#32;||&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>]&#32;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02456"/>02456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02457"/>02457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02458"/>02458 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02459"/>02459 
<anchor xml:id="_testlib_8h_source_1l02460"/>02460 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFeatureNameAnalyzable(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">featureName</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02461"/>02461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;=&#32;0;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;&lt;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">featureName</link>.length();&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>++)
<anchor xml:id="_testlib_8h_source_1l02462"/>02462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">featureName</link>[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>]&#32;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02463"/>02463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02464"/>02464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02465"/>02465 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02466"/>02466 
<anchor xml:id="_testlib_8h_source_1l02467"/>02467 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_testlib_8h_source_1l02468"/><link linkend="_class_validator_1a5059febd30a909b60107c591fe72eaca">02468</link> &#32;&#32;&#32;&#32;<link linkend="_class_validator_1a5059febd30a909b60107c591fe72eaca">Validator</link>()&#32;:&#32;_initialized(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">false</link>),&#32;_testset(<emphasis role="stringliteral">&quot;tests&quot;</emphasis>),&#32;_group()&#32;{
<anchor xml:id="_testlib_8h_source_1l02469"/>02469 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02470"/>02470 
<anchor xml:id="_testlib_8h_source_1l02471"/><link linkend="_class_validator_1aeb0b49097c1087062e53aac935028b47">02471</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1aeb0b49097c1087062e53aac935028b47">initialize</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02472"/>02472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_initialized&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02473"/>02473 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02474"/>02474 
<anchor xml:id="_testlib_8h_source_1l02475"/><link linkend="_class_validator_1a302f9e1dada936024fbb9ba1df4584fa">02475</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a302f9e1dada936024fbb9ba1df4584fa">testset</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l02476"/>02476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_initialized)
<anchor xml:id="_testlib_8h_source_1l02477"/>02477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Validator&#32;should&#32;be&#32;initialized&#32;with&#32;registerValidation(argc,&#32;argv)&#32;instead&#32;of&#32;registerValidation()&#32;to&#32;support&#32;validator.testset()&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02478"/>02478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_testset;
<anchor xml:id="_testlib_8h_source_1l02479"/>02479 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02480"/>02480 
<anchor xml:id="_testlib_8h_source_1l02481"/><link linkend="_class_validator_1a6e369a966da7b21efa5a9f43c05c0bc4">02481</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a6e369a966da7b21efa5a9f43c05c0bc4">group</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l02482"/>02482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_initialized)
<anchor xml:id="_testlib_8h_source_1l02483"/>02483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Validator&#32;should&#32;be&#32;initialized&#32;with&#32;registerValidation(argc,&#32;argv)&#32;instead&#32;of&#32;registerValidation()&#32;to&#32;support&#32;validator.group()&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02484"/>02484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_group;
<anchor xml:id="_testlib_8h_source_1l02485"/>02485 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02486"/>02486 
<anchor xml:id="_testlib_8h_source_1l02487"/><link linkend="_class_validator_1a487fd29bc4d2e64ad3dfe1d02cde353b">02487</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a487fd29bc4d2e64ad3dfe1d02cde353b">testOverviewLogFileName</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l02488"/>02488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_testOverviewLogFileName;
<anchor xml:id="_testlib_8h_source_1l02489"/>02489 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02490"/>02490 
<anchor xml:id="_testlib_8h_source_1l02491"/><link linkend="_class_validator_1a381a78834499e48587efca2376747ce8">02491</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a381a78834499e48587efca2376747ce8">testMarkupFileName</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l02492"/>02492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_testMarkupFileName;
<anchor xml:id="_testlib_8h_source_1l02493"/>02493 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02494"/>02494 
<anchor xml:id="_testlib_8h_source_1l02495"/><link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">02495</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCase</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l02496"/>02496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_testCase;
<anchor xml:id="_testlib_8h_source_1l02497"/>02497 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02498"/>02498 
<anchor xml:id="_testlib_8h_source_1l02499"/><link linkend="_class_validator_1a5968d80e9fb476b8cd4315a51318e3c4">02499</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a5968d80e9fb476b8cd4315a51318e3c4">testCaseFileName</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l02500"/>02500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_testCaseFileName;
<anchor xml:id="_testlib_8h_source_1l02501"/>02501 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02502"/>02502 
<anchor xml:id="_testlib_8h_source_1l02503"/><link linkend="_class_validator_1a98abe366b29d8445a77b0a8467dceb41">02503</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1a98abe366b29d8445a77b0a8467dceb41">setTestset</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_validator_1a302f9e1dada936024fbb9ba1df4584fa">testset</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02504"/>02504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_testset&#32;=&#32;<link linkend="_class_validator_1a302f9e1dada936024fbb9ba1df4584fa">testset</link>;
<anchor xml:id="_testlib_8h_source_1l02505"/>02505 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02506"/>02506 
<anchor xml:id="_testlib_8h_source_1l02507"/><link linkend="_class_validator_1aad2457aadd48a75837e2770aa6c380bb">02507</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1aad2457aadd48a75837e2770aa6c380bb">setGroup</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_validator_1a6e369a966da7b21efa5a9f43c05c0bc4">group</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02508"/>02508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_group&#32;=&#32;<link linkend="_class_validator_1a6e369a966da7b21efa5a9f43c05c0bc4">group</link>;
<anchor xml:id="_testlib_8h_source_1l02509"/>02509 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02510"/>02510 
<anchor xml:id="_testlib_8h_source_1l02511"/><link linkend="_class_validator_1a759723fc94643a78cc0b14da68b0107e">02511</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1a759723fc94643a78cc0b14da68b0107e">setTestOverviewLogFileName</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_validator_1a487fd29bc4d2e64ad3dfe1d02cde353b">testOverviewLogFileName</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02512"/>02512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_testOverviewLogFileName&#32;=&#32;<link linkend="_class_validator_1a487fd29bc4d2e64ad3dfe1d02cde353b">testOverviewLogFileName</link>;
<anchor xml:id="_testlib_8h_source_1l02513"/>02513 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02514"/>02514 
<anchor xml:id="_testlib_8h_source_1l02515"/><link linkend="_class_validator_1a82a648685268dc91e9bf48f1c4fb8d57">02515</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1a82a648685268dc91e9bf48f1c4fb8d57">setTestMarkupFileName</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_validator_1a381a78834499e48587efca2376747ce8">testMarkupFileName</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02516"/>02516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_testMarkupFileName&#32;=&#32;<link linkend="_class_validator_1a381a78834499e48587efca2376747ce8">testMarkupFileName</link>;
<anchor xml:id="_testlib_8h_source_1l02517"/>02517 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02518"/>02518 
<anchor xml:id="_testlib_8h_source_1l02519"/><link linkend="_class_validator_1ab4fd3b0dbe4e35310a9c7b0b7c2a411d">02519</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1ab4fd3b0dbe4e35310a9c7b0b7c2a411d">setTestCase</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCase</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02520"/>02520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_testCase&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCase</link>;
<anchor xml:id="_testlib_8h_source_1l02521"/>02521 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02522"/>02522 
<anchor xml:id="_testlib_8h_source_1l02523"/><link linkend="_class_validator_1abe2f949d8c9bff6fe61e0f9fab6e68e4">02523</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1abe2f949d8c9bff6fe61e0f9fab6e68e4">setTestCaseFileName</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_validator_1a5968d80e9fb476b8cd4315a51318e3c4">testCaseFileName</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02524"/>02524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_testCaseFileName&#32;=&#32;<link linkend="_class_validator_1a5968d80e9fb476b8cd4315a51318e3c4">testCaseFileName</link>;
<anchor xml:id="_testlib_8h_source_1l02525"/>02525 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02526"/>02526 
<anchor xml:id="_testlib_8h_source_1l02527"/><link linkend="_class_validator_1af116e261ded245f21c249bccd6db5628">02527</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1af116e261ded245f21c249bccd6db5628">prepVariableName</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02528"/>02528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.length()&#32;&gt;=&#32;2&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>&#32;!=&#32;<emphasis role="stringliteral">&quot;~~&quot;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02529"/>02529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>[0]&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.back()&#32;!=&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02530"/>02530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.substr(1);
<anchor xml:id="_testlib_8h_source_1l02531"/>02531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>[0]&#32;!=&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.back()&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02532"/>02532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.substr(0,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.length()&#32;-&#32;1);
<anchor xml:id="_testlib_8h_source_1l02533"/>02533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>[0]&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.back()&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02534"/>02534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.substr(1,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.length()&#32;-&#32;2);
<anchor xml:id="_testlib_8h_source_1l02535"/>02535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02536"/>02536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>;
<anchor xml:id="_testlib_8h_source_1l02537"/>02537 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02538"/>02538 
<anchor xml:id="_testlib_8h_source_1l02539"/><link linkend="_class_validator_1aac12f8f1d2ce11e029f6d370d4706373">02539</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_validator_1aac12f8f1d2ce11e029f6d370d4706373">ignoreMinBound</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02540"/>02540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.length()&#32;&gt;=&#32;2&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>&#32;!=&#32;<emphasis role="stringliteral">&quot;~~&quot;</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>[0]&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02541"/>02541 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02542"/>02542 
<anchor xml:id="_testlib_8h_source_1l02543"/><link linkend="_class_validator_1ad076fd6410b4468890720fb73ae7045a">02543</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_validator_1ad076fd6410b4468890720fb73ae7045a">ignoreMaxBound</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02544"/>02544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.length()&#32;&gt;=&#32;2&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>&#32;!=&#32;<emphasis role="stringliteral">&quot;~~&quot;</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>.back()&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02545"/>02545 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02546"/>02546 
<anchor xml:id="_testlib_8h_source_1l02547"/><link linkend="_class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd">02547</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd">addBoundsHit</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>,&#32;<link linkend="_struct_validator_bounds_hit">ValidatorBoundsHit</link>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">boundsHit</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02548"/>02548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isVariableNameBoundsAnalyzable(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>)
<anchor xml:id="_testlib_8h_source_1l02549"/>02549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_boundsHitByVariableName.size()&#32;&lt;&#32;<link linkend="_testlib_8h_1ad2806158bb273bfbae710825328a0887">VALIDATOR_MAX_VARIABLE_COUNT</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02550"/>02550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">preparedVariableName</link>&#32;=&#32;<link linkend="_class_validator_1af116e261ded245f21c249bccd6db5628">prepVariableName</link>(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>);
<anchor xml:id="_testlib_8h_source_1l02551"/>02551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_boundsHitByVariableName[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">preparedVariableName</link>]&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">boundsHit</link>.merge(_boundsHitByVariableName[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">preparedVariableName</link>],
<anchor xml:id="_testlib_8h_source_1l02552"/>02552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1aac12f8f1d2ce11e029f6d370d4706373">ignoreMinBound</link>(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>),&#32;<link linkend="_class_validator_1ad076fd6410b4468890720fb73ae7045a">ignoreMaxBound</link>(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>));
<anchor xml:id="_testlib_8h_source_1l02553"/>02553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02554"/>02554 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02555"/>02555 
<anchor xml:id="_testlib_8h_source_1l02556"/><link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">02556</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02557"/>02557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isVariableNameBoundsAnalyzable(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>)
<anchor xml:id="_testlib_8h_source_1l02558"/>02558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_variables.size()&#32;&lt;&#32;<link linkend="_testlib_8h_1ad2806158bb273bfbae710825328a0887">VALIDATOR_MAX_VARIABLE_COUNT</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02559"/>02559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">preparedVariableName</link>&#32;=&#32;<link linkend="_class_validator_1af116e261ded245f21c249bccd6db5628">prepVariableName</link>(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>);
<anchor xml:id="_testlib_8h_source_1l02560"/>02560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_variables.insert(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">preparedVariableName</link>);
<anchor xml:id="_testlib_8h_source_1l02561"/>02561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02562"/>02562 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02563"/>02563 
<anchor xml:id="_testlib_8h_source_1l02564"/><link linkend="_class_validator_1a40810a5c5baf5da95aa391f858a9e9a6">02564</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a40810a5c5baf5da95aa391f858a9e9a6">getVariablesLog</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02565"/>02565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>;
<anchor xml:id="_testlib_8h_source_1l02566"/>02566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>:&#32;_variables)
<anchor xml:id="_testlib_8h_source_1l02567"/>02567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;variable&#32;\&quot;&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;\n&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02568"/>02568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>;
<anchor xml:id="_testlib_8h_source_1l02569"/>02569 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02570"/>02570 
<anchor xml:id="_testlib_8h_source_1l02571"/>02571 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l02572"/><link linkend="_class_validator_1aaf48c6b401e8417c3da493f28ca65061">02572</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1aaf48c6b401e8417c3da493f28ca65061">adjustConstantBounds</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">T</link>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">lower</link>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">T</link>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">upper</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02573"/>02573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isVariableNameBoundsAnalyzable(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>)
<anchor xml:id="_testlib_8h_source_1l02574"/>02574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_constantBoundsByVariableName.size()&#32;&lt;&#32;<link linkend="_testlib_8h_1ad2806158bb273bfbae710825328a0887">VALIDATOR_MAX_VARIABLE_COUNT</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02575"/>02575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">preparedVariableName</link>&#32;=&#32;<link linkend="_class_validator_1af116e261ded245f21c249bccd6db5628">prepVariableName</link>(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">variableName</link>);
<anchor xml:id="_testlib_8h_source_1l02576"/>02576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_constantBoundsByVariableName[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">preparedVariableName</link>].lowerBound.adjust(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">lower</link>);
<anchor xml:id="_testlib_8h_source_1l02577"/>02577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_constantBoundsByVariableName[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">preparedVariableName</link>].upperBound.adjust(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">upper</link>);
<anchor xml:id="_testlib_8h_source_1l02578"/>02578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02579"/>02579 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02580"/>02580 
<anchor xml:id="_testlib_8h_source_1l02581"/><link linkend="_class_validator_1a2c32c475bb31fb5ca96ed0ac3921417d">02581</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a2c32c475bb31fb5ca96ed0ac3921417d">getBoundsHitLog</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02582"/>02582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>;
<anchor xml:id="_testlib_8h_source_1l02583"/>02583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::map&lt;std::string,&#32;ValidatorBoundsHit&gt;::iterator&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;=&#32;_boundsHitByVariableName.begin();
<anchor xml:id="_testlib_8h_source_1l02584"/>02584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;!=&#32;_boundsHitByVariableName.end();
<anchor xml:id="_testlib_8h_source_1l02585"/>02585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>++)&#32;{
<anchor xml:id="_testlib_8h_source_1l02586"/>02586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;first&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;:&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02587"/>02587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;second.minHit)
<anchor xml:id="_testlib_8h_source_1l02588"/>02588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;min-value-hit&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02589"/>02589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;second.maxHit)
<anchor xml:id="_testlib_8h_source_1l02590"/>02590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;max-value-hit&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02591"/>02591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02592"/>02592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02593"/>02593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>;
<anchor xml:id="_testlib_8h_source_1l02594"/>02594 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02595"/>02595 
<anchor xml:id="_testlib_8h_source_1l02596"/><link linkend="_class_validator_1a71f5bf142881342a9967da8671c35676">02596</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a71f5bf142881342a9967da8671c35676">getConstantBoundsLog</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02597"/>02597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>;
<anchor xml:id="_testlib_8h_source_1l02598"/>02598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::map&lt;std::string,&#32;ConstantBounds&gt;::iterator&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;=&#32;_constantBoundsByVariableName.begin();
<anchor xml:id="_testlib_8h_source_1l02599"/>02599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;!=&#32;_constantBoundsByVariableName.end();
<anchor xml:id="_testlib_8h_source_1l02600"/>02600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>++)&#32;{
<anchor xml:id="_testlib_8h_source_1l02601"/>02601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;second.lowerBound.has_value()&#32;||&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;second.upperBound.has_value())&#32;{
<anchor xml:id="_testlib_8h_source_1l02602"/>02602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;constant-bounds&#32;\&quot;&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;first&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;:&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02603"/>02603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;second.lowerBound.has_value())
<anchor xml:id="_testlib_8h_source_1l02604"/>02604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;second.lowerBound.value;
<anchor xml:id="_testlib_8h_source_1l02605"/>02605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l02606"/>02606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;?&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02607"/>02607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;second.upperBound.has_value())
<anchor xml:id="_testlib_8h_source_1l02608"/>02608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>-&gt;second.upperBound.value;
<anchor xml:id="_testlib_8h_source_1l02609"/>02609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l02610"/>02610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;?&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02611"/>02611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02612"/>02612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02613"/>02613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02614"/>02614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>;
<anchor xml:id="_testlib_8h_source_1l02615"/>02615 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02616"/>02616 
<anchor xml:id="_testlib_8h_source_1l02617"/><link linkend="_class_validator_1ab8c173d330b6ead6d5f51587213cfe7b">02617</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1ab8c173d330b6ead6d5f51587213cfe7b">getFeaturesLog</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02618"/>02618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>;
<anchor xml:id="_testlib_8h_source_1l02619"/>02619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::set&lt;std::string&gt;::iterator&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;=&#32;_features.begin();
<anchor xml:id="_testlib_8h_source_1l02620"/>02620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;!=&#32;_features.end();
<anchor xml:id="_testlib_8h_source_1l02621"/>02621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>++)&#32;{
<anchor xml:id="_testlib_8h_source_1l02622"/>02622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;feature&#32;\&quot;&quot;</emphasis>&#32;+&#32;*<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;:&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02623"/>02623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_hitFeatures.count(*<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>))
<anchor xml:id="_testlib_8h_source_1l02624"/>02624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;hit&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02625"/>02625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>&#32;+=&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02626"/>02626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02627"/>02627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">result</link>;
<anchor xml:id="_testlib_8h_source_1l02628"/>02628 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02629"/>02629 
<anchor xml:id="_testlib_8h_source_1l02630"/><link linkend="_class_validator_1ac71a3aab99085ef6da45357db1d0fd5a">02630</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1ac71a3aab99085ef6da45357db1d0fd5a">writeTestOverviewLog</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02631"/>02631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_testOverviewLogFileName.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l02632"/>02632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fileName</link>(_testOverviewLogFileName);
<anchor xml:id="_testlib_8h_source_1l02633"/>02633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_testOverviewLogFileName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02634"/>02634 
<anchor xml:id="_testlib_8h_source_1l02635"/>02635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">FILE</link>*&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>;
<anchor xml:id="_testlib_8h_source_1l02636"/>02636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02637"/>02637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fileName</link>&#32;==&#32;<emphasis role="stringliteral">&quot;stdout&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02638"/>02638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">stdout</link>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02639"/>02639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fileName</link>&#32;==&#32;<emphasis role="stringliteral">&quot;stderr&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02640"/>02640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">stderr</link>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02641"/>02641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l02642"/>02642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fopen</link>(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fileName</link>.c_str(),&#32;<emphasis role="stringliteral">&quot;wb&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02643"/>02643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">NULL</link>&#32;==&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>)
<anchor xml:id="_testlib_8h_source_1l02644"/>02644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Validator::writeTestOverviewLog:&#32;can&apos;t&#32;write&#32;test&#32;overview&#32;log&#32;to&#32;(&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fileName</link>&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02645"/>02645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02646"/>02646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fprintf</link>(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>,&#32;<emphasis role="stringliteral">&quot;%s%s%s%s&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l02647"/>02647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a2c32c475bb31fb5ca96ed0ac3921417d">getBoundsHitLog</link>().<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c_str</link>(),
<anchor xml:id="_testlib_8h_source_1l02648"/>02648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1ab8c173d330b6ead6d5f51587213cfe7b">getFeaturesLog</link>().<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c_str</link>(),
<anchor xml:id="_testlib_8h_source_1l02649"/>02649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a71f5bf142881342a9967da8671c35676">getConstantBoundsLog</link>().<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c_str</link>(),
<anchor xml:id="_testlib_8h_source_1l02650"/>02650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a40810a5c5baf5da95aa391f858a9e9a6">getVariablesLog</link>().<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c_str</link>());
<anchor xml:id="_testlib_8h_source_1l02651"/>02651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fflush(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>);
<anchor xml:id="_testlib_8h_source_1l02652"/>02652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>)
<anchor xml:id="_testlib_8h_source_1l02653"/>02653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::fclose(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>))
<anchor xml:id="_testlib_8h_source_1l02654"/>02654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Validator::writeTestOverviewLog:&#32;can&apos;t&#32;close&#32;test&#32;overview&#32;log&#32;file&#32;(&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fileName</link>&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02655"/>02655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02656"/>02656 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02657"/>02657 
<anchor xml:id="_testlib_8h_source_1l02658"/><link linkend="_class_validator_1aca38cbb740f48b16c3d5efa5a2c9fc0b">02658</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1aca38cbb740f48b16c3d5efa5a2c9fc0b">writeTestMarkup</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02659"/>02659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_testMarkupFileName.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l02660"/>02660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;readChars&#32;=&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd">getReadChars</link>();
<anchor xml:id="_testlib_8h_source_1l02661"/>02661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!readChars.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l02662"/>02662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">markup</link>(TEST_MARKUP_HEADER);
<anchor xml:id="_testlib_8h_source_1l02663"/>02663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;=&#32;0;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;&lt;&#32;readChars.size();&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>++)&#32;{
<anchor xml:id="_testlib_8h_source_1l02664"/>02664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>&#32;=&#32;readChars[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>];
<anchor xml:id="_testlib_8h_source_1l02665"/>02665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;+&#32;1&#32;==&#32;readChars.size()&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>&#32;==&#32;-1)
<anchor xml:id="_testlib_8h_source_1l02666"/>02666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02667"/>02667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>&#32;&lt;=&#32;256)&#32;{
<anchor xml:id="_testlib_8h_source_1l02668"/>02668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">cc</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">char</link>(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>);
<anchor xml:id="_testlib_8h_source_1l02669"/>02669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">cc</link>&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>&#32;||&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">cc</link>&#32;==&#32;<emphasis role="charliteral">&apos;!&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02670"/>02670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">markup</link>&#32;+=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02671"/>02671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">markup</link>&#32;+=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">cc</link>;
<anchor xml:id="_testlib_8h_source_1l02672"/>02672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l02673"/>02673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">markup</link>&#32;+=&#32;TEST_CASE_OPEN_TAG;
<anchor xml:id="_testlib_8h_source_1l02674"/>02674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">markup</link>&#32;+=&#32;toString(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>&#32;-&#32;256);
<anchor xml:id="_testlib_8h_source_1l02675"/>02675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">markup</link>&#32;+=&#32;TEST_CASE_CLOSE_TAG;
<anchor xml:id="_testlib_8h_source_1l02676"/>02676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02677"/>02677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02678"/>02678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">FILE</link>*&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>;
<anchor xml:id="_testlib_8h_source_1l02679"/>02679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02680"/>02680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_testMarkupFileName&#32;==&#32;<emphasis role="stringliteral">&quot;stdout&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02681"/>02681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">stdout</link>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02682"/>02682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_testMarkupFileName&#32;==&#32;<emphasis role="stringliteral">&quot;stderr&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02683"/>02683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">stderr</link>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02684"/>02684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l02685"/>02685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fopen</link>(_testMarkupFileName.c_str(),&#32;<emphasis role="stringliteral">&quot;wb&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02686"/>02686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">NULL</link>&#32;==&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>)
<anchor xml:id="_testlib_8h_source_1l02687"/>02687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Validator::writeTestMarkup:&#32;can&apos;t&#32;write&#32;test&#32;markup&#32;to&#32;(&quot;</emphasis>&#32;+&#32;_testMarkupFileName&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02688"/>02688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02689"/>02689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">markup</link>.c_str());
<anchor xml:id="_testlib_8h_source_1l02690"/>02690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fflush(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>);
<anchor xml:id="_testlib_8h_source_1l02691"/>02691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>)
<anchor xml:id="_testlib_8h_source_1l02692"/>02692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::fclose(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>))
<anchor xml:id="_testlib_8h_source_1l02693"/>02693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Validator::writeTestMarkup:&#32;can&apos;t&#32;close&#32;test&#32;markup&#32;file&#32;(&quot;</emphasis>&#32;+&#32;_testCaseFileName&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02694"/>02694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02695"/>02695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02696"/>02696 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02697"/>02697 
<anchor xml:id="_testlib_8h_source_1l02698"/><link linkend="_class_validator_1ac0567612d6c3449a42bccd3930cda249">02698</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1ac0567612d6c3449a42bccd3930cda249">writeTestCase</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02699"/>02699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_testCase&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l02700"/>02700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;readChars&#32;=&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd">getReadChars</link>();
<anchor xml:id="_testlib_8h_source_1l02701"/>02701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!readChars.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l02702"/>02702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">content</link>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCaseContent</link>;
<anchor xml:id="_testlib_8h_source_1l02703"/>02703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">matchedTestCase</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02704"/>02704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;=&#32;0;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;&lt;&#32;readChars.size();&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>++)&#32;{
<anchor xml:id="_testlib_8h_source_1l02705"/>02705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>&#32;=&#32;readChars[<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>];
<anchor xml:id="_testlib_8h_source_1l02706"/>02706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">i</link>&#32;+&#32;1&#32;==&#32;readChars.size()&#32;&amp;&amp;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>&#32;==&#32;-1)
<anchor xml:id="_testlib_8h_source_1l02707"/>02707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02708"/>02708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>&#32;&lt;=&#32;256)
<anchor xml:id="_testlib_8h_source_1l02709"/>02709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">content</link>&#32;+=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">char</link>(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>);
<anchor xml:id="_testlib_8h_source_1l02710"/>02710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l02711"/>02711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">matchedTestCase</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02712"/>02712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCaseContent</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">content</link>;
<anchor xml:id="_testlib_8h_source_1l02713"/>02713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">matchedTestCase</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02714"/>02714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02715"/>02715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">content</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02716"/>02716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCase</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">c</link>&#32;-&#32;256;
<anchor xml:id="_testlib_8h_source_1l02717"/>02717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCase</link>&#32;==&#32;_testCase)
<anchor xml:id="_testlib_8h_source_1l02718"/>02718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">matchedTestCase</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02719"/>02719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02720"/>02720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02721"/>02721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">matchedTestCase</link>)
<anchor xml:id="_testlib_8h_source_1l02722"/>02722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCaseContent</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">content</link>;
<anchor xml:id="_testlib_8h_source_1l02723"/>02723 
<anchor xml:id="_testlib_8h_source_1l02724"/>02724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCaseContent</link>.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l02725"/>02725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">FILE</link>*&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>;
<anchor xml:id="_testlib_8h_source_1l02726"/>02726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02727"/>02727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_testCaseFileName.empty()&#32;||&#32;_testCaseFileName&#32;==&#32;<emphasis role="stringliteral">&quot;stdout&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02728"/>02728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">stdout</link>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02729"/>02729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_testCaseFileName&#32;==&#32;<emphasis role="stringliteral">&quot;stderr&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l02730"/>02730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">stderr</link>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02731"/>02731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l02732"/>02732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>&#32;=&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">fopen</link>(_testCaseFileName.c_str(),&#32;<emphasis role="stringliteral">&quot;wb&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02733"/>02733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">NULL</link>&#32;==&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>)
<anchor xml:id="_testlib_8h_source_1l02734"/>02734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Validator::writeTestCase:&#32;can&apos;t&#32;write&#32;test&#32;case&#32;to&#32;(&quot;</emphasis>&#32;+&#32;_testCaseFileName&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02735"/>02735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02736"/>02736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">testCaseContent</link>.c_str());
<anchor xml:id="_testlib_8h_source_1l02737"/>02737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fflush(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>);
<anchor xml:id="_testlib_8h_source_1l02738"/>02738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">standard_file</link>)
<anchor xml:id="_testlib_8h_source_1l02739"/>02739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::fclose(<link linkend="_class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c">f</link>))
<anchor xml:id="_testlib_8h_source_1l02740"/>02740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Validator::writeTestCase:&#32;can&apos;t&#32;close&#32;test&#32;case&#32;file&#32;(&quot;</emphasis>&#32;+&#32;_testCaseFileName&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02741"/>02741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02742"/>02742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02743"/>02743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02744"/>02744 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02745"/>02745 
<anchor xml:id="_testlib_8h_source_1l02746"/><link linkend="_class_validator_1ad584b1395f153ccfedf884750ff10f70">02746</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1ad584b1395f153ccfedf884750ff10f70">addFeature</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02747"/>02747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_features.count(<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>))
<anchor xml:id="_testlib_8h_source_1l02748"/>02748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Feature&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;registered&#32;twice.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02749"/>02749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isFeatureNameAnalyzable(<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>))
<anchor xml:id="_testlib_8h_source_1l02750"/>02750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Feature&#32;name&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;contains&#32;restricted&#32;characters.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02751"/>02751 
<anchor xml:id="_testlib_8h_source_1l02752"/>02752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_features.insert(<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>);
<anchor xml:id="_testlib_8h_source_1l02753"/>02753 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02754"/>02754 
<anchor xml:id="_testlib_8h_source_1l02755"/><link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">02755</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02756"/>02756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isFeatureNameAnalyzable(<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>))
<anchor xml:id="_testlib_8h_source_1l02757"/>02757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Feature&#32;name&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;contains&#32;restricted&#32;characters.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02758"/>02758 
<anchor xml:id="_testlib_8h_source_1l02759"/>02759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_features.count(<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>))
<anchor xml:id="_testlib_8h_source_1l02760"/>02760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Feature&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;didn&apos;t&#32;registered&#32;via&#32;addFeature(feature).&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02761"/>02761 
<anchor xml:id="_testlib_8h_source_1l02762"/>02762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_hitFeatures.insert(<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>);
<anchor xml:id="_testlib_8h_source_1l02763"/>02763 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02764"/><link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">02764</link> }&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>;
<anchor xml:id="_testlib_8h_source_1l02765"/>02765 
<anchor xml:id="_testlib_8h_source_1l02766"/>02766 <emphasis role="keyword">const</emphasis>&#32;std::string&#32;Validator::TEST_MARKUP_HEADER&#32;=&#32;<emphasis role="stringliteral">&quot;MU\xF3\x01&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02767"/>02767 <emphasis role="keyword">const</emphasis>&#32;std::string&#32;Validator::TEST_CASE_OPEN_TAG&#32;=&#32;<emphasis role="stringliteral">&quot;!c&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02768"/>02768 <emphasis role="keyword">const</emphasis>&#32;std::string&#32;Validator::TEST_CASE_CLOSE_TAG&#32;=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02769"/>02769 
<anchor xml:id="_testlib_8h_source_1l02770"/><link linkend="_struct_testlib_finalize_guard">02770</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_testlib_finalize_guard">TestlibFinalizeGuard</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l02771"/><link linkend="_struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00">02771</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00">alive</link>;
<anchor xml:id="_testlib_8h_source_1l02772"/><link linkend="_struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1">02772</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1">registered</link>;
<anchor xml:id="_testlib_8h_source_1l02773"/>02773 
<anchor xml:id="_testlib_8h_source_1l02774"/><link linkend="_struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186">02774</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186">quitCount</link>,&#32;<link linkend="_struct_testlib_finalize_guard_1af46c17590b5a5f22927cf208e00cb704">readEofCount</link>;
<anchor xml:id="_testlib_8h_source_1l02775"/>02775 
<anchor xml:id="_testlib_8h_source_1l02776"/><link linkend="_struct_testlib_finalize_guard_1ae2ec335476d755ccc7ef9d6b546d7aaa">02776</link> &#32;&#32;&#32;&#32;<link linkend="_struct_testlib_finalize_guard_1ae2ec335476d755ccc7ef9d6b546d7aaa">TestlibFinalizeGuard</link>()&#32;:&#32;<link linkend="_struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186">quitCount</link>(0),&#32;<link linkend="_struct_testlib_finalize_guard_1af46c17590b5a5f22927cf208e00cb704">readEofCount</link>(0)&#32;{
<anchor xml:id="_testlib_8h_source_1l02777"/>02777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;operations.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02778"/>02778 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02779"/>02779 
<anchor xml:id="_testlib_8h_source_1l02780"/><link linkend="_struct_testlib_finalize_guard_1a45a3464e297663a49405ec2218a81565">02780</link> &#32;&#32;&#32;&#32;<link linkend="_struct_testlib_finalize_guard_1a45a3464e297663a49405ec2218a81565">~TestlibFinalizeGuard</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02781"/>02781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_alive&#32;=&#32;<link linkend="_struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00">alive</link>;
<anchor xml:id="_testlib_8h_source_1l02782"/>02782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00">alive</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02783"/>02783 
<anchor xml:id="_testlib_8h_source_1l02784"/>02784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_alive)&#32;{
<anchor xml:id="_testlib_8h_source_1l02785"/>02785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;==&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fad23f42b9c6d23ab5679d79151c4585ff">_checker</link>&#32;&amp;&amp;&#32;<link linkend="_struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186">quitCount</link>&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l02786"/>02786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Checker&#32;must&#32;end&#32;with&#32;quit&#32;or&#32;quitf&#32;call.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02787"/>02787 
<anchor xml:id="_testlib_8h_source_1l02788"/>02788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;==&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f">_validator</link>&#32;&amp;&amp;&#32;<link linkend="_struct_testlib_finalize_guard_1af46c17590b5a5f22927cf208e00cb704">readEofCount</link>&#32;==&#32;0&#32;&amp;&amp;&#32;<link linkend="_struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186">quitCount</link>&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l02789"/>02789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Validator&#32;must&#32;end&#32;with&#32;readEof&#32;call.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02790"/>02790 
<anchor xml:id="_testlib_8h_source_1l02791"/>02791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;opts&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02792"/>02792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;autoEnsureNoUnusedOpts();
<anchor xml:id="_testlib_8h_source_1l02793"/>02793 
<anchor xml:id="_testlib_8h_source_1l02794"/>02794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1">registered</link>)
<anchor xml:id="_testlib_8h_source_1l02795"/>02795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Call&#32;register-function&#32;in&#32;the&#32;first&#32;line&#32;of&#32;the&#32;main&#32;(registerTestlibCmd&#32;or&#32;other&#32;similar)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02796"/>02796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02797"/>02797 
<anchor xml:id="_testlib_8h_source_1l02798"/>02798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f">__testlib_exitCode</link>&#32;==&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l02799"/>02799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac71a3aab99085ef6da45357db1d0fd5a">writeTestOverviewLog</link>();
<anchor xml:id="_testlib_8h_source_1l02800"/>02800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1aca38cbb740f48b16c3d5efa5a2c9fc0b">writeTestMarkup</link>();
<anchor xml:id="_testlib_8h_source_1l02801"/>02801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac0567612d6c3449a42bccd3930cda249">writeTestCase</link>();
<anchor xml:id="_testlib_8h_source_1l02802"/>02802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02803"/>02803 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02804"/>02804 
<anchor xml:id="_testlib_8h_source_1l02805"/>02805 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l02806"/>02806 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;opts&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02807"/>02807 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;autoEnsureNoUnusedOpts();
<anchor xml:id="_testlib_8h_source_1l02808"/>02808 };
<anchor xml:id="_testlib_8h_source_1l02809"/>02809 
<anchor xml:id="_testlib_8h_source_1l02810"/>02810 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00">TestlibFinalizeGuard::alive</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02811"/>02811 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1">TestlibFinalizeGuard::registered</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02812"/>02812 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="_struct_testlib_finalize_guard">TestlibFinalizeGuard</link>&#32;<link linkend="_testlib_8h_1a576c1be9a11f2136d2bfa955394d4575">testlibFinalizeGuard</link>;
<anchor xml:id="_testlib_8h_source_1l02813"/>02813 
<anchor xml:id="_testlib_8h_source_1l02814"/>02814 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l02815"/>02815 <emphasis role="comment">&#32;*&#32;Call&#32;it&#32;to&#32;disable&#32;checks&#32;on&#32;finalization.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02816"/>02816 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02817"/><link linkend="_testlib_8h_1a2c40237203009ff06974b25b65030d68">02817</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a2c40237203009ff06974b25b65030d68">disableFinalizeGuard</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02818"/>02818 &#32;&#32;&#32;&#32;<link linkend="_struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00">TestlibFinalizeGuard::alive</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02819"/>02819 }
<anchor xml:id="_testlib_8h_source_1l02820"/>02820 
<anchor xml:id="_testlib_8h_source_1l02821"/>02821 <emphasis role="comment">/*&#32;Interactor&#32;streams.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02822"/>02822 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02823"/><link linkend="_testlib_8h_1a675e9c0cb400805c69d94e7cdded4494">02823</link> std::fstream&#32;<link linkend="_testlib_8h_1a675e9c0cb400805c69d94e7cdded4494">tout</link>;
<anchor xml:id="_testlib_8h_source_1l02824"/>02824 
<anchor xml:id="_testlib_8h_source_1l02825"/>02825 <emphasis role="comment">/*&#32;implementation</emphasis>
<anchor xml:id="_testlib_8h_source_1l02826"/>02826 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l02827"/>02827 
<anchor xml:id="_testlib_8h_source_1l02828"/><link linkend="_struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd">02828</link> <link linkend="_struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd">InStream::InStream</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02829"/>02829 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>&#32;=&#32;NULL;
<anchor xml:id="_testlib_8h_source_1l02830"/>02830 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l02831"/>02831 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02832"/>02832 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02833"/>02833 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>&#32;=&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">_input</link>;
<anchor xml:id="_testlib_8h_source_1l02834"/>02834 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02835"/>02835 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02836"/>02836 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a8afeeed49266480bd239d832415fb85b">wordReserveSize</link>&#32;=&#32;4;
<anchor xml:id="_testlib_8h_source_1l02837"/>02837 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>&#32;=&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>;
<anchor xml:id="_testlib_8h_source_1l02838"/>02838 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a14e6d7455706cea771265a7ab8407918">maxFileSize</link>&#32;=&#32;128&#32;*&#32;1024&#32;*&#32;1024;&#32;<emphasis role="comment">//&#32;128MB.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02839"/>02839 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26">maxTokenLength</link>&#32;=&#32;32&#32;*&#32;1024&#32;*&#32;1024;&#32;<emphasis role="comment">//&#32;32MB.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02840"/>02840 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a">maxMessageLength</link>&#32;=&#32;32000;
<anchor xml:id="_testlib_8h_source_1l02841"/>02841 }
<anchor xml:id="_testlib_8h_source_1l02842"/>02842 
<anchor xml:id="_testlib_8h_source_1l02843"/><link linkend="_struct_in_stream_1a6f82f3399cf052c8b55d500feec79bd2">02843</link> <link linkend="_struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd">InStream::InStream</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_in_stream">InStream</link>&#32;&amp;baseStream,&#32;std::string&#32;content)&#32;{
<anchor xml:id="_testlib_8h_source_1l02844"/>02844 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_string_input_stream_reader">StringInputStreamReader</link>(content);
<anchor xml:id="_testlib_8h_source_1l02845"/>02845 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l02846"/>02846 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02847"/>02847 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;=&#32;baseStream.<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>;
<anchor xml:id="_testlib_8h_source_1l02848"/>02848 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02849"/>02849 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>&#32;=&#32;baseStream.<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>;
<anchor xml:id="_testlib_8h_source_1l02850"/>02850 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;=&#32;<emphasis role="stringliteral">&quot;based&#32;on&#32;&quot;</emphasis>&#32;+&#32;baseStream.<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>;
<anchor xml:id="_testlib_8h_source_1l02851"/>02851 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>&#32;=&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>;
<anchor xml:id="_testlib_8h_source_1l02852"/>02852 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a14e6d7455706cea771265a7ab8407918">maxFileSize</link>&#32;=&#32;128&#32;*&#32;1024&#32;*&#32;1024;&#32;<emphasis role="comment">//&#32;128MB.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02853"/>02853 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26">maxTokenLength</link>&#32;=&#32;32&#32;*&#32;1024&#32;*&#32;1024;&#32;<emphasis role="comment">//&#32;32MB.</emphasis>
<anchor xml:id="_testlib_8h_source_1l02854"/>02854 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a">maxMessageLength</link>&#32;=&#32;32000;
<anchor xml:id="_testlib_8h_source_1l02855"/>02855 }
<anchor xml:id="_testlib_8h_source_1l02856"/>02856 
<anchor xml:id="_testlib_8h_source_1l02857"/><link linkend="_struct_in_stream_1ab75c26c4747d2a23388735cdfebbe4fa">02857</link> <link linkend="_struct_in_stream_1ab75c26c4747d2a23388735cdfebbe4fa">InStream::~InStream</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02858"/>02858 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;!=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02859"/>02859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1aa145a0fcdb6b0a73cc3b91b22e5183cb">close</link>();
<anchor xml:id="_testlib_8h_source_1l02860"/>02860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>;
<anchor xml:id="_testlib_8h_source_1l02861"/>02861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>&#32;=&#32;NULL;
<anchor xml:id="_testlib_8h_source_1l02862"/>02862 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02863"/>02863 }
<anchor xml:id="_testlib_8h_source_1l02864"/>02864 
<anchor xml:id="_testlib_8h_source_1l02865"/><link linkend="_struct_in_stream_1a7e9ee69fe14cc6c19b059b384eebed5c">02865</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a7e9ee69fe14cc6c19b059b384eebed5c">InStream::setTestCase</link>(<emphasis role="keywordtype">int</emphasis>&#32;testCase)&#32;{
<anchor xml:id="_testlib_8h_source_1l02866"/>02866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;!=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f">_validator</link>&#32;||&#32;<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>&#32;!=&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">_input</link>&#32;||&#32;!<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>&#32;||&#32;<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>)
<anchor xml:id="_testlib_8h_source_1l02867"/>02867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;InStream::setTestCase&#32;can&#32;be&#32;used&#32;only&#32;for&#32;inf&#32;in&#32;validator-mode.&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l02868"/>02868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Actually,&#32;prefer&#32;setTestCase&#32;function&#32;instead&#32;of&#32;InStream&#32;member&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02869"/>02869 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a06ef5f907b494fa52a75b2644dea6d7b">setTestCase</link>(testCase);
<anchor xml:id="_testlib_8h_source_1l02870"/>02870 }
<anchor xml:id="_testlib_8h_source_1l02871"/>02871 
<anchor xml:id="_testlib_8h_source_1l02872"/><link linkend="_struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd">02872</link> std::vector&lt;int&gt;&#32;<link linkend="_struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd">InStream::getReadChars</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l02873"/>02873 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;!=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f">_validator</link>&#32;||&#32;<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>&#32;!=&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">_input</link>&#32;||&#32;!<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>&#32;||&#32;<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>)
<anchor xml:id="_testlib_8h_source_1l02874"/>02874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;InStream::getReadChars&#32;can&#32;be&#32;used&#32;only&#32;for&#32;inf&#32;in&#32;validator-mode.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02875"/>02875 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>&#32;==&#32;NULL&#32;?&#32;std::vector&lt;int&gt;()&#32;:&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a382091a8b54e0f77ae1d2e59bfa34814">getReadChars</link>();
<anchor xml:id="_testlib_8h_source_1l02876"/>02876 }
<anchor xml:id="_testlib_8h_source_1l02877"/>02877 
<anchor xml:id="_testlib_8h_source_1l02878"/><link linkend="_testlib_8h_1ad093584ea7bc2579d8d49c05d4b95347">02878</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1ad093584ea7bc2579d8d49c05d4b95347">setTestCase</link>(<emphasis role="keywordtype">int</emphasis>&#32;testCase)&#32;{
<anchor xml:id="_testlib_8h_source_1l02879"/>02879 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;first_run&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02880"/>02880 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;zero_based&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02881"/>02881 
<anchor xml:id="_testlib_8h_source_1l02882"/>02882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first_run&#32;&amp;&amp;&#32;testCase&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l02883"/>02883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zero_based&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02884"/>02884 
<anchor xml:id="_testlib_8h_source_1l02885"/>02885 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(zero_based)
<anchor xml:id="_testlib_8h_source_1l02886"/>02886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCase++;
<anchor xml:id="_testlib_8h_source_1l02887"/>02887 
<anchor xml:id="_testlib_8h_source_1l02888"/>02888 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307">__testlib_hasTestCase</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02889"/>02889 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426">__testlib_testCase</link>&#32;=&#32;testCase;
<anchor xml:id="_testlib_8h_source_1l02890"/>02890 
<anchor xml:id="_testlib_8h_source_1l02891"/>02891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;==&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f">_validator</link>)
<anchor xml:id="_testlib_8h_source_1l02892"/>02892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a7e9ee69fe14cc6c19b059b384eebed5c">setTestCase</link>(testCase);
<anchor xml:id="_testlib_8h_source_1l02893"/>02893 
<anchor xml:id="_testlib_8h_source_1l02894"/>02894 &#32;&#32;&#32;&#32;first_run&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02895"/>02895 }
<anchor xml:id="_testlib_8h_source_1l02896"/>02896 
<anchor xml:id="_testlib_8h_source_1l02897"/>02897 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l02898"/>02898 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l02899"/>02899 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l02900"/><link linkend="_testlib_8h_1ac237ec9b60cb9035a69ee70750d69141">02900</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_testlib_8h_1ac237ec9b60cb9035a69ee70750d69141">resultExitCode</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;r)&#32;{
<anchor xml:id="_testlib_8h_source_1l02901"/>02901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77">_ok</link>)
<anchor xml:id="_testlib_8h_source_1l02902"/>02902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a809c8f4d2bf12a53a01098f336b97598">OK_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l02903"/>02903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>)
<anchor xml:id="_testlib_8h_source_1l02904"/>02904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a9407aadd1d7b6a24b40a94be0e1b5e6c">WA_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l02905"/>02905 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>)
<anchor xml:id="_testlib_8h_source_1l02906"/>02906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1acd99fac8764b4f8513d0d78aa80878a5">PE_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l02907"/>02907 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>)
<anchor xml:id="_testlib_8h_source_1l02908"/>02908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1afac612f10342c3ccbfc7f30ae563184b">FAIL_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l02909"/>02909 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43">_dirt</link>)
<anchor xml:id="_testlib_8h_source_1l02910"/>02910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1ac9085792031f49686fd06d9560164d3b">DIRT_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l02911"/>02911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">_points</link>)
<anchor xml:id="_testlib_8h_source_1l02912"/>02912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a58429ce36ac0b67fb7889455174c7e8a">POINTS_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l02913"/>02913 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>)
<anchor xml:id="_testlib_8h_source_1l02914"/>02914 <emphasis role="preprocessor">#ifdef&#32;ENABLE_UNEXPECTED_EOF</emphasis>
<anchor xml:id="_testlib_8h_source_1l02915"/>02915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a30fb6330f5fcaf65c9347f50df26222d">UNEXPECTED_EOF_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l02916"/>02916 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l02917"/>02917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1acd99fac8764b4f8513d0d78aa80878a5">PE_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l02918"/>02918 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l02919"/>02919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;&gt;=&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece">_partially</link>)
<anchor xml:id="_testlib_8h_source_1l02920"/>02920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1ac0c3e3c9771bdfbbcbd70392bd74c03a">PC_BASE_EXIT_CODE</link>&#32;+&#32;(r&#32;-&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece">_partially</link>);
<anchor xml:id="_testlib_8h_source_1l02921"/>02921 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1afac612f10342c3ccbfc7f30ae563184b">FAIL_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l02922"/>02922 }
<anchor xml:id="_testlib_8h_source_1l02923"/>02923 
<anchor xml:id="_testlib_8h_source_1l02924"/><link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">02924</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">InStream::textColor</link>(
<anchor xml:id="_testlib_8h_source_1l02925"/>02925 #<emphasis role="keywordflow">if</emphasis>&#32;!(defined(ON_WINDOWS)&#32;&amp;&amp;&#32;(!defined(_MSC_VER)&#32;||&#32;_MSC_VER&#32;&gt;&#32;1400))&#32;&amp;&amp;&#32;defined(__GNUC__)
<anchor xml:id="_testlib_8h_source_1l02926"/>02926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((unused))
<anchor xml:id="_testlib_8h_source_1l02927"/>02927 #endif
<anchor xml:id="_testlib_8h_source_1l02928"/>02928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;color
<anchor xml:id="_testlib_8h_source_1l02929"/>02929 )&#32;{
<anchor xml:id="_testlib_8h_source_1l02930"/>02930 <emphasis role="preprocessor">#if&#32;defined(ON_WINDOWS)&#32;&amp;&amp;&#32;(!defined(_MSC_VER)&#32;||&#32;_MSC_VER&#32;&gt;&#32;1400)</emphasis>
<anchor xml:id="_testlib_8h_source_1l02931"/>02931 &#32;&#32;&#32;&#32;HANDLE&#32;handle&#32;=&#32;GetStdHandle(STD_OUTPUT_HANDLE);
<anchor xml:id="_testlib_8h_source_1l02932"/>02932 &#32;&#32;&#32;&#32;SetConsoleTextAttribute(handle,&#32;color);
<anchor xml:id="_testlib_8h_source_1l02933"/>02933 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l02934"/>02934 <emphasis role="preprocessor">#if&#32;!defined(ON_WINDOWS)&#32;&amp;&amp;&#32;defined(__GNUC__)</emphasis>
<anchor xml:id="_testlib_8h_source_1l02935"/>02935 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isatty(2))
<anchor xml:id="_testlib_8h_source_1l02936"/>02936 &#32;&#32;&#32;&#32;{
<anchor xml:id="_testlib_8h_source_1l02937"/>02937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(color)
<anchor xml:id="_testlib_8h_source_1l02938"/>02938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_testlib_8h_source_1l02939"/>02939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c">LightRed</link>:
<anchor xml:id="_testlib_8h_source_1l02940"/>02940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\033[1;31m&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02941"/>02941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02942"/>02942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4">LightCyan</link>:
<anchor xml:id="_testlib_8h_source_1l02943"/>02943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\033[1;36m&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02944"/>02944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02945"/>02945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_in_stream_1a088a42a5a342bf630b6288c308d276e3">LightGreen</link>:
<anchor xml:id="_testlib_8h_source_1l02946"/>02946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\033[1;32m&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02947"/>02947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02948"/>02948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad">LightYellow</link>:
<anchor xml:id="_testlib_8h_source_1l02949"/>02949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\033[1;33m&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02950"/>02950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l02951"/>02951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836">LightGray</link>:
<anchor xml:id="_testlib_8h_source_1l02952"/>02952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="_testlib_8h_source_1l02953"/>02953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\033[0m&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l02954"/>02954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02955"/>02955 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02956"/>02956 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l02957"/>02957 }
<anchor xml:id="_testlib_8h_source_1l02958"/>02958 
<anchor xml:id="_testlib_8h_source_1l02959"/>02959 <emphasis role="preprocessor">#ifdef&#32;TESTLIB_THROW_EXIT_EXCEPTION_INSTEAD_OF_EXIT</emphasis>
<anchor xml:id="_testlib_8h_source_1l02960"/>02960 <emphasis role="keyword">class&#32;</emphasis>exit_exception:&#32;<emphasis role="keyword">public</emphasis>&#32;std::exception&#32;{
<anchor xml:id="_testlib_8h_source_1l02961"/>02961 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l02962"/>02962 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;exitCode;
<anchor xml:id="_testlib_8h_source_1l02963"/>02963 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_testlib_8h_source_1l02964"/>02964 &#32;&#32;&#32;&#32;exit_exception(<emphasis role="keywordtype">int</emphasis>&#32;exitCode):&#32;exitCode(exitCode)&#32;{}
<anchor xml:id="_testlib_8h_source_1l02965"/>02965 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;getExitCode()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;exitCode;&#32;}
<anchor xml:id="_testlib_8h_source_1l02966"/>02966 };
<anchor xml:id="_testlib_8h_source_1l02967"/>02967 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l02968"/>02968 
<anchor xml:id="_testlib_8h_source_1l02969"/><link linkend="_testlib_8h_1a9282a723c3cb0d8eaf1d904e975a5897">02969</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a9282a723c3cb0d8eaf1d904e975a5897">halt</link>(<emphasis role="keywordtype">int</emphasis>&#32;exitCode)&#32;{
<anchor xml:id="_testlib_8h_source_1l02970"/>02970 <emphasis role="preprocessor">#ifdef&#32;FOOTER</emphasis>
<anchor xml:id="_testlib_8h_source_1l02971"/>02971 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">InStream::textColor</link>(<link linkend="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836">InStream::LightGray</link>);
<anchor xml:id="_testlib_8h_source_1l02972"/>02972 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Checker:&#32;\&quot;%s\&quot;\n&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1a00f5e960957827ed8846cf705f810473">checkerName</link>.c_str());
<anchor xml:id="_testlib_8h_source_1l02973"/>02973 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Exit&#32;code:&#32;%d\n&quot;</emphasis>,&#32;exitCode);
<anchor xml:id="_testlib_8h_source_1l02974"/>02974 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">InStream::textColor</link>(<link linkend="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836">InStream::LightGray</link>);
<anchor xml:id="_testlib_8h_source_1l02975"/>02975 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l02976"/>02976 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f">__testlib_exitCode</link>&#32;=&#32;exitCode;
<anchor xml:id="_testlib_8h_source_1l02977"/>02977 <emphasis role="preprocessor">#ifdef&#32;TESTLIB_THROW_EXIT_EXCEPTION_INSTEAD_OF_EXIT</emphasis>
<anchor xml:id="_testlib_8h_source_1l02978"/>02978 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;exit_exception(exitCode);
<anchor xml:id="_testlib_8h_source_1l02979"/>02979 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l02980"/>02980 &#32;&#32;&#32;&#32;std::exit(exitCode);
<anchor xml:id="_testlib_8h_source_1l02981"/>02981 }
<anchor xml:id="_testlib_8h_source_1l02982"/>02982 
<anchor xml:id="_testlib_8h_source_1l02983"/>02983 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__testlib_shouldCheckDirt(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result)&#32;{
<anchor xml:id="_testlib_8h_source_1l02984"/>02984 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77">_ok</link>&#32;||&#32;result&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">_points</link>&#32;||&#32;result&#32;&gt;=&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece">_partially</link>;
<anchor xml:id="_testlib_8h_source_1l02985"/>02985 }
<anchor xml:id="_testlib_8h_source_1l02986"/>02986 
<anchor xml:id="_testlib_8h_source_1l02987"/>02987 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;__testlib_appendMessage(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;message,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;extra)&#32;{
<anchor xml:id="_testlib_8h_source_1l02988"/>02988 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;openPos&#32;=&#32;-1,&#32;closePos&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l02989"/>02989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;message.length();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l02990"/>02990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(message[i]&#32;==&#32;<link linkend="_struct_in_stream_1a582ee4c10e2543041466180e6134865a">InStream::OPEN_BRACKET</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02991"/>02991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(openPos&#32;==&#32;-1)
<anchor xml:id="_testlib_8h_source_1l02992"/>02992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;openPos&#32;=&#32;int(i);
<anchor xml:id="_testlib_8h_source_1l02993"/>02993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l02994"/>02994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;openPos&#32;=&#32;INT_MAX;
<anchor xml:id="_testlib_8h_source_1l02995"/>02995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l02996"/>02996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(message[i]&#32;==&#32;<link linkend="_struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8">InStream::CLOSE_BRACKET</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l02997"/>02997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(closePos&#32;==&#32;-1)
<anchor xml:id="_testlib_8h_source_1l02998"/>02998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;closePos&#32;=&#32;int(i);
<anchor xml:id="_testlib_8h_source_1l02999"/>02999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03000"/>03000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;closePos&#32;=&#32;INT_MAX;
<anchor xml:id="_testlib_8h_source_1l03001"/>03001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03002"/>03002 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03003"/>03003 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(openPos&#32;!=&#32;-1&#32;&amp;&amp;&#32;openPos&#32;!=&#32;INT_MAX
<anchor xml:id="_testlib_8h_source_1l03004"/>03004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;closePos&#32;!=&#32;-1&#32;&amp;&amp;&#32;closePos&#32;!=&#32;INT_MAX
<anchor xml:id="_testlib_8h_source_1l03005"/>03005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;openPos&#32;&lt;&#32;closePos)&#32;{
<anchor xml:id="_testlib_8h_source_1l03006"/>03006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index&#32;=&#32;message.find(extra,&#32;openPos);
<anchor xml:id="_testlib_8h_source_1l03007"/>03007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;==&#32;std::string::npos&#32;||&#32;<emphasis role="keywordtype">int</emphasis>(index)&#32;&gt;=&#32;closePos)&#32;{
<anchor xml:id="_testlib_8h_source_1l03008"/>03008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;result(message);
<anchor xml:id="_testlib_8h_source_1l03009"/>03009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.insert(closePos,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;extra);
<anchor xml:id="_testlib_8h_source_1l03010"/>03010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03011"/>03011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03012"/>03012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;message;
<anchor xml:id="_testlib_8h_source_1l03013"/>03013 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03014"/>03014 
<anchor xml:id="_testlib_8h_source_1l03015"/>03015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;message&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_struct_in_stream_1a582ee4c10e2543041466180e6134865a">InStream::OPEN_BRACKET</link>&#32;+&#32;extra&#32;+&#32;<link linkend="_struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8">InStream::CLOSE_BRACKET</link>;
<anchor xml:id="_testlib_8h_source_1l03016"/>03016 }
<anchor xml:id="_testlib_8h_source_1l03017"/>03017 
<anchor xml:id="_testlib_8h_source_1l03018"/>03018 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;__testlib_toPrintableMessage(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;message)&#32;{
<anchor xml:id="_testlib_8h_source_1l03019"/>03019 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;openPos&#32;=&#32;-1,&#32;closePos&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l03020"/>03020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;message.length();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l03021"/>03021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(message[i]&#32;==&#32;<link linkend="_struct_in_stream_1a582ee4c10e2543041466180e6134865a">InStream::OPEN_BRACKET</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03022"/>03022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(openPos&#32;==&#32;-1)
<anchor xml:id="_testlib_8h_source_1l03023"/>03023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;openPos&#32;=&#32;int(i);
<anchor xml:id="_testlib_8h_source_1l03024"/>03024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03025"/>03025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;openPos&#32;=&#32;INT_MAX;
<anchor xml:id="_testlib_8h_source_1l03026"/>03026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03027"/>03027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(message[i]&#32;==&#32;<link linkend="_struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8">InStream::CLOSE_BRACKET</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03028"/>03028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(closePos&#32;==&#32;-1)
<anchor xml:id="_testlib_8h_source_1l03029"/>03029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;closePos&#32;=&#32;int(i);
<anchor xml:id="_testlib_8h_source_1l03030"/>03030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03031"/>03031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;closePos&#32;=&#32;INT_MAX;
<anchor xml:id="_testlib_8h_source_1l03032"/>03032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03033"/>03033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03034"/>03034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(openPos&#32;!=&#32;-1&#32;&amp;&amp;&#32;openPos&#32;!=&#32;INT_MAX
<anchor xml:id="_testlib_8h_source_1l03035"/>03035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;closePos&#32;!=&#32;-1&#32;&amp;&amp;&#32;closePos&#32;!=&#32;INT_MAX
<anchor xml:id="_testlib_8h_source_1l03036"/>03036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;openPos&#32;&lt;&#32;closePos)&#32;{
<anchor xml:id="_testlib_8h_source_1l03037"/>03037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;result(message);
<anchor xml:id="_testlib_8h_source_1l03038"/>03038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[openPos]&#32;=&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03039"/>03039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[closePos]&#32;=&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03040"/>03040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03041"/>03041 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03042"/>03042 
<anchor xml:id="_testlib_8h_source_1l03043"/>03043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;message;
<anchor xml:id="_testlib_8h_source_1l03044"/>03044 }
<anchor xml:id="_testlib_8h_source_1l03045"/>03045 
<anchor xml:id="_testlib_8h_source_1l03046"/><link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">03046</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">InStream::quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg)&#32;{
<anchor xml:id="_testlib_8h_source_1l03047"/>03047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00">TestlibFinalizeGuard::alive</link>)
<anchor xml:id="_testlib_8h_source_1l03048"/>03048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a576c1be9a11f2136d2bfa955394d4575">testlibFinalizeGuard</link>.<link linkend="_struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186">quitCount</link>++;
<anchor xml:id="_testlib_8h_source_1l03049"/>03049 
<anchor xml:id="_testlib_8h_source_1l03050"/>03050 &#32;&#32;&#32;&#32;std::string&#32;message(msg);
<anchor xml:id="_testlib_8h_source_1l03051"/>03051 &#32;&#32;&#32;&#32;message&#32;=&#32;<link linkend="_testlib_8h_1a1a32c4d3bd87256731e67936766c65ca">trim</link>(message);
<anchor xml:id="_testlib_8h_source_1l03052"/>03052 
<anchor xml:id="_testlib_8h_source_1l03053"/>03053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307">__testlib_hasTestCase</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03054"/>03054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77">_ok</link>)
<anchor xml:id="_testlib_8h_source_1l03055"/>03055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;message&#32;=&#32;__testlib_appendMessage(message,&#32;<emphasis role="stringliteral">&quot;test&#32;case&#32;&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426">__testlib_testCase</link>));
<anchor xml:id="_testlib_8h_source_1l03056"/>03056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03057"/>03057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426">__testlib_testCase</link>&#32;==&#32;1)
<anchor xml:id="_testlib_8h_source_1l03058"/>03058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;message&#32;=&#32;__testlib_appendMessage(message,&#32;vtos(<link linkend="_testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426">__testlib_testCase</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;test&#32;case&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03059"/>03059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03060"/>03060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;message&#32;=&#32;__testlib_appendMessage(message,&#32;vtos(<link linkend="_testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426">__testlib_testCase</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;test&#32;cases&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03061"/>03061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03062"/>03062 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03063"/>03063 
<anchor xml:id="_testlib_8h_source_1l03064"/>03064 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;You&#32;can&#32;change&#32;maxMessageLength.</emphasis>
<anchor xml:id="_testlib_8h_source_1l03065"/>03065 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Example:&#32;&apos;inf.maxMessageLength&#32;=&#32;1024&#32;*&#32;1024;&apos;.</emphasis>
<anchor xml:id="_testlib_8h_source_1l03066"/>03066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(message.length()&#32;&gt;&#32;<link linkend="_struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a">maxMessageLength</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03067"/>03067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;warn&#32;=&#32;<emphasis role="stringliteral">&quot;message&#32;length&#32;exceeds&#32;&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a">maxMessageLength</link>)
<anchor xml:id="_testlib_8h_source_1l03068"/>03068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;the&#32;message&#32;is&#32;truncated:&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03069"/>03069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;message&#32;=&#32;warn&#32;+&#32;message.substr(0,&#32;<link linkend="_struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a">maxMessageLength</link>&#32;-&#32;warn.length());
<anchor xml:id="_testlib_8h_source_1l03070"/>03070 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03071"/>03071 
<anchor xml:id="_testlib_8h_source_1l03072"/>03072 <emphasis role="preprocessor">#ifndef&#32;ENABLE_UNEXPECTED_EOF</emphasis>
<anchor xml:id="_testlib_8h_source_1l03073"/>03073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;==&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>)
<anchor xml:id="_testlib_8h_source_1l03074"/>03074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>;
<anchor xml:id="_testlib_8h_source_1l03075"/>03075 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l03076"/>03076 
<anchor xml:id="_testlib_8h_source_1l03077"/>03077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;==&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa">_scorer</link>&#32;&amp;&amp;&#32;result&#32;!=&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>)
<anchor xml:id="_testlib_8h_source_1l03078"/>03078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95">quits</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Scorer&#32;should&#32;return&#32;points&#32;only.&#32;Don&apos;t&#32;use&#32;a&#32;quit&#32;function.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03079"/>03079 
<anchor xml:id="_testlib_8h_source_1l03080"/>03080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>&#32;!=&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6">_output</link>&#32;&amp;&amp;&#32;result&#32;!=&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03081"/>03081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>&#32;==&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">_input</link>&#32;&amp;&amp;&#32;<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;==&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f">_validator</link>&#32;&amp;&amp;&#32;<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>&#32;!=&#32;-1)
<anchor xml:id="_testlib_8h_source_1l03082"/>03082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95">quits</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;__testlib_appendMessage(__testlib_appendMessage(message,&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>),&#32;<emphasis role="stringliteral">&quot;line&#32;&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>)));
<anchor xml:id="_testlib_8h_source_1l03083"/>03083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03084"/>03084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95">quits</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;__testlib_appendMessage(message,&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>));
<anchor xml:id="_testlib_8h_source_1l03085"/>03085 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03086"/>03086 
<anchor xml:id="_testlib_8h_source_1l03087"/>03087 &#32;&#32;&#32;&#32;std::FILE&#32;*resultFile;
<anchor xml:id="_testlib_8h_source_1l03088"/>03088 &#32;&#32;&#32;&#32;std::string&#32;errorName;
<anchor xml:id="_testlib_8h_source_1l03089"/>03089 
<anchor xml:id="_testlib_8h_source_1l03090"/>03090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__testlib_shouldCheckDirt(result))&#32;{
<anchor xml:id="_testlib_8h_source_1l03091"/>03091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;!=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fadaea9b0ac8f600ff71b0f7616869deac">_interactor</link>&#32;&amp;&amp;&#32;!<link linkend="_testlib_8h_1a93822943d6413c3eba20a27b9d31336b">ouf</link>.<link linkend="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b">seekEof</link>())
<anchor xml:id="_testlib_8h_source_1l03092"/>03092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43">_dirt</link>,&#32;<emphasis role="stringliteral">&quot;Extra&#32;information&#32;in&#32;the&#32;output&#32;file&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03093"/>03093 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03094"/>03094 
<anchor xml:id="_testlib_8h_source_1l03095"/>03095 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pctype&#32;=&#32;result&#32;-&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece">_partially</link>;
<anchor xml:id="_testlib_8h_source_1l03096"/>03096 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isPartial&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03097"/>03097 
<anchor xml:id="_testlib_8h_source_1l03098"/>03098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(result)&#32;{
<anchor xml:id="_testlib_8h_source_1l03099"/>03099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77">_ok</link>:
<anchor xml:id="_testlib_8h_source_1l03100"/>03100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorName&#32;=&#32;<emphasis role="stringliteral">&quot;ok&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03101"/>03101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">quitscrS</link>(<link linkend="_struct_in_stream_1a088a42a5a342bf630b6288c308d276e3">LightGreen</link>,&#32;errorName);
<anchor xml:id="_testlib_8h_source_1l03102"/>03102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03103"/>03103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>:
<anchor xml:id="_testlib_8h_source_1l03104"/>03104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorName&#32;=&#32;<emphasis role="stringliteral">&quot;wrong&#32;answer&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03105"/>03105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">quitscrS</link>(<link linkend="_struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c">LightRed</link>,&#32;errorName);
<anchor xml:id="_testlib_8h_source_1l03106"/>03106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03107"/>03107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>:
<anchor xml:id="_testlib_8h_source_1l03108"/>03108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorName&#32;=&#32;<emphasis role="stringliteral">&quot;wrong&#32;output&#32;format&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03109"/>03109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">quitscrS</link>(<link linkend="_struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c">LightRed</link>,&#32;errorName);
<anchor xml:id="_testlib_8h_source_1l03110"/>03110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03111"/>03111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>:
<anchor xml:id="_testlib_8h_source_1l03112"/>03112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorName&#32;=&#32;<emphasis role="stringliteral">&quot;FAIL&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03113"/>03113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">quitscrS</link>(<link linkend="_struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c">LightRed</link>,&#32;errorName);
<anchor xml:id="_testlib_8h_source_1l03114"/>03114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03115"/>03115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43">_dirt</link>:
<anchor xml:id="_testlib_8h_source_1l03116"/>03116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorName&#32;=&#32;<emphasis role="stringliteral">&quot;wrong&#32;output&#32;format&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03117"/>03117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">quitscrS</link>(<link linkend="_struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4">LightCyan</link>,&#32;errorName);
<anchor xml:id="_testlib_8h_source_1l03118"/>03118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>;
<anchor xml:id="_testlib_8h_source_1l03119"/>03119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03120"/>03120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">_points</link>:
<anchor xml:id="_testlib_8h_source_1l03121"/>03121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorName&#32;=&#32;<emphasis role="stringliteral">&quot;points&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03122"/>03122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">quitscrS</link>(<link linkend="_struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad">LightYellow</link>,&#32;errorName);
<anchor xml:id="_testlib_8h_source_1l03123"/>03123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03124"/>03124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>:
<anchor xml:id="_testlib_8h_source_1l03125"/>03125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorName&#32;=&#32;<emphasis role="stringliteral">&quot;unexpected&#32;eof&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03126"/>03126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">quitscrS</link>(<link linkend="_struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4">LightCyan</link>,&#32;errorName);
<anchor xml:id="_testlib_8h_source_1l03127"/>03127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03128"/>03128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="_testlib_8h_source_1l03129"/>03129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;&gt;=&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece">_partially</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03130"/>03130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorName&#32;=&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;partially&#32;correct&#32;(%d)&#32;&quot;</emphasis>,&#32;pctype);
<anchor xml:id="_testlib_8h_source_1l03131"/>03131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPartial&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03132"/>03132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">quitscrS</link>(<link linkend="_struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad">LightYellow</link>,&#32;errorName);
<anchor xml:id="_testlib_8h_source_1l03133"/>03133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03134"/>03134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;What&#32;is&#32;the&#32;code&#32;???&#32;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03135"/>03135 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03136"/>03136 
<anchor xml:id="_testlib_8h_source_1l03137"/>03137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;!=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03138"/>03138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resultFile&#32;=&#32;std::fopen(<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>.c_str(),&#32;<emphasis role="stringliteral">&quot;w&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03139"/>03139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(resultFile&#32;==&#32;NULL)&#32;{
<anchor xml:id="_testlib_8h_source_1l03140"/>03140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03141"/>03141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Can&#32;not&#32;write&#32;to&#32;the&#32;result&#32;file&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03142"/>03142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03143"/>03143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e">appesMode</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03144"/>03144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(resultFile,&#32;<emphasis role="stringliteral">&quot;&lt;?xml&#32;version=\&quot;1.0\&quot;&#32;encoding=\&quot;%s\&quot;?&gt;&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460">appesModeEncoding</link>.c_str());
<anchor xml:id="_testlib_8h_source_1l03145"/>03145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPartial)
<anchor xml:id="_testlib_8h_source_1l03146"/>03146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(resultFile,&#32;<emphasis role="stringliteral">&quot;&lt;result&#32;outcome&#32;=&#32;\&quot;%s\&quot;&#32;pctype&#32;=&#32;\&quot;%d\&quot;&gt;&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l03147"/>03147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59">outcomes</link>[(<emphasis role="keywordtype">int</emphasis>)&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece">_partially</link>].c_str(),&#32;pctype);
<anchor xml:id="_testlib_8h_source_1l03148"/>03148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03149"/>03149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">_points</link>)
<anchor xml:id="_testlib_8h_source_1l03150"/>03150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(resultFile,&#32;<emphasis role="stringliteral">&quot;&lt;result&#32;outcome&#32;=&#32;\&quot;%s\&quot;&gt;&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59">outcomes</link>[(<emphasis role="keywordtype">int</emphasis>)&#32;result].c_str());
<anchor xml:id="_testlib_8h_source_1l03151"/>03151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03152"/>03152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1acb5280d0779ed8499169e3537ab20fd2">__testlib_points</link>&#32;==&#32;std::numeric_limits&lt;float&gt;::infinity())
<anchor xml:id="_testlib_8h_source_1l03153"/>03153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Expected&#32;points,&#32;but&#32;infinity&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03154"/>03154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;stringPoints&#32;=&#32;removeDoubleTrailingZeroes(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;%.10f&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1acb5280d0779ed8499169e3537ab20fd2">__testlib_points</link>));
<anchor xml:id="_testlib_8h_source_1l03155"/>03155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(resultFile,&#32;<emphasis role="stringliteral">&quot;&lt;result&#32;outcome&#32;=&#32;\&quot;%s\&quot;&#32;points&#32;=&#32;\&quot;%s\&quot;&gt;&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l03156"/>03156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59">outcomes</link>[(<emphasis role="keywordtype">int</emphasis>)&#32;result].c_str(),&#32;stringPoints.c_str());
<anchor xml:id="_testlib_8h_source_1l03157"/>03157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03158"/>03158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03159"/>03159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a7920954e072895d70f2127ccc7af789d">xmlSafeWrite</link>(resultFile,&#32;__testlib_toPrintableMessage(message).c_str());
<anchor xml:id="_testlib_8h_source_1l03160"/>03160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(resultFile,&#32;<emphasis role="stringliteral">&quot;&lt;/result&gt;\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03161"/>03161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03162"/>03162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(resultFile,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;__testlib_toPrintableMessage(message).c_str());
<anchor xml:id="_testlib_8h_source_1l03163"/>03163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;==&#32;resultFile&#32;||&#32;fclose(resultFile)&#32;!=&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l03164"/>03164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03165"/>03165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Can&#32;not&#32;write&#32;to&#32;the&#32;result&#32;file&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03166"/>03166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03167"/>03167 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03168"/>03168 
<anchor xml:id="_testlib_8h_source_1l03169"/>03169 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb">quitscr</link>(<link linkend="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836">LightGray</link>,&#32;__testlib_toPrintableMessage(message).c_str());
<anchor xml:id="_testlib_8h_source_1l03170"/>03170 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03171"/>03171 
<anchor xml:id="_testlib_8h_source_1l03172"/>03172 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f">close</link>();
<anchor xml:id="_testlib_8h_source_1l03173"/>03173 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a93822943d6413c3eba20a27b9d31336b">ouf</link>.<link linkend="_struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f">close</link>();
<anchor xml:id="_testlib_8h_source_1l03174"/>03174 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac">ans</link>.<link linkend="_struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f">close</link>();
<anchor xml:id="_testlib_8h_source_1l03175"/>03175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a675e9c0cb400805c69d94e7cdded4494">tout</link>.is_open())
<anchor xml:id="_testlib_8h_source_1l03176"/>03176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a675e9c0cb400805c69d94e7cdded4494">tout</link>.close();
<anchor xml:id="_testlib_8h_source_1l03177"/>03177 
<anchor xml:id="_testlib_8h_source_1l03178"/>03178 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">textColor</link>(<link linkend="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836">LightGray</link>);
<anchor xml:id="_testlib_8h_source_1l03179"/>03179 
<anchor xml:id="_testlib_8h_source_1l03180"/>03180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;!=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03181"/>03181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;See&#32;file&#32;to&#32;check&#32;exit&#32;message\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03182"/>03182 
<anchor xml:id="_testlib_8h_source_1l03183"/>03183 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a9282a723c3cb0d8eaf1d904e975a5897">halt</link>(<link linkend="_testlib_8h_1ac237ec9b60cb9035a69ee70750d69141">resultExitCode</link>(result));
<anchor xml:id="_testlib_8h_source_1l03184"/>03184 }
<anchor xml:id="_testlib_8h_source_1l03185"/>03185 
<anchor xml:id="_testlib_8h_source_1l03186"/>03186 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l03187"/>03187 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;3,&#32;4)))
<anchor xml:id="_testlib_8h_source_1l03188"/>03188 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l03189"/><link linkend="_struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5">03189</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5">InStream::quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l03190"/>03190 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(msg,&#32;msg,&#32;message);
<anchor xml:id="_testlib_8h_source_1l03191"/>03191 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">InStream::quit</link>(result,&#32;message.c_str());
<anchor xml:id="_testlib_8h_source_1l03192"/>03192 }
<anchor xml:id="_testlib_8h_source_1l03193"/>03193 
<anchor xml:id="_testlib_8h_source_1l03194"/>03194 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l03195"/>03195 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;4,&#32;5)))
<anchor xml:id="_testlib_8h_source_1l03196"/>03196 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l03197"/><link linkend="_struct_in_stream_1a0c969f83376d50af370615d44186647d">03197</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0c969f83376d50af370615d44186647d">InStream::quitif</link>(<emphasis role="keywordtype">bool</emphasis>&#32;condition,&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l03198"/>03198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(condition)&#32;{
<anchor xml:id="_testlib_8h_source_1l03199"/>03199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(msg,&#32;msg,&#32;message);
<anchor xml:id="_testlib_8h_source_1l03200"/>03200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">InStream::quit</link>(result,&#32;message.c_str());
<anchor xml:id="_testlib_8h_source_1l03201"/>03201 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03202"/>03202 }
<anchor xml:id="_testlib_8h_source_1l03203"/>03203 
<anchor xml:id="_testlib_8h_source_1l03204"/><link linkend="_struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95">03204</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95">InStream::quits</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;std::string&#32;msg)&#32;{
<anchor xml:id="_testlib_8h_source_1l03205"/>03205 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">InStream::quit</link>(result,&#32;msg.c_str());
<anchor xml:id="_testlib_8h_source_1l03206"/>03206 }
<anchor xml:id="_testlib_8h_source_1l03207"/>03207 
<anchor xml:id="_testlib_8h_source_1l03208"/><link linkend="_struct_in_stream_1a7920954e072895d70f2127ccc7af789d">03208</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a7920954e072895d70f2127ccc7af789d">InStream::xmlSafeWrite</link>(std::FILE&#32;*file,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg)&#32;{
<anchor xml:id="_testlib_8h_source_1l03209"/>03209 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;lmsg&#32;=&#32;strlen(msg);
<anchor xml:id="_testlib_8h_source_1l03210"/>03210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;lmsg;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l03211"/>03211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg[i]&#32;==&#32;<emphasis role="charliteral">&apos;&amp;&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03212"/>03212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(file,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&amp;amp;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03213"/>03213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03214"/>03214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03215"/>03215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg[i]&#32;==&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03216"/>03216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(file,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&amp;lt;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03217"/>03217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03218"/>03218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03219"/>03219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg[i]&#32;==&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03220"/>03220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(file,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&amp;gt;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03221"/>03221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03222"/>03222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03223"/>03223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg[i]&#32;==&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03224"/>03224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(file,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&amp;quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03225"/>03225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03226"/>03226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03227"/>03227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;&lt;=&#32;msg[i]&#32;&amp;&amp;&#32;msg[i]&#32;&lt;=&#32;31)&#32;{
<anchor xml:id="_testlib_8h_source_1l03228"/>03228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(file,&#32;<emphasis role="stringliteral">&quot;%c&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03229"/>03229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03230"/>03230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03231"/>03231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(file,&#32;<emphasis role="stringliteral">&quot;%c&quot;</emphasis>,&#32;msg[i]);
<anchor xml:id="_testlib_8h_source_1l03232"/>03232 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03233"/>03233 }
<anchor xml:id="_testlib_8h_source_1l03234"/>03234 
<anchor xml:id="_testlib_8h_source_1l03235"/><link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">03235</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5">InStream::quitscrS</link>(<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;color,&#32;std::string&#32;msg)&#32;{
<anchor xml:id="_testlib_8h_source_1l03236"/>03236 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb">quitscr</link>(color,&#32;msg.c_str());
<anchor xml:id="_testlib_8h_source_1l03237"/>03237 }
<anchor xml:id="_testlib_8h_source_1l03238"/>03238 
<anchor xml:id="_testlib_8h_source_1l03239"/><link linkend="_struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb">03239</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb">InStream::quitscr</link>(<link linkend="_testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5">WORD</link>&#32;color,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg)&#32;{
<anchor xml:id="_testlib_8h_source_1l03240"/>03240 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;==&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03241"/>03241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">textColor</link>(color);
<anchor xml:id="_testlib_8h_source_1l03242"/>03242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;msg);
<anchor xml:id="_testlib_8h_source_1l03243"/>03243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">textColor</link>(<link linkend="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836">LightGray</link>);
<anchor xml:id="_testlib_8h_source_1l03244"/>03244 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03245"/>03245 }
<anchor xml:id="_testlib_8h_source_1l03246"/>03246 
<anchor xml:id="_testlib_8h_source_1l03247"/><link linkend="_struct_in_stream_1a0daf92605da53c68648ad78572965ca3">03247</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0daf92605da53c68648ad78572965ca3">InStream::reset</link>(std::FILE&#32;*file)&#32;{
<anchor xml:id="_testlib_8h_source_1l03248"/>03248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>&#32;&amp;&amp;&#32;<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>)
<anchor xml:id="_testlib_8h_source_1l03249"/>03249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Can&apos;t&#32;reset&#32;standard&#32;handle&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03250"/>03250 
<anchor xml:id="_testlib_8h_source_1l03251"/>03251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>)
<anchor xml:id="_testlib_8h_source_1l03252"/>03252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f">close</link>();
<anchor xml:id="_testlib_8h_source_1l03253"/>03253 
<anchor xml:id="_testlib_8h_source_1l03254"/>03254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>&#32;&amp;&amp;&#32;NULL&#32;==&#32;file)
<anchor xml:id="_testlib_8h_source_1l03255"/>03255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;==&#32;(file&#32;=&#32;std::fopen(<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>.c_str(),&#32;<emphasis role="stringliteral">&quot;rb&quot;</emphasis>)))&#32;{
<anchor xml:id="_testlib_8h_source_1l03256"/>03256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>&#32;==&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6">_output</link>)
<anchor xml:id="_testlib_8h_source_1l03257"/>03257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95">quits</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Output&#32;file&#32;not&#32;found:&#32;\&quot;&quot;</emphasis>)&#32;+&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03258"/>03258 
<anchor xml:id="_testlib_8h_source_1l03259"/>03259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>&#32;==&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61">_answer</link>)
<anchor xml:id="_testlib_8h_source_1l03260"/>03260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95">quits</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Answer&#32;file&#32;not&#32;found:&#32;\&quot;&quot;</emphasis>)&#32;+&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03261"/>03261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03262"/>03262 
<anchor xml:id="_testlib_8h_source_1l03263"/>03263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;!=&#32;file)&#32;{
<anchor xml:id="_testlib_8h_source_1l03264"/>03264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03265"/>03265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_set_binary(file);
<anchor xml:id="_testlib_8h_source_1l03266"/>03266 
<anchor xml:id="_testlib_8h_source_1l03267"/>03267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>)
<anchor xml:id="_testlib_8h_source_1l03268"/>03268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_file_input_stream_reader">FileInputStreamReader</link>(file,&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>);
<anchor xml:id="_testlib_8h_source_1l03269"/>03269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03270"/>03270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_buffered_file_input_stream_reader">BufferedFileInputStreamReader</link>(file,&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>);
<anchor xml:id="_testlib_8h_source_1l03271"/>03271 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03272"/>03272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03273"/>03273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>&#32;=&#32;NULL;
<anchor xml:id="_testlib_8h_source_1l03274"/>03274 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03275"/>03275 }
<anchor xml:id="_testlib_8h_source_1l03276"/>03276 
<anchor xml:id="_testlib_8h_source_1l03277"/><link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">03277</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">InStream::init</link>(std::string&#32;fileName,&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddb">TMode</link>&#32;mode)&#32;{
<anchor xml:id="_testlib_8h_source_1l03278"/>03278 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03279"/>03279 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;=&#32;fileName;
<anchor xml:id="_testlib_8h_source_1l03280"/>03280 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03281"/>03281 &#32;&#32;&#32;&#32;this-&gt;mode&#32;=&#32;<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>;
<anchor xml:id="_testlib_8h_source_1l03282"/>03282 
<anchor xml:id="_testlib_8h_source_1l03283"/>03283 &#32;&#32;&#32;&#32;std::ifstream&#32;stream;
<anchor xml:id="_testlib_8h_source_1l03284"/>03284 &#32;&#32;&#32;&#32;stream.open(fileName.c_str(),&#32;std::ios::in);
<anchor xml:id="_testlib_8h_source_1l03285"/>03285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stream.is_open())&#32;{
<anchor xml:id="_testlib_8h_source_1l03286"/>03286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::streampos&#32;start&#32;=&#32;stream.tellg();
<anchor xml:id="_testlib_8h_source_1l03287"/>03287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream.seekg(0,&#32;std::ios::end);
<anchor xml:id="_testlib_8h_source_1l03288"/>03288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::streampos&#32;end&#32;=&#32;stream.tellg();
<anchor xml:id="_testlib_8h_source_1l03289"/>03289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;fileSize&#32;=&#32;size_t(end&#32;-&#32;start);
<anchor xml:id="_testlib_8h_source_1l03290"/>03290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream.close();
<anchor xml:id="_testlib_8h_source_1l03291"/>03291 
<anchor xml:id="_testlib_8h_source_1l03292"/>03292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;You&#32;can&#32;change&#32;maxFileSize.</emphasis>
<anchor xml:id="_testlib_8h_source_1l03293"/>03293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Example:&#32;&apos;inf.maxFileSize&#32;=&#32;256&#32;*&#32;1024&#32;*&#32;1024;&apos;.</emphasis>
<anchor xml:id="_testlib_8h_source_1l03294"/>03294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fileSize&#32;&gt;&#32;<link linkend="_struct_in_stream_1a14e6d7455706cea771265a7ab8407918">maxFileSize</link>)
<anchor xml:id="_testlib_8h_source_1l03295"/>03295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5">quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;<emphasis role="stringliteral">&quot;File&#32;size&#32;exceeds&#32;%d&#32;bytes,&#32;size&#32;is&#32;%d&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="_struct_in_stream_1a14e6d7455706cea771265a7ab8407918">maxFileSize</link>),&#32;<emphasis role="keywordtype">int</emphasis>(fileSize));
<anchor xml:id="_testlib_8h_source_1l03296"/>03296 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03297"/>03297 
<anchor xml:id="_testlib_8h_source_1l03298"/>03298 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0daf92605da53c68648ad78572965ca3">reset</link>();
<anchor xml:id="_testlib_8h_source_1l03299"/>03299 }
<anchor xml:id="_testlib_8h_source_1l03300"/>03300 
<anchor xml:id="_testlib_8h_source_1l03301"/><link linkend="_struct_in_stream_1a4b78654581508e7ace12cdda20de48df">03301</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">InStream::init</link>(std::FILE&#32;*f,&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddb">TMode</link>&#32;mode)&#32;{
<anchor xml:id="_testlib_8h_source_1l03302"/>03302 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03303"/>03303 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;=&#32;<emphasis role="stringliteral">&quot;untitled&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03304"/>03304 &#32;&#32;&#32;&#32;this-&gt;mode&#32;=&#32;<link linkend="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686">mode</link>;
<anchor xml:id="_testlib_8h_source_1l03305"/>03305 
<anchor xml:id="_testlib_8h_source_1l03306"/>03306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(f&#32;==&#32;stdin)
<anchor xml:id="_testlib_8h_source_1l03307"/>03307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;=&#32;<emphasis role="stringliteral">&quot;stdin&quot;</emphasis>,&#32;<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03308"/>03308 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(f&#32;==&#32;stdout)
<anchor xml:id="_testlib_8h_source_1l03309"/>03309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;=&#32;<emphasis role="stringliteral">&quot;stdout&quot;</emphasis>,&#32;<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03310"/>03310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(f&#32;==&#32;stderr)
<anchor xml:id="_testlib_8h_source_1l03311"/>03311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;=&#32;<emphasis role="stringliteral">&quot;stderr&quot;</emphasis>,&#32;<link linkend="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717">stdfile</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03312"/>03312 
<anchor xml:id="_testlib_8h_source_1l03313"/>03313 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a0daf92605da53c68648ad78572965ca3">reset</link>(f);
<anchor xml:id="_testlib_8h_source_1l03314"/>03314 }
<anchor xml:id="_testlib_8h_source_1l03315"/>03315 
<anchor xml:id="_testlib_8h_source_1l03316"/><link linkend="_struct_in_stream_1a1ee5c101df11ec9fe00867379bf3937f">03316</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a1ee5c101df11ec9fe00867379bf3937f">InStream::skipBom</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03317"/>03317 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;utf8Bom&#32;=&#32;<emphasis role="stringliteral">&quot;\xEF\xBB\xBF&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03318"/>03318 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l03319"/>03319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(index&#32;&lt;&#32;utf8Bom.size()&#32;&amp;&amp;&#32;<link linkend="_struct_in_stream_1af208d97fa6484d10b88d611012fce578">curChar</link>()&#32;==&#32;utf8Bom[index])&#32;{
<anchor xml:id="_testlib_8h_source_1l03320"/>03320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index++;
<anchor xml:id="_testlib_8h_source_1l03321"/>03321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a15dbd488971ba0da79085f7bd980f1f1">skipChar</link>();
<anchor xml:id="_testlib_8h_source_1l03322"/>03322 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03323"/>03323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&lt;&#32;utf8Bom.size())&#32;{
<anchor xml:id="_testlib_8h_source_1l03324"/>03324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(index&#32;!=&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l03325"/>03325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a8c656e9ae7175e852033fbdffe41550b">unreadChar</link>(utf8Bom[index&#32;-&#32;1]);
<anchor xml:id="_testlib_8h_source_1l03326"/>03326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index--;
<anchor xml:id="_testlib_8h_source_1l03327"/>03327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03328"/>03328 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03329"/>03329 }
<anchor xml:id="_testlib_8h_source_1l03330"/>03330 
<anchor xml:id="_testlib_8h_source_1l03331"/><link linkend="_struct_in_stream_1af208d97fa6484d10b88d611012fce578">03331</link> <emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1af208d97fa6484d10b88d611012fce578">InStream::curChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03332"/>03332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;char(<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a80448788833a59a503853b4a45a96137">curChar</link>());
<anchor xml:id="_testlib_8h_source_1l03333"/>03333 }
<anchor xml:id="_testlib_8h_source_1l03334"/>03334 
<anchor xml:id="_testlib_8h_source_1l03335"/><link linkend="_struct_in_stream_1af46102c51b215e59e3b9e993ac999fe5">03335</link> <emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1af46102c51b215e59e3b9e993ac999fe5">InStream::nextChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03336"/>03336 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;char(<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>());
<anchor xml:id="_testlib_8h_source_1l03337"/>03337 }
<anchor xml:id="_testlib_8h_source_1l03338"/>03338 
<anchor xml:id="_testlib_8h_source_1l03339"/><link linkend="_struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205">03339</link> <emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205">InStream::readChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03340"/>03340 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1af46102c51b215e59e3b9e993ac999fe5">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l03341"/>03341 }
<anchor xml:id="_testlib_8h_source_1l03342"/>03342 
<anchor xml:id="_testlib_8h_source_1l03343"/><link linkend="_struct_in_stream_1a0c49c9fe193752b77e17fc7e45b0965b">03343</link> <emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205">InStream::readChar</link>(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l03344"/>03344 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881">getLine</link>();
<anchor xml:id="_testlib_8h_source_1l03345"/>03345 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;found&#32;=&#32;<link linkend="_struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205">readChar</link>();
<anchor xml:id="_testlib_8h_source_1l03346"/>03346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;!=&#32;found)&#32;{
<anchor xml:id="_testlib_8h_source_1l03347"/>03347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_testlib_8h_1a8da048ae3bc25fe4bb2dcfceb53a90fc">isEoln</link>(found))
<anchor xml:id="_testlib_8h_source_1l03348"/>03348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Unexpected&#32;character&#32;&apos;&quot;</emphasis>&#32;+&#32;std::string(1,&#32;found)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;,&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;std::string(1,&#32;c)&#32;+
<anchor xml:id="_testlib_8h_source_1l03349"/>03349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;expected&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03350"/>03350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03351"/>03351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Unexpected&#32;character&#32;&quot;</emphasis>&#32;+&#32;(<emphasis role="stringliteral">&quot;#&quot;</emphasis>&#32;+&#32;vtos(<emphasis role="keywordtype">int</emphasis>(found)))&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;std::string(1,&#32;c)&#32;+
<anchor xml:id="_testlib_8h_source_1l03352"/>03352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;expected&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03353"/>03353 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03354"/>03354 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;found;
<anchor xml:id="_testlib_8h_source_1l03355"/>03355 }
<anchor xml:id="_testlib_8h_source_1l03356"/>03356 
<anchor xml:id="_testlib_8h_source_1l03357"/><link linkend="_struct_in_stream_1a012e968b18b359b82897db805faeb0f6">03357</link> <emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_in_stream_1a012e968b18b359b82897db805faeb0f6">InStream::readSpace</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03358"/>03358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205">readChar</link>(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03359"/>03359 }
<anchor xml:id="_testlib_8h_source_1l03360"/>03360 
<anchor xml:id="_testlib_8h_source_1l03361"/><link linkend="_struct_in_stream_1a8c656e9ae7175e852033fbdffe41550b">03361</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a8c656e9ae7175e852033fbdffe41550b">InStream::unreadChar</link>(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l03362"/>03362 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(c);
<anchor xml:id="_testlib_8h_source_1l03363"/>03363 }
<anchor xml:id="_testlib_8h_source_1l03364"/>03364 
<anchor xml:id="_testlib_8h_source_1l03365"/><link linkend="_struct_in_stream_1a15dbd488971ba0da79085f7bd980f1f1">03365</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a15dbd488971ba0da79085f7bd980f1f1">InStream::skipChar</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03366"/>03366 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1ad01b8b4dd307c70472afb7dae417401a">skipChar</link>();
<anchor xml:id="_testlib_8h_source_1l03367"/>03367 }
<anchor xml:id="_testlib_8h_source_1l03368"/>03368 
<anchor xml:id="_testlib_8h_source_1l03369"/><link linkend="_struct_in_stream_1a3caea7dc5003207a13b690e1e6523759">03369</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3caea7dc5003207a13b690e1e6523759">InStream::skipBlanks</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03370"/>03370 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c">isBlanks</link>(<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a80448788833a59a503853b4a45a96137">curChar</link>()))
<anchor xml:id="_testlib_8h_source_1l03371"/>03371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1ad01b8b4dd307c70472afb7dae417401a">skipChar</link>();
<anchor xml:id="_testlib_8h_source_1l03372"/>03372 }
<anchor xml:id="_testlib_8h_source_1l03373"/>03373 
<anchor xml:id="_testlib_8h_source_1l03374"/><link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">03374</link> std::string&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">InStream::readWord</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03375"/>03375 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>);
<anchor xml:id="_testlib_8h_source_1l03376"/>03376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>;
<anchor xml:id="_testlib_8h_source_1l03377"/>03377 }
<anchor xml:id="_testlib_8h_source_1l03378"/>03378 
<anchor xml:id="_testlib_8h_source_1l03379"/><link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">03379</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">InStream::readWordTo</link>(std::string&#32;&amp;result)&#32;{
<anchor xml:id="_testlib_8h_source_1l03380"/>03380 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>)
<anchor xml:id="_testlib_8h_source_1l03381"/>03381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a3caea7dc5003207a13b690e1e6523759">skipBlanks</link>();
<anchor xml:id="_testlib_8h_source_1l03382"/>03382 
<anchor xml:id="_testlib_8h_source_1l03383"/>03383 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881">getLine</link>();
<anchor xml:id="_testlib_8h_source_1l03384"/>03384 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cur&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l03385"/>03385 
<anchor xml:id="_testlib_8h_source_1l03386"/>03386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cur&#32;==&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>)
<anchor xml:id="_testlib_8h_source_1l03387"/>03387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;end&#32;of&#32;file&#32;-&#32;token&#32;expected&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03388"/>03388 
<anchor xml:id="_testlib_8h_source_1l03389"/>03389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c">isBlanks</link>(cur))
<anchor xml:id="_testlib_8h_source_1l03390"/>03390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;white-space&#32;-&#32;token&#32;expected&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03391"/>03391 
<anchor xml:id="_testlib_8h_source_1l03392"/>03392 &#32;&#32;&#32;&#32;result.clear();
<anchor xml:id="_testlib_8h_source_1l03393"/>03393 
<anchor xml:id="_testlib_8h_source_1l03394"/>03394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!(<link linkend="_testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c">isBlanks</link>(cur)&#32;||&#32;cur&#32;==&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>))&#32;{
<anchor xml:id="_testlib_8h_source_1l03395"/>03395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;char(cur);
<anchor xml:id="_testlib_8h_source_1l03396"/>03396 
<anchor xml:id="_testlib_8h_source_1l03397"/>03397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;You&#32;can&#32;change&#32;maxTokenLength.</emphasis>
<anchor xml:id="_testlib_8h_source_1l03398"/>03398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Example:&#32;&apos;inf.maxTokenLength&#32;=&#32;128&#32;*&#32;1024&#32;*&#32;1024;&apos;.</emphasis>
<anchor xml:id="_testlib_8h_source_1l03399"/>03399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.length()&#32;&gt;&#32;<link linkend="_struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26">maxTokenLength</link>)
<anchor xml:id="_testlib_8h_source_1l03400"/>03400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5">quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;<emphasis role="stringliteral">&quot;Length&#32;of&#32;token&#32;exceeds&#32;%d,&#32;token&#32;is&#32;&apos;%s...&apos;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="_struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26">maxTokenLength</link>),
<anchor xml:id="_testlib_8h_source_1l03401"/>03401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_part(result).c_str());
<anchor xml:id="_testlib_8h_source_1l03402"/>03402 
<anchor xml:id="_testlib_8h_source_1l03403"/>03403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cur&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l03404"/>03404 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03405"/>03405 
<anchor xml:id="_testlib_8h_source_1l03406"/>03406 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(cur);
<anchor xml:id="_testlib_8h_source_1l03407"/>03407 
<anchor xml:id="_testlib_8h_source_1l03408"/>03408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.length()&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l03409"/>03409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;end&#32;of&#32;file&#32;or&#32;white-space&#32;-&#32;token&#32;expected&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03410"/>03410 }
<anchor xml:id="_testlib_8h_source_1l03411"/>03411 
<anchor xml:id="_testlib_8h_source_1l03412"/><link linkend="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0">03412</link> std::string&#32;<link linkend="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0">InStream::readToken</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03413"/>03413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>();
<anchor xml:id="_testlib_8h_source_1l03414"/>03414 }
<anchor xml:id="_testlib_8h_source_1l03415"/>03415 
<anchor xml:id="_testlib_8h_source_1l03416"/><link linkend="_struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72">03416</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72">InStream::readTokenTo</link>(std::string&#32;&amp;result)&#32;{
<anchor xml:id="_testlib_8h_source_1l03417"/>03417 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(result);
<anchor xml:id="_testlib_8h_source_1l03418"/>03418 }
<anchor xml:id="_testlib_8h_source_1l03419"/>03419 
<anchor xml:id="_testlib_8h_source_1l03420"/>03420 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l03421"/>03421 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l03422"/>03422 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l03423"/>03423 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;__testlib_part(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l03424"/>03424 &#32;&#32;&#32;&#32;std::string&#32;t;
<anchor xml:id="_testlib_8h_source_1l03425"/>03425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l03426"/>03426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03427"/>03427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l03428"/>03428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03429"/>03429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;+=&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03430"/>03430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t.length()&#32;&lt;=&#32;64)
<anchor xml:id="_testlib_8h_source_1l03431"/>03431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;t;
<anchor xml:id="_testlib_8h_source_1l03432"/>03432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03433"/>03433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;t.substr(0,&#32;30)&#32;+&#32;<emphasis role="stringliteral">&quot;...&quot;</emphasis>&#32;+&#32;t.substr(s.length()&#32;-&#32;31,&#32;31);
<anchor xml:id="_testlib_8h_source_1l03434"/>03434 }
<anchor xml:id="_testlib_8h_source_1l03435"/>03435 
<anchor xml:id="_testlib_8h_source_1l03436"/><link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">03436</link> <emphasis role="preprocessor">#define&#32;__testlib_readMany(readMany,&#32;readOne,&#32;typeName,&#32;space)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03437"/>03437 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if&#32;(size&#32;&lt;&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03438"/>03438 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quit(_fail,&#32;#readMany&#32;&quot;:&#32;size&#32;should&#32;be&#32;non-negative.&quot;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03439"/>03439 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if&#32;(size&#32;&gt;&#32;100000000)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03440"/>03440 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quit(_fail,&#32;#readMany&#32;&quot;:&#32;size&#32;should&#32;be&#32;at&#32;most&#32;100000000.&quot;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03441"/>03441 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03442"/>03442 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;std::vector&lt;typeName&gt;&#32;result(size);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03443"/>03443 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;readManyIteration&#32;=&#32;indexBase;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03444"/>03444 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03445"/>03445 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;for&#32;(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size;&#32;i++)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03446"/>03446 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03447"/>03447 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[i]&#32;=&#32;readOne;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03448"/>03448 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readManyIteration++;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03449"/>03449 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(strict&#32;&amp;&amp;&#32;space&#32;&amp;&amp;&#32;i&#32;+&#32;1&#32;&lt;&#32;size)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03450"/>03450 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readSpace();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03451"/>03451 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03452"/>03452 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03453"/>03453 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;readManyIteration&#32;=&#32;NO_INDEX;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03454"/>03454 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;result;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_testlib_8h_source_1l03455"/>03455 <emphasis role="preprocessor"></emphasis>
<anchor xml:id="_testlib_8h_source_1l03456"/>03456 
<anchor xml:id="_testlib_8h_source_1l03457"/><link linkend="_struct_in_stream_1a7848236cb25239dc96ac1d01953116c9">03457</link> std::string&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">InStream::readWord</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03458"/>03458 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>);
<anchor xml:id="_testlib_8h_source_1l03459"/>03459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!p.<link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">matches</link>(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>))&#32;{
<anchor xml:id="_testlib_8h_source_1l03460"/>03460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>&#32;==&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03461"/>03461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03462"/>03462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l03463"/>03463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Token&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+
<anchor xml:id="_testlib_8h_source_1l03464"/>03464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03465"/>03465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03466"/>03466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Token&#32;parameter&#32;[name=&quot;</emphasis>&#32;+&#32;variableName&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>)&#32;+
<anchor xml:id="_testlib_8h_source_1l03467"/>03467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\&quot;,&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03468"/>03468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03469"/>03469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03470"/>03470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Token&#32;element&#32;[index=&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;\&quot;&quot;</emphasis>&#32;+
<anchor xml:id="_testlib_8h_source_1l03471"/>03471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_part(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+
<anchor xml:id="_testlib_8h_source_1l03472"/>03472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03473"/>03473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03474"/>03474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Token&#32;element&#32;&quot;</emphasis>&#32;+&#32;variableName&#32;+&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;\&quot;&quot;</emphasis>&#32;+
<anchor xml:id="_testlib_8h_source_1l03475"/>03475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_part(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+
<anchor xml:id="_testlib_8h_source_1l03476"/>03476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03477"/>03477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03478"/>03478 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03479"/>03479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03480"/>03480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variableName);
<anchor xml:id="_testlib_8h_source_1l03481"/>03481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>;
<anchor xml:id="_testlib_8h_source_1l03482"/>03482 }
<anchor xml:id="_testlib_8h_source_1l03483"/>03483 
<anchor xml:id="_testlib_8h_source_1l03484"/>03484 std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l03485"/><link linkend="_struct_in_stream_1a0382d1f95cecf40e7c728c033c14123b">03485</link> <link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">InStream::readWords</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03486"/>03486 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">readWords</link>,&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(p,&#32;variablesName),&#32;std::string,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03487"/>03487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l03488"/>03488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l03489"/>03489 }
<anchor xml:id="_testlib_8h_source_1l03490"/>03490 
<anchor xml:id="_testlib_8h_source_1l03491"/><link linkend="_struct_in_stream_1aaa61148d12958728cd443f21b2ed0aa3">03491</link> std::vector&lt;std::string&gt;&#32;<link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">InStream::readWords</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03492"/>03492 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">readWords</link>,&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(),&#32;std::string,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03493"/>03493 }
<anchor xml:id="_testlib_8h_source_1l03494"/>03494 
<anchor xml:id="_testlib_8h_source_1l03495"/><link linkend="_struct_in_stream_1a33a01a1ab403b91c58d630b2650f999e">03495</link> std::string&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">InStream::readWord</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03496"/>03496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(<link linkend="_classpattern">pattern</link>(ptrn),&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l03497"/>03497 }
<anchor xml:id="_testlib_8h_source_1l03498"/>03498 
<anchor xml:id="_testlib_8h_source_1l03499"/>03499 std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l03500"/><link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">03500</link> <link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">InStream::readWords</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03501"/>03501 &#32;&#32;&#32;&#32;<link linkend="_classpattern">pattern</link>&#32;p(ptrn);
<anchor xml:id="_testlib_8h_source_1l03502"/>03502 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf">readWords</link>,&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(p,&#32;variablesName),&#32;std::string,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03503"/>03503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l03504"/>03504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l03505"/>03505 }
<anchor xml:id="_testlib_8h_source_1l03506"/>03506 
<anchor xml:id="_testlib_8h_source_1l03507"/><link linkend="_struct_in_stream_1aa7e276efc82ccd5bcefbfaf8f0391677">03507</link> std::string&#32;<link linkend="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0">InStream::readToken</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03508"/>03508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(p,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l03509"/>03509 }
<anchor xml:id="_testlib_8h_source_1l03510"/>03510 
<anchor xml:id="_testlib_8h_source_1l03511"/>03511 std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l03512"/><link linkend="_struct_in_stream_1a5f2d2a617eed60c5a05872af6ece6855">03512</link> <link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">InStream::readTokens</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03513"/>03513 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">readTokens</link>,&#32;<link linkend="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0">readToken</link>(p,&#32;variablesName),&#32;std::string,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03514"/>03514 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l03515"/>03515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l03516"/>03516 }
<anchor xml:id="_testlib_8h_source_1l03517"/>03517 
<anchor xml:id="_testlib_8h_source_1l03518"/><link linkend="_struct_in_stream_1a7b79dfec1ae85f251876f603751036d9">03518</link> std::vector&lt;std::string&gt;&#32;<link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">InStream::readTokens</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03519"/>03519 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">readTokens</link>,&#32;<link linkend="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0">readToken</link>(),&#32;std::string,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03520"/>03520 }
<anchor xml:id="_testlib_8h_source_1l03521"/>03521 
<anchor xml:id="_testlib_8h_source_1l03522"/><link linkend="_struct_in_stream_1a1551acb574a25586a2ba2ad594398e8c">03522</link> std::string&#32;<link linkend="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0">InStream::readToken</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03523"/>03523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(ptrn,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l03524"/>03524 }
<anchor xml:id="_testlib_8h_source_1l03525"/>03525 
<anchor xml:id="_testlib_8h_source_1l03526"/>03526 std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l03527"/><link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">03527</link> <link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">InStream::readTokens</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03528"/>03528 &#32;&#32;&#32;&#32;<link linkend="_classpattern">pattern</link>&#32;p(ptrn);
<anchor xml:id="_testlib_8h_source_1l03529"/>03529 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b">readTokens</link>,&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(p,&#32;variablesName),&#32;std::string,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03530"/>03530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l03531"/>03531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l03532"/>03532 }
<anchor xml:id="_testlib_8h_source_1l03533"/>03533 
<anchor xml:id="_testlib_8h_source_1l03534"/><link linkend="_struct_in_stream_1aae65d2db41677626fd5ffa446be65003">03534</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">InStream::readWordTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03535"/>03535 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(result);
<anchor xml:id="_testlib_8h_source_1l03536"/>03536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!p.<link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">matches</link>(result))&#32;{
<anchor xml:id="_testlib_8h_source_1l03537"/>03537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03538"/>03538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Token&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(result)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+
<anchor xml:id="_testlib_8h_source_1l03539"/>03539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03540"/>03540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03541"/>03541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Token&#32;parameter&#32;[name=&quot;</emphasis>&#32;+&#32;variableName&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l03542"/>03542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\&quot;,&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03543"/>03543 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03544"/>03544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03545"/>03545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variableName);
<anchor xml:id="_testlib_8h_source_1l03546"/>03546 }
<anchor xml:id="_testlib_8h_source_1l03547"/>03547 
<anchor xml:id="_testlib_8h_source_1l03548"/><link linkend="_struct_in_stream_1a78c7969db04a87aea6263c8563dc5c93">03548</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">InStream::readWordTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03549"/>03549 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(result,&#32;<link linkend="_classpattern">pattern</link>(ptrn),&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l03550"/>03550 }
<anchor xml:id="_testlib_8h_source_1l03551"/>03551 
<anchor xml:id="_testlib_8h_source_1l03552"/><link linkend="_struct_in_stream_1a6cc04d722a5e707b0450396c671c8732">03552</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72">InStream::readTokenTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03553"/>03553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(result,&#32;p,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l03554"/>03554 }
<anchor xml:id="_testlib_8h_source_1l03555"/>03555 
<anchor xml:id="_testlib_8h_source_1l03556"/><link linkend="_struct_in_stream_1ac191b4317fc175b291cae1fa4fc7b399">03556</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72">InStream::readTokenTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03557"/>03557 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(result,&#32;ptrn,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l03558"/>03558 }
<anchor xml:id="_testlib_8h_source_1l03559"/>03559 
<anchor xml:id="_testlib_8h_source_1l03560"/>03560 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l03561"/>03561 __attribute__((pure))
<anchor xml:id="_testlib_8h_source_1l03562"/>03562 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l03563"/>03563 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;equals(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;integer,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s)&#32;{
<anchor xml:id="_testlib_8h_source_1l03564"/>03564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(integer&#32;==&#32;<link linkend="_testlib_8h_1af17a13b2ae0e9c24c020ac1f044f30c2">LLONG_MIN</link>)
<anchor xml:id="_testlib_8h_source_1l03565"/>03565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;strcmp(s,&#32;<emphasis role="stringliteral">&quot;-9223372036854775808&quot;</emphasis>)&#32;==&#32;0;
<anchor xml:id="_testlib_8h_source_1l03566"/>03566 
<anchor xml:id="_testlib_8h_source_1l03567"/>03567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(integer&#32;==&#32;0LL)
<anchor xml:id="_testlib_8h_source_1l03568"/>03568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;strcmp(s,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>)&#32;==&#32;0;
<anchor xml:id="_testlib_8h_source_1l03569"/>03569 
<anchor xml:id="_testlib_8h_source_1l03570"/>03570 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;strlen(s);
<anchor xml:id="_testlib_8h_source_1l03571"/>03571 
<anchor xml:id="_testlib_8h_source_1l03572"/>03572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l03573"/>03573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03574"/>03574 
<anchor xml:id="_testlib_8h_source_1l03575"/>03575 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(integer&#32;&lt;&#32;0&#32;&amp;&amp;&#32;s[0]&#32;!=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03576"/>03576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03577"/>03577 
<anchor xml:id="_testlib_8h_source_1l03578"/>03578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(integer&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l03579"/>03579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s++,&#32;length--,&#32;integer&#32;=&#32;-integer;
<anchor xml:id="_testlib_8h_source_1l03580"/>03580 
<anchor xml:id="_testlib_8h_source_1l03581"/>03581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l03582"/>03582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03583"/>03583 
<anchor xml:id="_testlib_8h_source_1l03584"/>03584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(integer&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l03585"/>03585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;digit&#32;=&#32;int(integer&#32;%&#32;10);
<anchor xml:id="_testlib_8h_source_1l03586"/>03586 
<anchor xml:id="_testlib_8h_source_1l03587"/>03587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[length&#32;-&#32;1]&#32;!=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;digit)
<anchor xml:id="_testlib_8h_source_1l03588"/>03588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03589"/>03589 
<anchor xml:id="_testlib_8h_source_1l03590"/>03590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length--;
<anchor xml:id="_testlib_8h_source_1l03591"/>03591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;integer&#32;/=&#32;10;
<anchor xml:id="_testlib_8h_source_1l03592"/>03592 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03593"/>03593 
<anchor xml:id="_testlib_8h_source_1l03594"/>03594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;length&#32;==&#32;0;
<anchor xml:id="_testlib_8h_source_1l03595"/>03595 }
<anchor xml:id="_testlib_8h_source_1l03596"/>03596 
<anchor xml:id="_testlib_8h_source_1l03597"/>03597 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l03598"/>03598 __attribute__((pure))
<anchor xml:id="_testlib_8h_source_1l03599"/>03599 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l03600"/>03600 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;equals(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;integer,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s)&#32;{
<anchor xml:id="_testlib_8h_source_1l03601"/>03601 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(integer&#32;==&#32;<link linkend="_testlib_8h_1aa1dd7166a75b73ad62b111ae6fc17c59">ULLONG_MAX</link>)
<anchor xml:id="_testlib_8h_source_1l03602"/>03602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;strcmp(s,&#32;<emphasis role="stringliteral">&quot;18446744073709551615&quot;</emphasis>)&#32;==&#32;0;
<anchor xml:id="_testlib_8h_source_1l03603"/>03603 
<anchor xml:id="_testlib_8h_source_1l03604"/>03604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(integer&#32;==&#32;0ULL)
<anchor xml:id="_testlib_8h_source_1l03605"/>03605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;strcmp(s,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>)&#32;==&#32;0;
<anchor xml:id="_testlib_8h_source_1l03606"/>03606 
<anchor xml:id="_testlib_8h_source_1l03607"/>03607 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;strlen(s);
<anchor xml:id="_testlib_8h_source_1l03608"/>03608 
<anchor xml:id="_testlib_8h_source_1l03609"/>03609 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l03610"/>03610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03611"/>03611 
<anchor xml:id="_testlib_8h_source_1l03612"/>03612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(integer&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l03613"/>03613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;digit&#32;=&#32;int(integer&#32;%&#32;10);
<anchor xml:id="_testlib_8h_source_1l03614"/>03614 
<anchor xml:id="_testlib_8h_source_1l03615"/>03615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[length&#32;-&#32;1]&#32;!=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;digit)
<anchor xml:id="_testlib_8h_source_1l03616"/>03616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03617"/>03617 
<anchor xml:id="_testlib_8h_source_1l03618"/>03618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length--;
<anchor xml:id="_testlib_8h_source_1l03619"/>03619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;integer&#32;/=&#32;10;
<anchor xml:id="_testlib_8h_source_1l03620"/>03620 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03621"/>03621 
<anchor xml:id="_testlib_8h_source_1l03622"/>03622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;length&#32;==&#32;0;
<anchor xml:id="_testlib_8h_source_1l03623"/>03623 }
<anchor xml:id="_testlib_8h_source_1l03624"/>03624 
<anchor xml:id="_testlib_8h_source_1l03625"/>03625 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;stringToDouble(<link linkend="_struct_in_stream">InStream</link>&#32;&amp;in,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer)&#32;{
<anchor xml:id="_testlib_8h_source_1l03626"/>03626 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03627"/>03627 
<anchor xml:id="_testlib_8h_source_1l03628"/>03628 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;strlen(buffer);
<anchor xml:id="_testlib_8h_source_1l03629"/>03629 
<anchor xml:id="_testlib_8h_source_1l03630"/>03630 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minusCount&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l03631"/>03631 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;plusCount&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l03632"/>03632 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decimalPointCount&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l03633"/>03633 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;digitCount&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l03634"/>03634 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;eCount&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l03635"/>03635 
<anchor xml:id="_testlib_8h_source_1l03636"/>03636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;length;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l03637"/>03637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&lt;=&#32;buffer[i]&#32;&amp;&amp;&#32;buffer[i]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)&#32;||&#32;buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>
<anchor xml:id="_testlib_8h_source_1l03638"/>03638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>&#32;||&#32;buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>
<anchor xml:id="_testlib_8h_source_1l03639"/>03639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;||&#32;buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03640"/>03640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&lt;=&#32;buffer[i]&#32;&amp;&amp;&#32;buffer[i]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03641"/>03641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digitCount++;
<anchor xml:id="_testlib_8h_source_1l03642"/>03642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>&#32;||&#32;buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03643"/>03643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eCount++;
<anchor xml:id="_testlib_8h_source_1l03644"/>03644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03645"/>03645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minusCount++;
<anchor xml:id="_testlib_8h_source_1l03646"/>03646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03647"/>03647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;plusCount++;
<anchor xml:id="_testlib_8h_source_1l03648"/>03648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03649"/>03649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decimalPointCount++;
<anchor xml:id="_testlib_8h_source_1l03650"/>03650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03651"/>03651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03652"/>03652 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03653"/>03653 
<anchor xml:id="_testlib_8h_source_1l03654"/>03654 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;for&#32;sure&#32;is&#32;not&#32;a&#32;number&#32;in&#32;standard&#32;notation&#32;or&#32;in&#32;e-notation.</emphasis>
<anchor xml:id="_testlib_8h_source_1l03655"/>03655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(digitCount&#32;==&#32;0&#32;||&#32;minusCount&#32;&gt;&#32;2&#32;||&#32;plusCount&#32;&gt;&#32;2&#32;||&#32;decimalPointCount&#32;&gt;&#32;1&#32;||&#32;eCount&#32;&gt;&#32;1)
<anchor xml:id="_testlib_8h_source_1l03656"/>03656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03657"/>03657 
<anchor xml:id="_testlib_8h_source_1l03658"/>03658 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*suffix&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[length&#32;+&#32;1];
<anchor xml:id="_testlib_8h_source_1l03659"/>03659 &#32;&#32;&#32;&#32;std::memset(suffix,&#32;0,&#32;length&#32;+&#32;1);
<anchor xml:id="_testlib_8h_source_1l03660"/>03660 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;scanned&#32;=&#32;std::sscanf(buffer,&#32;<emphasis role="stringliteral">&quot;%lf%s&quot;</emphasis>,&#32;&amp;result,&#32;suffix);
<anchor xml:id="_testlib_8h_source_1l03661"/>03661 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty&#32;=&#32;strlen(suffix)&#32;==&#32;0;
<anchor xml:id="_testlib_8h_source_1l03662"/>03662 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;suffix;
<anchor xml:id="_testlib_8h_source_1l03663"/>03663 
<anchor xml:id="_testlib_8h_source_1l03664"/>03664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(scanned&#32;==&#32;1&#32;||&#32;(scanned&#32;==&#32;2&#32;&amp;&amp;&#32;empty))&#32;{
<anchor xml:id="_testlib_8h_source_1l03665"/>03665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__testlib_isNaN(result))
<anchor xml:id="_testlib_8h_source_1l03666"/>03666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03667"/>03667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03668"/>03668 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03669"/>03669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03670"/>03670 }
<anchor xml:id="_testlib_8h_source_1l03671"/>03671 
<anchor xml:id="_testlib_8h_source_1l03672"/>03672 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;stringToDouble(<link linkend="_struct_in_stream">InStream</link>&#32;&amp;in,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;buffer)&#32;{
<anchor xml:id="_testlib_8h_source_1l03673"/>03673 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;buffer.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l03674"/>03674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03675"/>03675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&#32;(it&#32;contains&#32;\\0)&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03676"/>03676 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stringToDouble(in,&#32;buffer.c_str());
<anchor xml:id="_testlib_8h_source_1l03677"/>03677 }
<anchor xml:id="_testlib_8h_source_1l03678"/>03678 
<anchor xml:id="_testlib_8h_source_1l03679"/>03679 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;stringToStrictDouble(<link linkend="_struct_in_stream">InStream</link>&#32;&amp;in,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer,
<anchor xml:id="_testlib_8h_source_1l03680"/>03680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount)&#32;{
<anchor xml:id="_testlib_8h_source_1l03681"/>03681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minAfterPointDigitCount&#32;&lt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l03682"/>03682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;stringToStrictDouble:&#32;minAfterPointDigitCount&#32;should&#32;be&#32;non-negative.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03683"/>03683 
<anchor xml:id="_testlib_8h_source_1l03684"/>03684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minAfterPointDigitCount&#32;&gt;&#32;maxAfterPointDigitCount)
<anchor xml:id="_testlib_8h_source_1l03685"/>03685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,
<anchor xml:id="_testlib_8h_source_1l03686"/>03686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;stringToStrictDouble:&#32;minAfterPointDigitCount&#32;should&#32;be&#32;less&#32;or&#32;equal&#32;to&#32;maxAfterPointDigitCount.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03687"/>03687 
<anchor xml:id="_testlib_8h_source_1l03688"/>03688 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03689"/>03689 
<anchor xml:id="_testlib_8h_source_1l03690"/>03690 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;strlen(buffer);
<anchor xml:id="_testlib_8h_source_1l03691"/>03691 
<anchor xml:id="_testlib_8h_source_1l03692"/>03692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;==&#32;0&#32;||&#32;length&#32;&gt;&#32;1000)
<anchor xml:id="_testlib_8h_source_1l03693"/>03693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;strict&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03694"/>03694 
<anchor xml:id="_testlib_8h_source_1l03695"/>03695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[0]&#32;!=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&amp;&amp;&#32;(buffer[0]&#32;&lt;&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;buffer[0]&#32;&gt;&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))
<anchor xml:id="_testlib_8h_source_1l03696"/>03696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;strict&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03697"/>03697 
<anchor xml:id="_testlib_8h_source_1l03698"/>03698 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pointPos&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l03699"/>03699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;+&#32;1&#32;&lt;&#32;length;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l03700"/>03700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03701"/>03701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pointPos&#32;&gt;&#32;-1)
<anchor xml:id="_testlib_8h_source_1l03702"/>03702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;strict&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03703"/>03703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pointPos&#32;=&#32;int(i);
<anchor xml:id="_testlib_8h_source_1l03704"/>03704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03705"/>03705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;!=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>&#32;&amp;&amp;&#32;(buffer[i]&#32;&lt;&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;buffer[i]&#32;&gt;&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))
<anchor xml:id="_testlib_8h_source_1l03706"/>03706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;strict&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03707"/>03707 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03708"/>03708 
<anchor xml:id="_testlib_8h_source_1l03709"/>03709 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[length&#32;-&#32;1]&#32;&lt;&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;buffer[length&#32;-&#32;1]&#32;&gt;&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03710"/>03710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;strict&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03711"/>03711 
<anchor xml:id="_testlib_8h_source_1l03712"/>03712 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;afterDigitsCount&#32;=&#32;(pointPos&#32;==&#32;-1&#32;?&#32;0&#32;:&#32;int(length)&#32;-&#32;pointPos&#32;-&#32;1);
<anchor xml:id="_testlib_8h_source_1l03713"/>03713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(afterDigitsCount&#32;&lt;&#32;minAfterPointDigitCount&#32;||&#32;afterDigitsCount&#32;&gt;&#32;maxAfterPointDigitCount)
<anchor xml:id="_testlib_8h_source_1l03714"/>03714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;strict&#32;double&#32;with&#32;number&#32;of&#32;digits&#32;after&#32;point&#32;in&#32;range&#32;[&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l03715"/>03715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;vtos(minAfterPointDigitCount)
<anchor xml:id="_testlib_8h_source_1l03716"/>03716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l03717"/>03717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;vtos(maxAfterPointDigitCount)
<anchor xml:id="_testlib_8h_source_1l03718"/>03718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;],&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str()
<anchor xml:id="_testlib_8h_source_1l03719"/>03719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_testlib_8h_source_1l03720"/>03720 
<anchor xml:id="_testlib_8h_source_1l03721"/>03721 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;firstDigitPos&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l03722"/>03722 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;length;&#32;i++)
<anchor xml:id="_testlib_8h_source_1l03723"/>03723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;buffer[i]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03724"/>03724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstDigitPos&#32;=&#32;int(i);
<anchor xml:id="_testlib_8h_source_1l03725"/>03725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03726"/>03726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03727"/>03727 
<anchor xml:id="_testlib_8h_source_1l03728"/>03728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(firstDigitPos&#32;&gt;&#32;1&#32;||&#32;firstDigitPos&#32;==&#32;-1)
<anchor xml:id="_testlib_8h_source_1l03729"/>03729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;strict&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03730"/>03730 
<anchor xml:id="_testlib_8h_source_1l03731"/>03731 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[firstDigitPos]&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;firstDigitPos&#32;+&#32;1&#32;&lt;&#32;<emphasis role="keywordtype">int</emphasis>(length)
<anchor xml:id="_testlib_8h_source_1l03732"/>03732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;buffer[firstDigitPos&#32;+&#32;1]&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;buffer[firstDigitPos&#32;+&#32;1]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03733"/>03733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;strict&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03734"/>03734 
<anchor xml:id="_testlib_8h_source_1l03735"/>03735 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*suffix&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[length&#32;+&#32;1];
<anchor xml:id="_testlib_8h_source_1l03736"/>03736 &#32;&#32;&#32;&#32;std::memset(suffix,&#32;0,&#32;length&#32;+&#32;1);
<anchor xml:id="_testlib_8h_source_1l03737"/>03737 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;scanned&#32;=&#32;std::sscanf(buffer,&#32;<emphasis role="stringliteral">&quot;%lf%s&quot;</emphasis>,&#32;&amp;result,&#32;suffix);
<anchor xml:id="_testlib_8h_source_1l03738"/>03738 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty&#32;=&#32;strlen(suffix)&#32;==&#32;0;
<anchor xml:id="_testlib_8h_source_1l03739"/>03739 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;suffix;
<anchor xml:id="_testlib_8h_source_1l03740"/>03740 
<anchor xml:id="_testlib_8h_source_1l03741"/>03741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(scanned&#32;==&#32;1&#32;||&#32;(scanned&#32;==&#32;2&#32;&amp;&amp;&#32;empty))&#32;{
<anchor xml:id="_testlib_8h_source_1l03742"/>03742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__testlib_isNaN(result)&#32;||&#32;__testlib_isInfinite(result))
<anchor xml:id="_testlib_8h_source_1l03743"/>03743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03744"/>03744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[0]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&amp;&amp;&#32;result&#32;&gt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l03745"/>03745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Redundant&#32;minus&#32;in&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03746"/>03746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03747"/>03747 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03748"/>03748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03749"/>03749 }
<anchor xml:id="_testlib_8h_source_1l03750"/>03750 
<anchor xml:id="_testlib_8h_source_1l03751"/>03751 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;stringToStrictDouble(<link linkend="_struct_in_stream">InStream</link>&#32;&amp;in,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;buffer,
<anchor xml:id="_testlib_8h_source_1l03752"/>03752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount)&#32;{
<anchor xml:id="_testlib_8h_source_1l03753"/>03753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;buffer.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l03754"/>03754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03755"/>03755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;double,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&#32;(it&#32;contains&#32;\\0)&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03756"/>03756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stringToStrictDouble(in,&#32;buffer.c_str(),&#32;minAfterPointDigitCount,&#32;maxAfterPointDigitCount);
<anchor xml:id="_testlib_8h_source_1l03757"/>03757 }
<anchor xml:id="_testlib_8h_source_1l03758"/>03758 
<anchor xml:id="_testlib_8h_source_1l03759"/>03759 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;stringToLongLong(<link linkend="_struct_in_stream">InStream</link>&#32;&amp;in,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer)&#32;{
<anchor xml:id="_testlib_8h_source_1l03760"/>03760 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;strlen(buffer);
<anchor xml:id="_testlib_8h_source_1l03761"/>03761 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;==&#32;0&#32;||&#32;length&#32;&gt;&#32;20)
<anchor xml:id="_testlib_8h_source_1l03762"/>03762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03763"/>03763 
<anchor xml:id="_testlib_8h_source_1l03764"/>03764 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_minus&#32;=&#32;(length&#32;&gt;&#32;1&#32;&amp;&amp;&#32;buffer[0]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03765"/>03765 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zeroes&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l03766"/>03766 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;processingZeroes&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03767"/>03767 
<anchor xml:id="_testlib_8h_source_1l03768"/>03768 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;(has_minus&#32;?&#32;1&#32;:&#32;0);&#32;i&#32;&lt;&#32;int(length);&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l03769"/>03769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;processingZeroes)
<anchor xml:id="_testlib_8h_source_1l03770"/>03770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zeroes++;
<anchor xml:id="_testlib_8h_source_1l03771"/>03771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03772"/>03772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;processingZeroes&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l03773"/>03773 
<anchor xml:id="_testlib_8h_source_1l03774"/>03774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;&lt;&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;buffer[i]&#32;&gt;&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03775"/>03775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03776"/>03776 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03777"/>03777 
<anchor xml:id="_testlib_8h_source_1l03778"/>03778 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03779"/>03779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03780"/>03780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;std::stoll(buffer);
<anchor xml:id="_testlib_8h_source_1l03781"/>03781 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::exception&amp;)&#32;{
<anchor xml:id="_testlib_8h_source_1l03782"/>03782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03783"/>03783 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)&#32;{
<anchor xml:id="_testlib_8h_source_1l03784"/>03784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03785"/>03785 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03786"/>03786 
<anchor xml:id="_testlib_8h_source_1l03787"/>03787 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((zeroes&#32;&gt;&#32;0&#32;&amp;&amp;&#32;(result&#32;!=&#32;0&#32;||&#32;has_minus))&#32;||&#32;zeroes&#32;&gt;&#32;1)
<anchor xml:id="_testlib_8h_source_1l03788"/>03788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03789"/>03789 
<anchor xml:id="_testlib_8h_source_1l03790"/>03790 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03791"/>03791 }
<anchor xml:id="_testlib_8h_source_1l03792"/>03792 
<anchor xml:id="_testlib_8h_source_1l03793"/>03793 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;stringToLongLong(<link linkend="_struct_in_stream">InStream</link>&#32;&amp;in,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;buffer)&#32;{
<anchor xml:id="_testlib_8h_source_1l03794"/>03794 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;buffer.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l03795"/>03795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03796"/>03796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&#32;(it&#32;contains&#32;\\0)&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03797"/>03797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stringToLongLong(in,&#32;buffer.c_str());
<anchor xml:id="_testlib_8h_source_1l03798"/>03798 }
<anchor xml:id="_testlib_8h_source_1l03799"/>03799 
<anchor xml:id="_testlib_8h_source_1l03800"/>03800 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;stringToUnsignedLongLong(<link linkend="_struct_in_stream">InStream</link>&#32;&amp;in,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer)&#32;{
<anchor xml:id="_testlib_8h_source_1l03801"/>03801 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;strlen(buffer);
<anchor xml:id="_testlib_8h_source_1l03802"/>03802 
<anchor xml:id="_testlib_8h_source_1l03803"/>03803 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;==&#32;0&#32;||&#32;length&#32;&gt;&#32;20)
<anchor xml:id="_testlib_8h_source_1l03804"/>03804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;unsigned&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03805"/>03805 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;&gt;&#32;1&#32;&amp;&amp;&#32;buffer[0]&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03806"/>03806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;unsigned&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03807"/>03807 
<anchor xml:id="_testlib_8h_source_1l03808"/>03808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;int(length);&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l03809"/>03809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;&lt;&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;buffer[i]&#32;&gt;&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03810"/>03810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;unsigned&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03811"/>03811 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03812"/>03812 
<anchor xml:id="_testlib_8h_source_1l03813"/>03813 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03814"/>03814 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03815"/>03815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;std::stoull(buffer);
<anchor xml:id="_testlib_8h_source_1l03816"/>03816 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::exception&amp;)&#32;{
<anchor xml:id="_testlib_8h_source_1l03817"/>03817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;unsigned&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03818"/>03818 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)&#32;{
<anchor xml:id="_testlib_8h_source_1l03819"/>03819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;unsigned&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03820"/>03820 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03821"/>03821 
<anchor xml:id="_testlib_8h_source_1l03822"/>03822 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03823"/>03823 }
<anchor xml:id="_testlib_8h_source_1l03824"/>03824 
<anchor xml:id="_testlib_8h_source_1l03825"/>03825 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;stringToUnsignedLongLong(<link linkend="_struct_in_stream">InStream</link>&#32;&amp;in,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;buffer)&#32;{
<anchor xml:id="_testlib_8h_source_1l03826"/>03826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;buffer.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l03827"/>03827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer[i]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03828"/>03828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;unsigned&#32;integer,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(buffer)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&#32;(it&#32;contains&#32;\\0)&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03829"/>03829 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stringToUnsignedLongLong(in,&#32;buffer.c_str());
<anchor xml:id="_testlib_8h_source_1l03830"/>03830 }
<anchor xml:id="_testlib_8h_source_1l03831"/>03831 
<anchor xml:id="_testlib_8h_source_1l03832"/><link linkend="_struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08">03832</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08">InStream::readInteger</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03833"/>03833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;<link linkend="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b">seekEof</link>())
<anchor xml:id="_testlib_8h_source_1l03834"/>03834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;end&#32;of&#32;file&#32;-&#32;int32&#32;expected&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03835"/>03835 
<anchor xml:id="_testlib_8h_source_1l03836"/>03836 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>);
<anchor xml:id="_testlib_8h_source_1l03837"/>03837 
<anchor xml:id="_testlib_8h_source_1l03838"/>03838 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;value&#32;=&#32;stringToLongLong(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>);
<anchor xml:id="_testlib_8h_source_1l03839"/>03839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;&lt;&#32;INT_MIN&#32;||&#32;value&#32;&gt;&#32;INT_MAX)
<anchor xml:id="_testlib_8h_source_1l03840"/>03840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;(<emphasis role="stringliteral">&quot;Expected&#32;int32,&#32;but&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;found&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03841"/>03841 
<anchor xml:id="_testlib_8h_source_1l03842"/>03842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int(value);
<anchor xml:id="_testlib_8h_source_1l03843"/>03843 }
<anchor xml:id="_testlib_8h_source_1l03844"/>03844 
<anchor xml:id="_testlib_8h_source_1l03845"/><link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">03845</link> <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">InStream::readLong</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03846"/>03846 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;<link linkend="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b">seekEof</link>())
<anchor xml:id="_testlib_8h_source_1l03847"/>03847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;end&#32;of&#32;file&#32;-&#32;int64&#32;expected&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03848"/>03848 
<anchor xml:id="_testlib_8h_source_1l03849"/>03849 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>);
<anchor xml:id="_testlib_8h_source_1l03850"/>03850 
<anchor xml:id="_testlib_8h_source_1l03851"/>03851 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stringToLongLong(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>);
<anchor xml:id="_testlib_8h_source_1l03852"/>03852 }
<anchor xml:id="_testlib_8h_source_1l03853"/>03853 
<anchor xml:id="_testlib_8h_source_1l03854"/><link linkend="_struct_in_stream_1a473c29087621184bb71998a12957e822">03854</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_in_stream_1a473c29087621184bb71998a12957e822">InStream::readUnsignedLong</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03855"/>03855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;<link linkend="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b">seekEof</link>())
<anchor xml:id="_testlib_8h_source_1l03856"/>03856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;end&#32;of&#32;file&#32;-&#32;int64&#32;expected&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l03857"/>03857 
<anchor xml:id="_testlib_8h_source_1l03858"/>03858 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7">readWordTo</link>(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>);
<anchor xml:id="_testlib_8h_source_1l03859"/>03859 
<anchor xml:id="_testlib_8h_source_1l03860"/>03860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stringToUnsignedLongLong(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>);
<anchor xml:id="_testlib_8h_source_1l03861"/>03861 }
<anchor xml:id="_testlib_8h_source_1l03862"/>03862 
<anchor xml:id="_testlib_8h_source_1l03863"/><link linkend="_struct_in_stream_1a1398548ec0f156ddc9add251addb63c4">03863</link> <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">InStream::readLong</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03864"/>03864 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;result&#32;=&#32;<link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">readLong</link>();
<anchor xml:id="_testlib_8h_source_1l03865"/>03865 
<anchor xml:id="_testlib_8h_source_1l03866"/>03866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;&lt;&#32;minv&#32;||&#32;result&#32;&gt;&#32;maxv)&#32;{
<anchor xml:id="_testlib_8h_source_1l03867"/>03867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>&#32;==&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03868"/>03868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03869"/>03869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Integer&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+
<anchor xml:id="_testlib_8h_source_1l03870"/>03870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03871"/>03871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03872"/>03872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Integer&#32;parameter&#32;[name=&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l03873"/>03873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03874"/>03874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03875"/>03875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03876"/>03876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Integer&#32;element&#32;[index=&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l03877"/>03877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03878"/>03878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03879"/>03879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l03880"/>03880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Integer&#32;element&#32;&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+
<anchor xml:id="_testlib_8h_source_1l03881"/>03881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03882"/>03882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03883"/>03883 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03884"/>03884 
<anchor xml:id="_testlib_8h_source_1l03885"/>03885 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variableName.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l03886"/>03886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd">addBoundsHit</link>(variableName,&#32;<link linkend="_struct_validator_bounds_hit">ValidatorBoundsHit</link>(minv&#32;==&#32;result,&#32;maxv&#32;==&#32;result));
<anchor xml:id="_testlib_8h_source_1l03887"/>03887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1aaf48c6b401e8417c3da493f28ca65061">adjustConstantBounds</link>(variableName,&#32;minv,&#32;maxv);
<anchor xml:id="_testlib_8h_source_1l03888"/>03888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variableName);
<anchor xml:id="_testlib_8h_source_1l03889"/>03889 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03890"/>03890 
<anchor xml:id="_testlib_8h_source_1l03891"/>03891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03892"/>03892 }
<anchor xml:id="_testlib_8h_source_1l03893"/>03893 
<anchor xml:id="_testlib_8h_source_1l03894"/>03894 std::vector&lt;long&#32;long&gt;
<anchor xml:id="_testlib_8h_source_1l03895"/><link linkend="_struct_in_stream_1a469d95f96c09746781621480b74c5c83">03895</link> <link linkend="_struct_in_stream_1a469d95f96c09746781621480b74c5c83">InStream::readLongs</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03896"/>03896 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a469d95f96c09746781621480b74c5c83">readLongs</link>,&#32;<link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">readLong</link>(minv,&#32;maxv,&#32;variablesName),&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03897"/>03897 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l03898"/>03898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l03899"/>03899 }
<anchor xml:id="_testlib_8h_source_1l03900"/>03900 
<anchor xml:id="_testlib_8h_source_1l03901"/><link linkend="_struct_in_stream_1ab135bb75d235e57fea89a248acd51015">03901</link> std::vector&lt;long&#32;long&gt;&#32;<link linkend="_struct_in_stream_1a469d95f96c09746781621480b74c5c83">InStream::readLongs</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03902"/>03902 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a469d95f96c09746781621480b74c5c83">readLongs</link>,&#32;<link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">readLong</link>(),&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03903"/>03903 }
<anchor xml:id="_testlib_8h_source_1l03904"/>03904 
<anchor xml:id="_testlib_8h_source_1l03905"/>03905 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
<anchor xml:id="_testlib_8h_source_1l03906"/><link linkend="_struct_in_stream_1ac168f51d536fd2fef12d6aa87ff5795f">03906</link> <link linkend="_struct_in_stream_1a473c29087621184bb71998a12957e822">InStream::readUnsignedLong</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03907"/>03907 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;result&#32;=&#32;<link linkend="_struct_in_stream_1a473c29087621184bb71998a12957e822">readUnsignedLong</link>();
<anchor xml:id="_testlib_8h_source_1l03908"/>03908 
<anchor xml:id="_testlib_8h_source_1l03909"/>03909 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;&lt;&#32;minv&#32;||&#32;result&#32;&gt;&#32;maxv)&#32;{
<anchor xml:id="_testlib_8h_source_1l03910"/>03910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>&#32;==&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03911"/>03911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03912"/>03912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l03913"/>03913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Unsigned&#32;integer&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+
<anchor xml:id="_testlib_8h_source_1l03914"/>03914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03915"/>03915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03916"/>03916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l03917"/>03917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Unsigned&#32;integer&#32;parameter&#32;[name=&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l03918"/>03918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03919"/>03919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03920"/>03920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03921"/>03921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l03922"/>03922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Unsigned&#32;integer&#32;element&#32;[index=&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l03923"/>03923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03924"/>03924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03925"/>03925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Unsigned&#32;integer&#32;element&#32;&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+
<anchor xml:id="_testlib_8h_source_1l03926"/>03926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+
<anchor xml:id="_testlib_8h_source_1l03927"/>03927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03928"/>03928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03929"/>03929 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03930"/>03930 
<anchor xml:id="_testlib_8h_source_1l03931"/>03931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variableName.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l03932"/>03932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd">addBoundsHit</link>(variableName,&#32;<link linkend="_struct_validator_bounds_hit">ValidatorBoundsHit</link>(minv&#32;==&#32;result,&#32;maxv&#32;==&#32;result));
<anchor xml:id="_testlib_8h_source_1l03933"/>03933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1aaf48c6b401e8417c3da493f28ca65061">adjustConstantBounds</link>(variableName,&#32;minv,&#32;maxv);
<anchor xml:id="_testlib_8h_source_1l03934"/>03934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variableName);
<anchor xml:id="_testlib_8h_source_1l03935"/>03935 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03936"/>03936 
<anchor xml:id="_testlib_8h_source_1l03937"/>03937 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03938"/>03938 }
<anchor xml:id="_testlib_8h_source_1l03939"/>03939 
<anchor xml:id="_testlib_8h_source_1l03940"/><link linkend="_struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a">03940</link> std::vector&lt;unsigned&#32;long&#32;long&gt;&#32;<link linkend="_struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a">InStream::readUnsignedLongs</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l03941"/>03941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03942"/>03942 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a">readUnsignedLongs</link>,&#32;<link linkend="_struct_in_stream_1a473c29087621184bb71998a12957e822">readUnsignedLong</link>(minv,&#32;maxv,&#32;variablesName),&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03943"/>03943 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l03944"/>03944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l03945"/>03945 }
<anchor xml:id="_testlib_8h_source_1l03946"/>03946 
<anchor xml:id="_testlib_8h_source_1l03947"/><link linkend="_struct_in_stream_1a5d3141608fafc3797171a3ea7627ec4d">03947</link> std::vector&lt;unsigned&#32;long&#32;long&gt;&#32;<link linkend="_struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a">InStream::readUnsignedLongs</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03948"/>03948 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a">readUnsignedLongs</link>,&#32;<link linkend="_struct_in_stream_1a473c29087621184bb71998a12957e822">readUnsignedLong</link>(),&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03949"/>03949 }
<anchor xml:id="_testlib_8h_source_1l03950"/>03950 
<anchor xml:id="_testlib_8h_source_1l03951"/>03951 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
<anchor xml:id="_testlib_8h_source_1l03952"/><link linkend="_struct_in_stream_1aac4b9f822f2471eb19f89e3c0d78169b">03952</link> <link linkend="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd">InStream::readLong</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03953"/>03953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a473c29087621184bb71998a12957e822">readUnsignedLong</link>(minv,&#32;maxv,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l03954"/>03954 }
<anchor xml:id="_testlib_8h_source_1l03955"/>03955 
<anchor xml:id="_testlib_8h_source_1l03956"/><link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">03956</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">InStream::readInt</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l03957"/>03957 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08">readInteger</link>();
<anchor xml:id="_testlib_8h_source_1l03958"/>03958 }
<anchor xml:id="_testlib_8h_source_1l03959"/>03959 
<anchor xml:id="_testlib_8h_source_1l03960"/><link linkend="_struct_in_stream_1a0811e321fbb08005ef2dec953d6f3256">03960</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">InStream::readInt</link>(<emphasis role="keywordtype">int</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03961"/>03961 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result&#32;=&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">readInt</link>();
<anchor xml:id="_testlib_8h_source_1l03962"/>03962 
<anchor xml:id="_testlib_8h_source_1l03963"/>03963 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;&lt;&#32;minv&#32;||&#32;result&#32;&gt;&#32;maxv)&#32;{
<anchor xml:id="_testlib_8h_source_1l03964"/>03964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>&#32;==&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l03965"/>03965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03966"/>03966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Integer&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+
<anchor xml:id="_testlib_8h_source_1l03967"/>03967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03968"/>03968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03969"/>03969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Integer&#32;parameter&#32;[name=&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l03970"/>03970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03971"/>03971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l03972"/>03972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l03973"/>03973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Integer&#32;element&#32;[index=&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l03974"/>03974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03975"/>03975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l03976"/>03976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l03977"/>03977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Integer&#32;element&#32;&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+
<anchor xml:id="_testlib_8h_source_1l03978"/>03978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;toHumanReadableString(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;toHumanReadableString(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l03979"/>03979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03980"/>03980 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03981"/>03981 
<anchor xml:id="_testlib_8h_source_1l03982"/>03982 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variableName.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l03983"/>03983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd">addBoundsHit</link>(variableName,&#32;<link linkend="_struct_validator_bounds_hit">ValidatorBoundsHit</link>(minv&#32;==&#32;result,&#32;maxv&#32;==&#32;result));
<anchor xml:id="_testlib_8h_source_1l03984"/>03984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1aaf48c6b401e8417c3da493f28ca65061">adjustConstantBounds</link>(variableName,&#32;minv,&#32;maxv);
<anchor xml:id="_testlib_8h_source_1l03985"/>03985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variableName);
<anchor xml:id="_testlib_8h_source_1l03986"/>03986 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l03987"/>03987 
<anchor xml:id="_testlib_8h_source_1l03988"/>03988 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l03989"/>03989 }
<anchor xml:id="_testlib_8h_source_1l03990"/>03990 
<anchor xml:id="_testlib_8h_source_1l03991"/><link linkend="_struct_in_stream_1a789739800a5332fb69578d60fef57947">03991</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08">InStream::readInteger</link>(<emphasis role="keywordtype">int</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l03992"/>03992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">readInt</link>(minv,&#32;maxv,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l03993"/>03993 }
<anchor xml:id="_testlib_8h_source_1l03994"/>03994 
<anchor xml:id="_testlib_8h_source_1l03995"/><link linkend="_struct_in_stream_1afe94166e208381f17f49906ee5d50ae1">03995</link> std::vector&lt;int&gt;&#32;<link linkend="_struct_in_stream_1afe94166e208381f17f49906ee5d50ae1">InStream::readInts</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l03996"/>03996 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1afe94166e208381f17f49906ee5d50ae1">readInts</link>,&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">readInt</link>(minv,&#32;maxv,&#32;variablesName),&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l03997"/>03997 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l03998"/>03998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l03999"/>03999 }
<anchor xml:id="_testlib_8h_source_1l04000"/>04000 
<anchor xml:id="_testlib_8h_source_1l04001"/><link linkend="_struct_in_stream_1a9dc7971488f79c36b0c039faac9a91b1">04001</link> std::vector&lt;int&gt;&#32;<link linkend="_struct_in_stream_1afe94166e208381f17f49906ee5d50ae1">InStream::readInts</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04002"/>04002 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1afe94166e208381f17f49906ee5d50ae1">readInts</link>,&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">readInt</link>(),&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04003"/>04003 }
<anchor xml:id="_testlib_8h_source_1l04004"/>04004 
<anchor xml:id="_testlib_8h_source_1l04005"/><link linkend="_struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea">04005</link> std::vector&lt;int&gt;&#32;<link linkend="_struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea">InStream::readIntegers</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04006"/>04006 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea">readIntegers</link>,&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">readInt</link>(minv,&#32;maxv,&#32;variablesName),&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04007"/>04007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l04008"/>04008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l04009"/>04009 }
<anchor xml:id="_testlib_8h_source_1l04010"/>04010 
<anchor xml:id="_testlib_8h_source_1l04011"/><link linkend="_struct_in_stream_1ab76c62ce0113ca54feb21c1bd61611cf">04011</link> std::vector&lt;int&gt;&#32;<link linkend="_struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea">InStream::readIntegers</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04012"/>04012 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea">readIntegers</link>,&#32;<link linkend="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38">readInt</link>(),&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04013"/>04013 }
<anchor xml:id="_testlib_8h_source_1l04014"/>04014 
<anchor xml:id="_testlib_8h_source_1l04015"/><link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">04015</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">InStream::readReal</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04016"/>04016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;<link linkend="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b">seekEof</link>())
<anchor xml:id="_testlib_8h_source_1l04017"/>04017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;end&#32;of&#32;file&#32;-&#32;double&#32;expected&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04018"/>04018 
<anchor xml:id="_testlib_8h_source_1l04019"/>04019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stringToDouble(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>());
<anchor xml:id="_testlib_8h_source_1l04020"/>04020 }
<anchor xml:id="_testlib_8h_source_1l04021"/>04021 
<anchor xml:id="_testlib_8h_source_1l04022"/><link linkend="_struct_in_stream_1a7409a09698273a264eaa9069ecf90abf">04022</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1a7409a09698273a264eaa9069ecf90abf">InStream::readDouble</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04023"/>04023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">readReal</link>();
<anchor xml:id="_testlib_8h_source_1l04024"/>04024 }
<anchor xml:id="_testlib_8h_source_1l04025"/>04025 
<anchor xml:id="_testlib_8h_source_1l04026"/><link linkend="_struct_in_stream_1afefbbd644f24959a3c0dca545c50ca8d">04026</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">InStream::readReal</link>(<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04027"/>04027 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;result&#32;=&#32;<link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">readReal</link>();
<anchor xml:id="_testlib_8h_source_1l04028"/>04028 
<anchor xml:id="_testlib_8h_source_1l04029"/>04029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;&lt;&#32;minv&#32;||&#32;result&#32;&gt;&#32;maxv)&#32;{
<anchor xml:id="_testlib_8h_source_1l04030"/>04030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>&#32;==&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04031"/>04031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l04032"/>04032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Double&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;vtos(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;vtos(maxv)&#32;+
<anchor xml:id="_testlib_8h_source_1l04033"/>04033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04034"/>04034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04035"/>04035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Double&#32;parameter&#32;[name=&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l04036"/>04036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;vtos(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;vtos(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04037"/>04037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l04038"/>04038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l04039"/>04039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Double&#32;element&#32;[index=&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l04040"/>04040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;vtos(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;vtos(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04041"/>04041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04042"/>04042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l04043"/>04043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Double&#32;element&#32;&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+
<anchor xml:id="_testlib_8h_source_1l04044"/>04044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;vtos(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;vtos(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04045"/>04045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04046"/>04046 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04047"/>04047 
<anchor xml:id="_testlib_8h_source_1l04048"/>04048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variableName.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l04049"/>04049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd">addBoundsHit</link>(variableName,&#32;<link linkend="_struct_validator_bounds_hit">ValidatorBoundsHit</link>(
<anchor xml:id="_testlib_8h_source_1l04050"/>04050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82">doubleDelta</link>(minv,&#32;result)&#32;&lt;&#32;<link linkend="_struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128">ValidatorBoundsHit::EPS</link>,
<anchor xml:id="_testlib_8h_source_1l04051"/>04051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82">doubleDelta</link>(maxv,&#32;result)&#32;&lt;&#32;<link linkend="_struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128">ValidatorBoundsHit::EPS</link>
<anchor xml:id="_testlib_8h_source_1l04052"/>04052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;));
<anchor xml:id="_testlib_8h_source_1l04053"/>04053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1aaf48c6b401e8417c3da493f28ca65061">adjustConstantBounds</link>(variableName,&#32;minv,&#32;maxv);
<anchor xml:id="_testlib_8h_source_1l04054"/>04054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variableName);
<anchor xml:id="_testlib_8h_source_1l04055"/>04055 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04056"/>04056 &#32;&#32;&#32;&#32;
<anchor xml:id="_testlib_8h_source_1l04057"/>04057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l04058"/>04058 }
<anchor xml:id="_testlib_8h_source_1l04059"/>04059 
<anchor xml:id="_testlib_8h_source_1l04060"/>04060 std::vector&lt;double&gt;
<anchor xml:id="_testlib_8h_source_1l04061"/><link linkend="_struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b">04061</link> <link linkend="_struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b">InStream::readReals</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04062"/>04062 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b">readReals</link>,&#32;<link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">readReal</link>(minv,&#32;maxv,&#32;variablesName),&#32;<emphasis role="keywordtype">double</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04063"/>04063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l04064"/>04064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l04065"/>04065 }
<anchor xml:id="_testlib_8h_source_1l04066"/>04066 
<anchor xml:id="_testlib_8h_source_1l04067"/><link linkend="_struct_in_stream_1a30e0fec1354eccc823c46fb2decb6a5d">04067</link> std::vector&lt;double&gt;&#32;<link linkend="_struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b">InStream::readReals</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04068"/>04068 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b">readReals</link>,&#32;<link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">readReal</link>(),&#32;<emphasis role="keywordtype">double</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04069"/>04069 }
<anchor xml:id="_testlib_8h_source_1l04070"/>04070 
<anchor xml:id="_testlib_8h_source_1l04071"/><link linkend="_struct_in_stream_1a477dc26871b7cbb20c2d3c5aa7f51a8f">04071</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1a7409a09698273a264eaa9069ecf90abf">InStream::readDouble</link>(<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04072"/>04072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2">readReal</link>(minv,&#32;maxv,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l04073"/>04073 }
<anchor xml:id="_testlib_8h_source_1l04074"/>04074 
<anchor xml:id="_testlib_8h_source_1l04075"/>04075 std::vector&lt;double&gt;
<anchor xml:id="_testlib_8h_source_1l04076"/><link linkend="_struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e">04076</link> <link linkend="_struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e">InStream::readDoubles</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04077"/>04077 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e">readDoubles</link>,&#32;<link linkend="_struct_in_stream_1a7409a09698273a264eaa9069ecf90abf">readDouble</link>(minv,&#32;maxv,&#32;variablesName),&#32;<emphasis role="keywordtype">double</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04078"/>04078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l04079"/>04079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l04080"/>04080 }
<anchor xml:id="_testlib_8h_source_1l04081"/>04081 
<anchor xml:id="_testlib_8h_source_1l04082"/><link linkend="_struct_in_stream_1a9be66f81b7039ccdc58bee885ee15278">04082</link> std::vector&lt;double&gt;&#32;<link linkend="_struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e">InStream::readDoubles</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04083"/>04083 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e">readDoubles</link>,&#32;<link linkend="_struct_in_stream_1a7409a09698273a264eaa9069ecf90abf">readDouble</link>(),&#32;<emphasis role="keywordtype">double</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04084"/>04084 }
<anchor xml:id="_testlib_8h_source_1l04085"/>04085 
<anchor xml:id="_testlib_8h_source_1l04086"/><link linkend="_struct_in_stream_1af4a862c387cf199c075896c046b3038b">04086</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1af4a862c387cf199c075896c046b3038b">InStream::readStrictReal</link>(<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l04087"/>04087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount,
<anchor xml:id="_testlib_8h_source_1l04088"/>04088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04089"/>04089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;<link linkend="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b">seekEof</link>())
<anchor xml:id="_testlib_8h_source_1l04090"/>04090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1">_unexpected_eof</link>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;end&#32;of&#32;file&#32;-&#32;strict&#32;double&#32;expected&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04091"/>04091 
<anchor xml:id="_testlib_8h_source_1l04092"/>04092 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;result&#32;=&#32;stringToStrictDouble(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3">readWord</link>(),&#32;minAfterPointDigitCount,&#32;maxAfterPointDigitCount);
<anchor xml:id="_testlib_8h_source_1l04093"/>04093 
<anchor xml:id="_testlib_8h_source_1l04094"/>04094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;&lt;&#32;minv&#32;||&#32;result&#32;&gt;&#32;maxv)&#32;{
<anchor xml:id="_testlib_8h_source_1l04095"/>04095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>&#32;==&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04096"/>04096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l04097"/>04097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Strict&#32;double&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;vtos(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;vtos(maxv)&#32;+
<anchor xml:id="_testlib_8h_source_1l04098"/>04098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04099"/>04099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04100"/>04100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l04101"/>04101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Strict&#32;double&#32;parameter&#32;[name=&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l04102"/>04102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;vtos(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;vtos(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04103"/>04103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l04104"/>04104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l04105"/>04105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Strict&#32;double&#32;element&#32;[index=&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l04106"/>04106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;vtos(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;vtos(maxv)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04107"/>04107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04108"/>04108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Strict&#32;double&#32;element&#32;&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+
<anchor xml:id="_testlib_8h_source_1l04109"/>04109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;&quot;</emphasis>&#32;+&#32;vtos(result)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;violates&#32;the&#32;range&#32;[&quot;</emphasis>&#32;+&#32;vtos(minv)&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;vtos(maxv)&#32;+
<anchor xml:id="_testlib_8h_source_1l04110"/>04110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04111"/>04111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04112"/>04112 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04113"/>04113 
<anchor xml:id="_testlib_8h_source_1l04114"/>04114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variableName.empty())&#32;{
<anchor xml:id="_testlib_8h_source_1l04115"/>04115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd">addBoundsHit</link>(variableName,&#32;<link linkend="_struct_validator_bounds_hit">ValidatorBoundsHit</link>(
<anchor xml:id="_testlib_8h_source_1l04116"/>04116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82">doubleDelta</link>(minv,&#32;result)&#32;&lt;&#32;<link linkend="_struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128">ValidatorBoundsHit::EPS</link>,
<anchor xml:id="_testlib_8h_source_1l04117"/>04117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82">doubleDelta</link>(maxv,&#32;result)&#32;&lt;&#32;<link linkend="_struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128">ValidatorBoundsHit::EPS</link>
<anchor xml:id="_testlib_8h_source_1l04118"/>04118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;));
<anchor xml:id="_testlib_8h_source_1l04119"/>04119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1aaf48c6b401e8417c3da493f28ca65061">adjustConstantBounds</link>(variableName,&#32;minv,&#32;maxv);
<anchor xml:id="_testlib_8h_source_1l04120"/>04120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variableName);
<anchor xml:id="_testlib_8h_source_1l04121"/>04121 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04122"/>04122 
<anchor xml:id="_testlib_8h_source_1l04123"/>04123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l04124"/>04124 }
<anchor xml:id="_testlib_8h_source_1l04125"/>04125 
<anchor xml:id="_testlib_8h_source_1l04126"/><link linkend="_struct_in_stream_1a05d7a1183338770dd288298e6f4378c7">04126</link> std::vector&lt;double&gt;&#32;<link linkend="_struct_in_stream_1a05d7a1183338770dd288298e6f4378c7">InStream::readStrictReals</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l04127"/>04127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount,
<anchor xml:id="_testlib_8h_source_1l04128"/>04128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04129"/>04129 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a05d7a1183338770dd288298e6f4378c7">readStrictReals</link>,
<anchor xml:id="_testlib_8h_source_1l04130"/>04130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1af4a862c387cf199c075896c046b3038b">readStrictReal</link>(minv,&#32;maxv,&#32;minAfterPointDigitCount,&#32;maxAfterPointDigitCount,&#32;variablesName),
<anchor xml:id="_testlib_8h_source_1l04131"/>04131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04132"/>04132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l04133"/>04133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l04134"/>04134 }
<anchor xml:id="_testlib_8h_source_1l04135"/>04135 
<anchor xml:id="_testlib_8h_source_1l04136"/><link linkend="_struct_in_stream_1aaecf640ad9de7cf1873b2bc216e32b47">04136</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_in_stream_1aaecf640ad9de7cf1873b2bc216e32b47">InStream::readStrictDouble</link>(<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l04137"/>04137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount,
<anchor xml:id="_testlib_8h_source_1l04138"/>04138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04139"/>04139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1af4a862c387cf199c075896c046b3038b">readStrictReal</link>(minv,&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l04140"/>04140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minAfterPointDigitCount,&#32;maxAfterPointDigitCount,
<anchor xml:id="_testlib_8h_source_1l04141"/>04141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l04142"/>04142 }
<anchor xml:id="_testlib_8h_source_1l04143"/>04143 
<anchor xml:id="_testlib_8h_source_1l04144"/><link linkend="_struct_in_stream_1af2689fbf7c65b80728826fcb4230163f">04144</link> std::vector&lt;double&gt;&#32;<link linkend="_struct_in_stream_1af2689fbf7c65b80728826fcb4230163f">InStream::readStrictDoubles</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minv,&#32;<emphasis role="keywordtype">double</emphasis>&#32;maxv,
<anchor xml:id="_testlib_8h_source_1l04145"/>04145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minAfterPointDigitCount,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxAfterPointDigitCount,
<anchor xml:id="_testlib_8h_source_1l04146"/>04146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04147"/>04147 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1af2689fbf7c65b80728826fcb4230163f">readStrictDoubles</link>,
<anchor xml:id="_testlib_8h_source_1l04148"/>04148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1aaecf640ad9de7cf1873b2bc216e32b47">readStrictDouble</link>(minv,&#32;maxv,&#32;minAfterPointDigitCount,&#32;maxAfterPointDigitCount,&#32;variablesName),
<anchor xml:id="_testlib_8h_source_1l04149"/>04149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04150"/>04150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l04151"/>04151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l04152"/>04152 }
<anchor xml:id="_testlib_8h_source_1l04153"/>04153 
<anchor xml:id="_testlib_8h_source_1l04154"/><link linkend="_struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4">04154</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4">InStream::eof</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04155"/>04155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;NULL&#32;==&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>)
<anchor xml:id="_testlib_8h_source_1l04156"/>04156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04157"/>04157 
<anchor xml:id="_testlib_8h_source_1l04158"/>04158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a90d0f46a473a2ff2f6224614b7af0ab3">eof</link>();
<anchor xml:id="_testlib_8h_source_1l04159"/>04159 }
<anchor xml:id="_testlib_8h_source_1l04160"/>04160 
<anchor xml:id="_testlib_8h_source_1l04161"/><link linkend="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b">04161</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b">InStream::seekEof</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04162"/>04162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;NULL&#32;==&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>)
<anchor xml:id="_testlib_8h_source_1l04163"/>04163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04164"/>04164 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a3caea7dc5003207a13b690e1e6523759">skipBlanks</link>();
<anchor xml:id="_testlib_8h_source_1l04165"/>04165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4">eof</link>();
<anchor xml:id="_testlib_8h_source_1l04166"/>04166 }
<anchor xml:id="_testlib_8h_source_1l04167"/>04167 
<anchor xml:id="_testlib_8h_source_1l04168"/><link linkend="_struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd">04168</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd">InStream::eoln</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04169"/>04169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;NULL&#32;==&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>)
<anchor xml:id="_testlib_8h_source_1l04170"/>04170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04171"/>04171 
<anchor xml:id="_testlib_8h_source_1l04172"/>04172 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l04173"/>04173 
<anchor xml:id="_testlib_8h_source_1l04174"/>04174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04175"/>04175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>)
<anchor xml:id="_testlib_8h_source_1l04176"/>04176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04177"/>04177 
<anchor xml:id="_testlib_8h_source_1l04178"/>04178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a876ce77f3c672c7162658151e648389e">CR</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04179"/>04179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l04180"/>04180 
<anchor xml:id="_testlib_8h_source_1l04181"/>04181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;!=&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04182"/>04182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(c);
<anchor xml:id="_testlib_8h_source_1l04183"/>04183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(<link linkend="_testlib_8h_1a876ce77f3c672c7162658151e648389e">CR</link>);
<anchor xml:id="_testlib_8h_source_1l04184"/>04184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04185"/>04185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04186"/>04186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04187"/>04187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04188"/>04188 
<anchor xml:id="_testlib_8h_source_1l04189"/>04189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>)
<anchor xml:id="_testlib_8h_source_1l04190"/>04190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04191"/>04191 
<anchor xml:id="_testlib_8h_source_1l04192"/>04192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(c);
<anchor xml:id="_testlib_8h_source_1l04193"/>04193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04194"/>04194 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l04195"/>04195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;returnCr&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04196"/>04196 
<anchor xml:id="_testlib_8h_source_1l04197"/>04197 <emphasis role="preprocessor">#if&#32;(defined(ON_WINDOWS)&#32;&amp;&amp;&#32;!defined(FOR_LINUX))&#32;||&#32;defined(FOR_WINDOWS)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04198"/>04198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;!=&#32;<link linkend="_testlib_8h_1a876ce77f3c672c7162658151e648389e">CR</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04199"/>04199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(c);
<anchor xml:id="_testlib_8h_source_1l04200"/>04200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04201"/>04201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l04202"/>04202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!returnCr)
<anchor xml:id="_testlib_8h_source_1l04203"/>04203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;returnCr&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04204"/>04204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l04205"/>04205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04206"/>04206 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04207"/>04207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;!=&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04208"/>04208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(c);
<anchor xml:id="_testlib_8h_source_1l04209"/>04209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(returnCr)
<anchor xml:id="_testlib_8h_source_1l04210"/>04210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(<link linkend="_testlib_8h_1a876ce77f3c672c7162658151e648389e">CR</link>);
<anchor xml:id="_testlib_8h_source_1l04211"/>04211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04212"/>04212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04213"/>04213 
<anchor xml:id="_testlib_8h_source_1l04214"/>04214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04215"/>04215 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04216"/>04216 }
<anchor xml:id="_testlib_8h_source_1l04217"/>04217 
<anchor xml:id="_testlib_8h_source_1l04218"/><link linkend="_struct_in_stream_1a034c0ee97269f7bbd1e73ccc85b13f54">04218</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a034c0ee97269f7bbd1e73ccc85b13f54">InStream::readEoln</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04219"/>04219 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881">getLine</link>();
<anchor xml:id="_testlib_8h_source_1l04220"/>04220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd">eoln</link>())
<anchor xml:id="_testlib_8h_source_1l04221"/>04221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;<emphasis role="stringliteral">&quot;Expected&#32;EOLN&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04222"/>04222 }
<anchor xml:id="_testlib_8h_source_1l04223"/>04223 
<anchor xml:id="_testlib_8h_source_1l04224"/><link linkend="_struct_in_stream_1a80e53f1d7a022f34f8d88839de43d6b5">04224</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a80e53f1d7a022f34f8d88839de43d6b5">InStream::readEof</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04225"/>04225 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881">getLine</link>();
<anchor xml:id="_testlib_8h_source_1l04226"/>04226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4">eof</link>())
<anchor xml:id="_testlib_8h_source_1l04227"/>04227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;<emphasis role="stringliteral">&quot;Expected&#32;EOF&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04228"/>04228 
<anchor xml:id="_testlib_8h_source_1l04229"/>04229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00">TestlibFinalizeGuard::alive</link>&#32;&amp;&amp;&#32;<emphasis role="keyword">this</emphasis>&#32;==&#32;&amp;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>)
<anchor xml:id="_testlib_8h_source_1l04230"/>04230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a576c1be9a11f2136d2bfa955394d4575">testlibFinalizeGuard</link>.<link linkend="_struct_testlib_finalize_guard_1af46c17590b5a5f22927cf208e00cb704">readEofCount</link>++;
<anchor xml:id="_testlib_8h_source_1l04231"/>04231 }
<anchor xml:id="_testlib_8h_source_1l04232"/>04232 
<anchor xml:id="_testlib_8h_source_1l04233"/><link linkend="_struct_in_stream_1a106d09bbdd844ca246bfbf2c6409f4b6">04233</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_in_stream_1a106d09bbdd844ca246bfbf2c6409f4b6">InStream::seekEoln</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04234"/>04234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;NULL&#32;==&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>)
<anchor xml:id="_testlib_8h_source_1l04235"/>04235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04236"/>04236 
<anchor xml:id="_testlib_8h_source_1l04237"/>04237 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cur;
<anchor xml:id="_testlib_8h_source_1l04238"/>04238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l04239"/>04239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cur&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l04240"/>04240 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(cur&#32;==&#32;<link linkend="_testlib_8h_1a5ff6e798033f03e74730e99f01936f84">SPACE</link>&#32;||&#32;cur&#32;==&#32;<link linkend="_testlib_8h_1ad58a1fbfc85c7e4790fc55e654f50221">TAB</link>);
<anchor xml:id="_testlib_8h_source_1l04241"/>04241 
<anchor xml:id="_testlib_8h_source_1l04242"/>04242 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(cur);
<anchor xml:id="_testlib_8h_source_1l04243"/>04243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd">eoln</link>();
<anchor xml:id="_testlib_8h_source_1l04244"/>04244 }
<anchor xml:id="_testlib_8h_source_1l04245"/>04245 
<anchor xml:id="_testlib_8h_source_1l04246"/><link linkend="_struct_in_stream_1a86e63a6bb9bc47cae9f58f0591ecc53f">04246</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a86e63a6bb9bc47cae9f58f0591ecc53f">InStream::nextLine</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04247"/>04247 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683">readLine</link>();
<anchor xml:id="_testlib_8h_source_1l04248"/>04248 }
<anchor xml:id="_testlib_8h_source_1l04249"/>04249 
<anchor xml:id="_testlib_8h_source_1l04250"/><link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">04250</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">InStream::readStringTo</link>(std::string&#32;&amp;result)&#32;{
<anchor xml:id="_testlib_8h_source_1l04251"/>04251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;==&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>)
<anchor xml:id="_testlib_8h_source_1l04252"/>04252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773">_pe</link>,&#32;<emphasis role="stringliteral">&quot;Expected&#32;line&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04253"/>04253 
<anchor xml:id="_testlib_8h_source_1l04254"/>04254 &#32;&#32;&#32;&#32;result.clear();
<anchor xml:id="_testlib_8h_source_1l04255"/>04255 
<anchor xml:id="_testlib_8h_source_1l04256"/>04256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)&#32;{
<anchor xml:id="_testlib_8h_source_1l04257"/>04257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cur&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a80448788833a59a503853b4a45a96137">curChar</link>();
<anchor xml:id="_testlib_8h_source_1l04258"/>04258 
<anchor xml:id="_testlib_8h_source_1l04259"/>04259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cur&#32;==&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>&#32;||&#32;cur&#32;==&#32;<link linkend="_testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f">EOFC</link>)
<anchor xml:id="_testlib_8h_source_1l04260"/>04260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04261"/>04261 
<anchor xml:id="_testlib_8h_source_1l04262"/>04262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cur&#32;==&#32;<link linkend="_testlib_8h_1a876ce77f3c672c7162658151e648389e">CR</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04263"/>04263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cur&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>();
<anchor xml:id="_testlib_8h_source_1l04264"/>04264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a80448788833a59a503853b4a45a96137">curChar</link>()&#32;==&#32;<link linkend="_testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c">LF</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04265"/>04265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208">unreadChar</link>(cur);
<anchor xml:id="_testlib_8h_source_1l04266"/>04266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04267"/>04267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04268"/>04268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04269"/>04269 
<anchor xml:id="_testlib_8h_source_1l04270"/>04270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5">lastLine</link>&#32;=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881">getLine</link>();
<anchor xml:id="_testlib_8h_source_1l04271"/>04271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;char(<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3">nextChar</link>());
<anchor xml:id="_testlib_8h_source_1l04272"/>04272 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04273"/>04273 
<anchor xml:id="_testlib_8h_source_1l04274"/>04274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>)
<anchor xml:id="_testlib_8h_source_1l04275"/>04275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a034c0ee97269f7bbd1e73ccc85b13f54">readEoln</link>();
<anchor xml:id="_testlib_8h_source_1l04276"/>04276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04277"/>04277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd">eoln</link>();
<anchor xml:id="_testlib_8h_source_1l04278"/>04278 }
<anchor xml:id="_testlib_8h_source_1l04279"/>04279 
<anchor xml:id="_testlib_8h_source_1l04280"/><link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">04280</link> std::string&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">InStream::readString</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04281"/>04281 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>);
<anchor xml:id="_testlib_8h_source_1l04282"/>04282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>;
<anchor xml:id="_testlib_8h_source_1l04283"/>04283 }
<anchor xml:id="_testlib_8h_source_1l04284"/>04284 
<anchor xml:id="_testlib_8h_source_1l04285"/><link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">04285</link> std::vector&lt;std::string&gt;&#32;<link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">InStream::readStrings</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04286"/>04286 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">readStrings</link>,&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(),&#32;std::string,&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04287"/>04287 }
<anchor xml:id="_testlib_8h_source_1l04288"/>04288 
<anchor xml:id="_testlib_8h_source_1l04289"/><link linkend="_struct_in_stream_1a6dd7e7971417eadfc7c89ed6063ee166">04289</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">InStream::readStringTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04290"/>04290 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(result);
<anchor xml:id="_testlib_8h_source_1l04291"/>04291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!p.<link linkend="_classpattern_1ab4c557a012185d453ddf8730f7a98dc0">matches</link>(result))&#32;{
<anchor xml:id="_testlib_8h_source_1l04292"/>04292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>&#32;==&#32;<link linkend="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8">NO_INDEX</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04293"/>04293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l04294"/>04294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Line&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(result)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+
<anchor xml:id="_testlib_8h_source_1l04295"/>04295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04296"/>04296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04297"/>04297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;(<emphasis role="stringliteral">&quot;Line&#32;[name=&quot;</emphasis>&#32;+&#32;variableName&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l04298"/>04298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\&quot;,&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04299"/>04299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l04300"/>04300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(variableName.empty())
<anchor xml:id="_testlib_8h_source_1l04301"/>04301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l04302"/>04302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Line&#32;element&#32;[index=&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;\&quot;&quot;</emphasis>&#32;+&#32;__testlib_part(result)&#32;+
<anchor xml:id="_testlib_8h_source_1l04303"/>04303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04304"/>04304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04305"/>04305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,
<anchor xml:id="_testlib_8h_source_1l04306"/>04306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="stringliteral">&quot;Line&#32;element&#32;&quot;</emphasis>&#32;+&#32;std::string(variableName)&#32;+&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;vtos(<link linkend="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4">readManyIteration</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;equals&#32;to&#32;\&quot;&quot;</emphasis>&#32;+
<anchor xml:id="_testlib_8h_source_1l04307"/>04307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_part(result)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,&#32;doesn&apos;t&#32;correspond&#32;to&#32;pattern&#32;\&quot;&quot;</emphasis>&#32;+&#32;p.<link linkend="_classpattern_1a4795cb9cb1b3b10c551fdce03608786a">src</link>()&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>).c_str());
<anchor xml:id="_testlib_8h_source_1l04308"/>04308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04309"/>04309 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04310"/>04310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variableName.empty())
<anchor xml:id="_testlib_8h_source_1l04311"/>04311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variableName);
<anchor xml:id="_testlib_8h_source_1l04312"/>04312 }
<anchor xml:id="_testlib_8h_source_1l04313"/>04313 
<anchor xml:id="_testlib_8h_source_1l04314"/><link linkend="_struct_in_stream_1a90443a86a3a04208af259dbca2061b3b">04314</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">InStream::readStringTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04315"/>04315 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(result,&#32;<link linkend="_classpattern">pattern</link>(ptrn),&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l04316"/>04316 }
<anchor xml:id="_testlib_8h_source_1l04317"/>04317 
<anchor xml:id="_testlib_8h_source_1l04318"/><link linkend="_struct_in_stream_1a25e0a8a1aef084955346a2b82cefa3b3">04318</link> std::string&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">InStream::readString</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04319"/>04319 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>,&#32;p,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l04320"/>04320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>;
<anchor xml:id="_testlib_8h_source_1l04321"/>04321 }
<anchor xml:id="_testlib_8h_source_1l04322"/>04322 
<anchor xml:id="_testlib_8h_source_1l04323"/>04323 std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l04324"/><link linkend="_struct_in_stream_1a7566b33af0c853ce8ddfcdd7ad0e9648">04324</link> <link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">InStream::readStrings</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04325"/>04325 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">readStrings</link>,&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(p,&#32;variablesName),&#32;std::string,&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04326"/>04326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l04327"/>04327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l04328"/>04328 }
<anchor xml:id="_testlib_8h_source_1l04329"/>04329 
<anchor xml:id="_testlib_8h_source_1l04330"/><link linkend="_struct_in_stream_1a5d4fd12c9b43f1357e56aed051524f7d">04330</link> std::string&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">InStream::readString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04331"/>04331 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>,&#32;ptrn,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l04332"/>04332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30">_tmpReadToken</link>;
<anchor xml:id="_testlib_8h_source_1l04333"/>04333 }
<anchor xml:id="_testlib_8h_source_1l04334"/>04334 
<anchor xml:id="_testlib_8h_source_1l04335"/>04335 std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l04336"/><link linkend="_struct_in_stream_1a826426f9c306ac53747a3141f819a1c7">04336</link> <link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">InStream::readStrings</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04337"/>04337 &#32;&#32;&#32;&#32;<link linkend="_classpattern">pattern</link>&#32;p(ptrn);
<anchor xml:id="_testlib_8h_source_1l04338"/>04338 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6">readStrings</link>,&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(p,&#32;variablesName),&#32;std::string,&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04339"/>04339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l04340"/>04340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l04341"/>04341 }
<anchor xml:id="_testlib_8h_source_1l04342"/>04342 
<anchor xml:id="_testlib_8h_source_1l04343"/><link linkend="_struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447">04343</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447">InStream::readLineTo</link>(std::string&#32;&amp;result)&#32;{
<anchor xml:id="_testlib_8h_source_1l04344"/>04344 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(result);
<anchor xml:id="_testlib_8h_source_1l04345"/>04345 }
<anchor xml:id="_testlib_8h_source_1l04346"/>04346 
<anchor xml:id="_testlib_8h_source_1l04347"/><link linkend="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683">04347</link> std::string&#32;<link linkend="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683">InStream::readLine</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04348"/>04348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>();
<anchor xml:id="_testlib_8h_source_1l04349"/>04349 }
<anchor xml:id="_testlib_8h_source_1l04350"/>04350 
<anchor xml:id="_testlib_8h_source_1l04351"/><link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">04351</link> std::vector&lt;std::string&gt;&#32;<link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">InStream::readLines</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04352"/>04352 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">readLines</link>,&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(),&#32;std::string,&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04353"/>04353 }
<anchor xml:id="_testlib_8h_source_1l04354"/>04354 
<anchor xml:id="_testlib_8h_source_1l04355"/><link linkend="_struct_in_stream_1a15203cdc5616988c0b76e8652ec05cb7">04355</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447">InStream::readLineTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04356"/>04356 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(result,&#32;p,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l04357"/>04357 }
<anchor xml:id="_testlib_8h_source_1l04358"/>04358 
<anchor xml:id="_testlib_8h_source_1l04359"/><link linkend="_struct_in_stream_1a727fea17af0013a7a6089734292abd24">04359</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447">InStream::readLineTo</link>(std::string&#32;&amp;result,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04360"/>04360 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56">readStringTo</link>(result,&#32;ptrn,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l04361"/>04361 }
<anchor xml:id="_testlib_8h_source_1l04362"/>04362 
<anchor xml:id="_testlib_8h_source_1l04363"/><link linkend="_struct_in_stream_1a6d9a21120d8b21cf31e9bad2a1e83e92">04363</link> std::string&#32;<link linkend="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683">InStream::readLine</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04364"/>04364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(p,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l04365"/>04365 }
<anchor xml:id="_testlib_8h_source_1l04366"/>04366 
<anchor xml:id="_testlib_8h_source_1l04367"/>04367 std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l04368"/><link linkend="_struct_in_stream_1a1ce8d0614039ae608612cca5d4fc5f28">04368</link> <link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">InStream::readLines</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpattern">pattern</link>&#32;&amp;p,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04369"/>04369 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">readLines</link>,&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(p,&#32;variablesName),&#32;std::string,&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04370"/>04370 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l04371"/>04371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l04372"/>04372 }
<anchor xml:id="_testlib_8h_source_1l04373"/>04373 
<anchor xml:id="_testlib_8h_source_1l04374"/><link linkend="_struct_in_stream_1a4fd055a2face33d5862f23ee9cb86cd5">04374</link> std::string&#32;<link linkend="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683">InStream::readLine</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variableName)&#32;{
<anchor xml:id="_testlib_8h_source_1l04375"/>04375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(ptrn,&#32;variableName);
<anchor xml:id="_testlib_8h_source_1l04376"/>04376 }
<anchor xml:id="_testlib_8h_source_1l04377"/>04377 
<anchor xml:id="_testlib_8h_source_1l04378"/>04378 std::vector&lt;std::string&gt;
<anchor xml:id="_testlib_8h_source_1l04379"/><link linkend="_struct_in_stream_1a5f62d4bb591a6de0a04cc8cc8a876202">04379</link> <link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">InStream::readLines</link>(<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ptrn,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;variablesName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexBase)&#32;{
<anchor xml:id="_testlib_8h_source_1l04380"/>04380 &#32;&#32;&#32;&#32;<link linkend="_classpattern">pattern</link>&#32;p(ptrn);
<anchor xml:id="_testlib_8h_source_1l04381"/>04381 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ab882eaa72c700511353c3099d0952519">__testlib_readMany</link>(<link linkend="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a">readLines</link>,&#32;<link linkend="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d">readString</link>(p,&#32;variablesName),&#32;std::string,&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="_testlib_8h_source_1l04382"/>04382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;&amp;&amp;&#32;!variablesName.empty())
<anchor xml:id="_testlib_8h_source_1l04383"/>04383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ac33cdd122f71e88613526650d1bb3c45">addVariable</link>(variablesName);
<anchor xml:id="_testlib_8h_source_1l04384"/>04384 }
<anchor xml:id="_testlib_8h_source_1l04385"/>04385 
<anchor xml:id="_testlib_8h_source_1l04386"/>04386 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l04387"/>04387 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;3,&#32;4)))
<anchor xml:id="_testlib_8h_source_1l04388"/>04388 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04389"/><link linkend="_struct_in_stream_1a44a5027f6d7000c62ef27c6719f225ef">04389</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a44a5027f6d7000c62ef27c6719f225ef">InStream::ensuref</link>(<emphasis role="keywordtype">bool</emphasis>&#32;cond,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l04390"/>04390 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cond)&#32;{
<anchor xml:id="_testlib_8h_source_1l04391"/>04391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04392"/>04392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_struct_in_stream_1ad961f49275f9e4d97b3ab6691f4b3d07">__testlib_ensure</link>(cond,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04393"/>04393 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04394"/>04394 }
<anchor xml:id="_testlib_8h_source_1l04395"/>04395 
<anchor xml:id="_testlib_8h_source_1l04396"/><link linkend="_struct_in_stream_1ad961f49275f9e4d97b3ab6691f4b3d07">04396</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1ad961f49275f9e4d97b3ab6691f4b3d07">InStream::__testlib_ensure</link>(<emphasis role="keywordtype">bool</emphasis>&#32;cond,&#32;std::string&#32;message)&#32;{
<anchor xml:id="_testlib_8h_source_1l04397"/>04397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cond)
<anchor xml:id="_testlib_8h_source_1l04398"/>04398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585">_wa</link>,&#32;message.c_str());
<anchor xml:id="_testlib_8h_source_1l04399"/>04399 }
<anchor xml:id="_testlib_8h_source_1l04400"/>04400 
<anchor xml:id="_testlib_8h_source_1l04401"/><link linkend="_struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f">04401</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f">InStream::close</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04402"/>04402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;!=&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04403"/>04403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>-&gt;<link linkend="_class_input_stream_reader_1aa145a0fcdb6b0a73cc3b91b22e5183cb">close</link>();
<anchor xml:id="_testlib_8h_source_1l04404"/>04404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>;
<anchor xml:id="_testlib_8h_source_1l04405"/>04405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35">reader</link>&#32;=&#32;NULL;
<anchor xml:id="_testlib_8h_source_1l04406"/>04406 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04407"/>04407 
<anchor xml:id="_testlib_8h_source_1l04408"/>04408 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf">opened</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04409"/>04409 }
<anchor xml:id="_testlib_8h_source_1l04410"/>04410 
<anchor xml:id="_testlib_8h_source_1l04411"/><link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">04411</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;msg)&#32;{
<anchor xml:id="_testlib_8h_source_1l04412"/>04412 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a93822943d6413c3eba20a27b9d31336b">ouf</link>.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(result,&#32;msg.c_str());
<anchor xml:id="_testlib_8h_source_1l04413"/>04413 }
<anchor xml:id="_testlib_8h_source_1l04414"/>04414 
<anchor xml:id="_testlib_8h_source_1l04415"/><link linkend="_testlib_8h_1aed77b9d710f29f434fee76944e94202a">04415</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg)&#32;{
<anchor xml:id="_testlib_8h_source_1l04416"/>04416 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a93822943d6413c3eba20a27b9d31336b">ouf</link>.<link linkend="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9">quit</link>(result,&#32;msg);
<anchor xml:id="_testlib_8h_source_1l04417"/>04417 }
<anchor xml:id="_testlib_8h_source_1l04418"/>04418 
<anchor xml:id="_testlib_8h_source_1l04419"/><link linkend="_testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb">04419</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb">__testlib_quitp</link>(<emphasis role="keywordtype">double</emphasis>&#32;points,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*message)&#32;{
<anchor xml:id="_testlib_8h_source_1l04420"/>04420 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acb5280d0779ed8499169e3537ab20fd2">__testlib_points</link>&#32;=&#32;points;
<anchor xml:id="_testlib_8h_source_1l04421"/>04421 &#32;&#32;&#32;&#32;std::string&#32;stringPoints&#32;=&#32;removeDoubleTrailingZeroes(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;%.10f&quot;</emphasis>,&#32;points));
<anchor xml:id="_testlib_8h_source_1l04422"/>04422 
<anchor xml:id="_testlib_8h_source_1l04423"/>04423 &#32;&#32;&#32;&#32;std::string&#32;quitMessage;
<anchor xml:id="_testlib_8h_source_1l04424"/>04424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;==&#32;message&#32;||&#32;0&#32;==&#32;strlen(message))
<anchor xml:id="_testlib_8h_source_1l04425"/>04425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quitMessage&#32;=&#32;stringPoints;
<anchor xml:id="_testlib_8h_source_1l04426"/>04426 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04427"/>04427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quitMessage&#32;=&#32;stringPoints&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;message;
<anchor xml:id="_testlib_8h_source_1l04428"/>04428 
<anchor xml:id="_testlib_8h_source_1l04429"/>04429 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">_points</link>,&#32;quitMessage.c_str());
<anchor xml:id="_testlib_8h_source_1l04430"/>04430 }
<anchor xml:id="_testlib_8h_source_1l04431"/>04431 
<anchor xml:id="_testlib_8h_source_1l04432"/><link linkend="_testlib_8h_1a3951a3cfdcfee60d55d47a3faca1510f">04432</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb">__testlib_quitp</link>(<emphasis role="keywordtype">int</emphasis>&#32;points,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*message)&#32;{
<anchor xml:id="_testlib_8h_source_1l04433"/>04433 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acb5280d0779ed8499169e3537ab20fd2">__testlib_points</link>&#32;=&#32;points;
<anchor xml:id="_testlib_8h_source_1l04434"/>04434 &#32;&#32;&#32;&#32;std::string&#32;stringPoints&#32;=&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;%d&quot;</emphasis>,&#32;points);
<anchor xml:id="_testlib_8h_source_1l04435"/>04435 
<anchor xml:id="_testlib_8h_source_1l04436"/>04436 &#32;&#32;&#32;&#32;std::string&#32;quitMessage;
<anchor xml:id="_testlib_8h_source_1l04437"/>04437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;==&#32;message&#32;||&#32;0&#32;==&#32;strlen(message))
<anchor xml:id="_testlib_8h_source_1l04438"/>04438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quitMessage&#32;=&#32;stringPoints;
<anchor xml:id="_testlib_8h_source_1l04439"/>04439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04440"/>04440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quitMessage&#32;=&#32;stringPoints&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;message;
<anchor xml:id="_testlib_8h_source_1l04441"/>04441 
<anchor xml:id="_testlib_8h_source_1l04442"/>04442 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">_points</link>,&#32;quitMessage.c_str());
<anchor xml:id="_testlib_8h_source_1l04443"/>04443 }
<anchor xml:id="_testlib_8h_source_1l04444"/>04444 
<anchor xml:id="_testlib_8h_source_1l04445"/><link linkend="_testlib_8h_1a96b765d3745447a9518991edeab211c5">04445</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a96b765d3745447a9518991edeab211c5">quitp</link>(<emphasis role="keywordtype">float</emphasis>&#32;points,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04446"/>04446 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb">__testlib_quitp</link>(<emphasis role="keywordtype">double</emphasis>(points),&#32;message.c_str());
<anchor xml:id="_testlib_8h_source_1l04447"/>04447 }
<anchor xml:id="_testlib_8h_source_1l04448"/>04448 
<anchor xml:id="_testlib_8h_source_1l04449"/><link linkend="_testlib_8h_1abd20355062b85779c882dfb19f3d9380">04449</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a96b765d3745447a9518991edeab211c5">quitp</link>(<emphasis role="keywordtype">double</emphasis>&#32;points,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04450"/>04450 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb">__testlib_quitp</link>(points,&#32;message.c_str());
<anchor xml:id="_testlib_8h_source_1l04451"/>04451 }
<anchor xml:id="_testlib_8h_source_1l04452"/>04452 
<anchor xml:id="_testlib_8h_source_1l04453"/><link linkend="_testlib_8h_1a4c8b51476405ff163cc57a9e0ec10aea">04453</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a96b765d3745447a9518991edeab211c5">quitp</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;points,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04454"/>04454 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb">__testlib_quitp</link>(<emphasis role="keywordtype">double</emphasis>(points),&#32;message.c_str());
<anchor xml:id="_testlib_8h_source_1l04455"/>04455 }
<anchor xml:id="_testlib_8h_source_1l04456"/>04456 
<anchor xml:id="_testlib_8h_source_1l04457"/><link linkend="_testlib_8h_1a7c6fc64b2f0640dd5dd4b1f52210d669">04457</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a96b765d3745447a9518991edeab211c5">quitp</link>(<emphasis role="keywordtype">int</emphasis>&#32;points,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04458"/>04458 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb">__testlib_quitp</link>(points,&#32;message.c_str());
<anchor xml:id="_testlib_8h_source_1l04459"/>04459 }
<anchor xml:id="_testlib_8h_source_1l04460"/>04460 
<anchor xml:id="_testlib_8h_source_1l04461"/><link linkend="_testlib_8h_1a9e512424bd789067763542439fb1083b">04461</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a9e512424bd789067763542439fb1083b">quitpi</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;points_info,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04462"/>04462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(points_info.find(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>)&#32;!=&#32;std::string::npos)
<anchor xml:id="_testlib_8h_source_1l04463"/>04463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Parameter&#32;&apos;points_info&apos;&#32;can&apos;t&#32;contain&#32;spaces&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04464"/>04464 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(message.empty())
<anchor xml:id="_testlib_8h_source_1l04465"/>04465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">_points</link>,&#32;(<emphasis role="stringliteral">&quot;points_info=&quot;</emphasis>&#32;+&#32;points_info).c_str());
<anchor xml:id="_testlib_8h_source_1l04466"/>04466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04467"/>04467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2">_points</link>,&#32;(<emphasis role="stringliteral">&quot;points_info=&quot;</emphasis>&#32;+&#32;points_info&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;message).c_str());
<anchor xml:id="_testlib_8h_source_1l04468"/>04468 }
<anchor xml:id="_testlib_8h_source_1l04469"/>04469 
<anchor xml:id="_testlib_8h_source_1l04470"/>04470 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;F&gt;
<anchor xml:id="_testlib_8h_source_1l04471"/>04471 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l04472"/>04472 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;2,&#32;3)))
<anchor xml:id="_testlib_8h_source_1l04473"/>04473 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04474"/><link linkend="_testlib_8h_1a73dbf5feb8712147dfa04c19c9d6b01d">04474</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a96b765d3745447a9518991edeab211c5">quitp</link>(F&#32;points,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l04475"/>04475 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04476"/>04476 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a96b765d3745447a9518991edeab211c5">quitp</link>(points,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04477"/>04477 }
<anchor xml:id="_testlib_8h_source_1l04478"/>04478 
<anchor xml:id="_testlib_8h_source_1l04479"/>04479 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l04480"/>04480 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;2,&#32;3)))
<anchor xml:id="_testlib_8h_source_1l04481"/>04481 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04482"/><link linkend="_testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01">04482</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01">quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l04483"/>04483 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04484"/>04484 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(result,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04485"/>04485 }
<anchor xml:id="_testlib_8h_source_1l04486"/>04486 
<anchor xml:id="_testlib_8h_source_1l04487"/>04487 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l04488"/>04488 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;3,&#32;4)))
<anchor xml:id="_testlib_8h_source_1l04489"/>04489 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04490"/><link linkend="_testlib_8h_1ad7e7f24ac09509dc94581cf3b0a5dced">04490</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1ad7e7f24ac09509dc94581cf3b0a5dced">quitif</link>(<emphasis role="keywordtype">bool</emphasis>&#32;condition,&#32;<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l04491"/>04491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(condition)&#32;{
<anchor xml:id="_testlib_8h_source_1l04492"/>04492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04493"/>04493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(result,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04494"/>04494 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04495"/>04495 }
<anchor xml:id="_testlib_8h_source_1l04496"/>04496 
<anchor xml:id="_testlib_8h_source_1l04497"/><link linkend="_testlib_8h_1a694d06929cd60de7f337b6e265b2365b">04497</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a694d06929cd60de7f337b6e265b2365b">__testlib_help</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04498"/>04498 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">InStream::textColor</link>(<link linkend="_struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4">InStream::LightCyan</link>);
<anchor xml:id="_testlib_8h_source_1l04499"/>04499 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;TESTLIB&#32;%s,&#32;https://github.com/MikeMirzayanov/testlib/&#32;&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1a1c6d5de492ac61ad29aec7aa9a436bbf">VERSION</link>);
<anchor xml:id="_testlib_8h_source_1l04500"/>04500 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;by&#32;Mike&#32;Mirzayanov,&#32;copyright(c)&#32;2005-2020\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04501"/>04501 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Checker&#32;name:&#32;\&quot;%s\&quot;\n&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1a00f5e960957827ed8846cf705f810473">checkerName</link>.c_str());
<anchor xml:id="_testlib_8h_source_1l04502"/>04502 &#32;&#32;&#32;&#32;<link linkend="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49">InStream::textColor</link>(<link linkend="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836">InStream::LightGray</link>);
<anchor xml:id="_testlib_8h_source_1l04503"/>04503 
<anchor xml:id="_testlib_8h_source_1l04504"/>04504 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04505"/>04505 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Latest&#32;features:&#32;\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04506"/>04506 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_testlib_8h_1aca3ccf9230a0e9c7f28e21d77f26e74f">latestFeatures</link>)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>&#32;*);&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l04507"/>04507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;*)&#32;%s\n&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1aca3ccf9230a0e9c7f28e21d77f26e74f">latestFeatures</link>[i]);
<anchor xml:id="_testlib_8h_source_1l04508"/>04508 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04509"/>04509 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04510"/>04510 
<anchor xml:id="_testlib_8h_source_1l04511"/>04511 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Program&#32;must&#32;be&#32;run&#32;with&#32;the&#32;following&#32;arguments:&#32;\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04512"/>04512 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;[--testset&#32;testset]&#32;[--group&#32;group]&#32;&lt;input-file&gt;&#32;&lt;output-file&gt;&#32;&lt;answer-file&gt;&#32;[&lt;report-file&gt;&#32;[&lt;-appes&gt;]]\n\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04513"/>04513 
<anchor xml:id="_testlib_8h_source_1l04514"/>04514 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f">__testlib_exitCode</link>&#32;=&#32;<link linkend="_testlib_8h_1afac612f10342c3ccbfc7f30ae563184b">FAIL_EXIT_CODE</link>;
<anchor xml:id="_testlib_8h_source_1l04515"/>04515 &#32;&#32;&#32;&#32;std::exit(<link linkend="_testlib_8h_1afac612f10342c3ccbfc7f30ae563184b">FAIL_EXIT_CODE</link>);
<anchor xml:id="_testlib_8h_source_1l04516"/>04516 }
<anchor xml:id="_testlib_8h_source_1l04517"/>04517 
<anchor xml:id="_testlib_8h_source_1l04518"/>04518 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__testlib_ensuresPreconditions()&#32;{
<anchor xml:id="_testlib_8h_source_1l04519"/>04519 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testlib&#32;assumes:&#32;sizeof(int)&#32;=&#32;4.</emphasis>
<anchor xml:id="_testlib_8h_source_1l04520"/>04520 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a67a1b89efefde69b271ec10086a493fc">__TESTLIB_STATIC_ASSERT</link>(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>)&#32;==&#32;4);
<anchor xml:id="_testlib_8h_source_1l04521"/>04521 
<anchor xml:id="_testlib_8h_source_1l04522"/>04522 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testlib&#32;assumes:&#32;INT_MAX&#32;==&#32;2147483647.</emphasis>
<anchor xml:id="_testlib_8h_source_1l04523"/>04523 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a67a1b89efefde69b271ec10086a493fc">__TESTLIB_STATIC_ASSERT</link>(INT_MAX&#32;==&#32;2147483647);
<anchor xml:id="_testlib_8h_source_1l04524"/>04524 
<anchor xml:id="_testlib_8h_source_1l04525"/>04525 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testlib&#32;assumes:&#32;sizeof(long&#32;long)&#32;=&#32;8.</emphasis>
<anchor xml:id="_testlib_8h_source_1l04526"/>04526 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a67a1b89efefde69b271ec10086a493fc">__TESTLIB_STATIC_ASSERT</link>(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;==&#32;8);
<anchor xml:id="_testlib_8h_source_1l04527"/>04527 
<anchor xml:id="_testlib_8h_source_1l04528"/>04528 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testlib&#32;assumes:&#32;sizeof(double)&#32;=&#32;8.</emphasis>
<anchor xml:id="_testlib_8h_source_1l04529"/>04529 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a67a1b89efefde69b271ec10086a493fc">__TESTLIB_STATIC_ASSERT</link>(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>)&#32;==&#32;8);
<anchor xml:id="_testlib_8h_source_1l04530"/>04530 
<anchor xml:id="_testlib_8h_source_1l04531"/>04531 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testlib&#32;assumes:&#32;no&#32;-ffast-math.</emphasis>
<anchor xml:id="_testlib_8h_source_1l04532"/>04532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__testlib_isNaN(+__testlib_nan()))
<anchor xml:id="_testlib_8h_source_1l04533"/>04533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Function&#32;__testlib_isNaN&#32;is&#32;not&#32;working&#32;correctly:&#32;possible&#32;reason&#32;is&#32;&apos;-ffast-math&apos;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04534"/>04534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__testlib_isNaN(-__testlib_nan()))
<anchor xml:id="_testlib_8h_source_1l04535"/>04535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Function&#32;__testlib_isNaN&#32;is&#32;not&#32;working&#32;correctly:&#32;possible&#32;reason&#32;is&#32;&apos;-ffast-math&apos;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04536"/>04536 }
<anchor xml:id="_testlib_8h_source_1l04537"/>04537 
<anchor xml:id="_testlib_8h_source_1l04538"/><link linkend="_testlib_8h_1adf88ff484a3ca535a2a66ea5c0713796">04538</link> std::string&#32;<link linkend="_testlib_8h_1adf88ff484a3ca535a2a66ea5c0713796">__testlib_testset</link>;
<anchor xml:id="_testlib_8h_source_1l04539"/>04539 
<anchor xml:id="_testlib_8h_source_1l04540"/><link linkend="_testlib_8h_1a327d15f1f5e7c8377faf74e620514689">04540</link> std::string&#32;<link linkend="_testlib_8h_1a327d15f1f5e7c8377faf74e620514689">getTestset</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04541"/>04541 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1adf88ff484a3ca535a2a66ea5c0713796">__testlib_testset</link>;
<anchor xml:id="_testlib_8h_source_1l04542"/>04542 }
<anchor xml:id="_testlib_8h_source_1l04543"/>04543 
<anchor xml:id="_testlib_8h_source_1l04544"/><link linkend="_testlib_8h_1a28757a64bf4cec48f7a7e5d6187bb350">04544</link> std::string&#32;<link linkend="_testlib_8h_1a28757a64bf4cec48f7a7e5d6187bb350">__testlib_group</link>;
<anchor xml:id="_testlib_8h_source_1l04545"/>04545 
<anchor xml:id="_testlib_8h_source_1l04546"/><link linkend="_testlib_8h_1ae7fe33b331a1689d31d7d43eb94b125a">04546</link> std::string&#32;<link linkend="_testlib_8h_1ae7fe33b331a1689d31d7d43eb94b125a">getGroup</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04547"/>04547 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a28757a64bf4cec48f7a7e5d6187bb350">__testlib_group</link>;
<anchor xml:id="_testlib_8h_source_1l04548"/>04548 }
<anchor xml:id="_testlib_8h_source_1l04549"/>04549 
<anchor xml:id="_testlib_8h_source_1l04550"/>04550 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__testlib_set_testset_and_group(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;argv[])&#32;{
<anchor xml:id="_testlib_8h_source_1l04551"/>04551 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;argc;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l04552"/>04552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--testset&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04553"/>04553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc&#32;&amp;&amp;&#32;strlen(argv[i&#32;+&#32;1])&#32;&gt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l04554"/>04554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1adf88ff484a3ca535a2a66ea5c0713796">__testlib_testset</link>&#32;=&#32;argv[++i];
<anchor xml:id="_testlib_8h_source_1l04555"/>04555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04556"/>04556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Expected&#32;non-empty&#32;testset&#32;after&#32;--testset&#32;command&#32;line&#32;parameter&quot;</emphasis>));
<anchor xml:id="_testlib_8h_source_1l04557"/>04557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--group&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04558"/>04558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc)
<anchor xml:id="_testlib_8h_source_1l04559"/>04559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a28757a64bf4cec48f7a7e5d6187bb350">__testlib_group</link>&#32;=&#32;argv[++i];
<anchor xml:id="_testlib_8h_source_1l04560"/>04560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04561"/>04561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Expected&#32;group&#32;after&#32;--group&#32;command&#32;line&#32;parameter&quot;</emphasis>));
<anchor xml:id="_testlib_8h_source_1l04562"/>04562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04563"/>04563 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04564"/>04564 }
<anchor xml:id="_testlib_8h_source_1l04565"/>04565 
<anchor xml:id="_testlib_8h_source_1l04566"/><link linkend="_testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76">04566</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76">registerGen</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[],&#32;<emphasis role="keywordtype">int</emphasis>&#32;randomGeneratorVersion)&#32;{
<anchor xml:id="_testlib_8h_source_1l04567"/>04567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(randomGeneratorVersion&#32;&lt;&#32;0&#32;||&#32;randomGeneratorVersion&#32;&gt;&#32;1)
<anchor xml:id="_testlib_8h_source_1l04568"/>04568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01">quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Random&#32;generator&#32;version&#32;is&#32;expected&#32;to&#32;be&#32;0&#32;or&#32;1.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04569"/>04569 &#32;&#32;&#32;&#32;<link linkend="_classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868">random_t::version</link>&#32;=&#32;randomGeneratorVersion;
<anchor xml:id="_testlib_8h_source_1l04570"/>04570 
<anchor xml:id="_testlib_8h_source_1l04571"/>04571 &#32;&#32;&#32;&#32;__testlib_ensuresPreconditions();
<anchor xml:id="_testlib_8h_source_1l04572"/>04572 &#32;&#32;&#32;&#32;<link linkend="_struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1">TestlibFinalizeGuard::registered</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04573"/>04573 
<anchor xml:id="_testlib_8h_source_1l04574"/>04574 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fa5311ad9bde7f5dbdc28c1f8264456fd5">_generator</link>;
<anchor xml:id="_testlib_8h_source_1l04575"/>04575 &#32;&#32;&#32;&#32;__testlib_set_binary(stdin);
<anchor xml:id="_testlib_8h_source_1l04576"/>04576 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">rnd</link>.<link linkend="_classrandom__t_1a091210e52bff54e02afeda4d343e081d">setSeed</link>(argc,&#32;argv);
<anchor xml:id="_testlib_8h_source_1l04577"/>04577 
<anchor xml:id="_testlib_8h_source_1l04578"/>04578 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;199711L&#32;||&#32;defined(_MSC_VER)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04579"/>04579 &#32;&#32;&#32;&#32;prepareOpts(argc,&#32;argv);
<anchor xml:id="_testlib_8h_source_1l04580"/>04580 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04581"/>04581 }
<anchor xml:id="_testlib_8h_source_1l04582"/>04582 
<anchor xml:id="_testlib_8h_source_1l04583"/>04583 <emphasis role="preprocessor">#ifdef&#32;USE_RND_AS_BEFORE_087</emphasis>
<anchor xml:id="_testlib_8h_source_1l04584"/>04584 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76">registerGen</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;argv[])
<anchor xml:id="_testlib_8h_source_1l04585"/>04585 {
<anchor xml:id="_testlib_8h_source_1l04586"/>04586 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76">registerGen</link>(argc,&#32;argv,&#32;0);
<anchor xml:id="_testlib_8h_source_1l04587"/>04587 }
<anchor xml:id="_testlib_8h_source_1l04588"/>04588 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04589"/>04589 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l04590"/>04590 <emphasis role="preprocessor">#if&#32;(__GNUC__&#32;&gt;&#32;4)&#32;||&#32;((__GNUC__&#32;==&#32;4)&#32;&amp;&amp;&#32;(__GNUC_MINOR__&#32;&gt;&#32;4))</emphasis>
<anchor xml:id="_testlib_8h_source_1l04591"/>04591 __attribute__&#32;((deprecated(<emphasis role="stringliteral">&quot;Use&#32;registerGen(argc,&#32;argv,&#32;0)&#32;or&#32;registerGen(argc,&#32;argv,&#32;1).&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04592"/>04592 <emphasis role="stringliteral">&quot;&#32;The&#32;third&#32;parameter&#32;stands&#32;for&#32;the&#32;random&#32;generator&#32;version.&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04593"/>04593 <emphasis role="stringliteral">&quot;&#32;If&#32;you&#32;are&#32;trying&#32;to&#32;compile&#32;old&#32;generator&#32;use&#32;macro&#32;-DUSE_RND_AS_BEFORE_087&#32;or&#32;registerGen(argc,&#32;argv,&#32;0).&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04594"/>04594 <emphasis role="stringliteral">&quot;&#32;Version&#32;1&#32;has&#32;been&#32;released&#32;on&#32;Spring,&#32;2013.&#32;Use&#32;it&#32;to&#32;write&#32;new&#32;generators.&quot;</emphasis>)))
<anchor xml:id="_testlib_8h_source_1l04595"/>04595 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04596"/>04596 __attribute__&#32;((deprecated))
<anchor xml:id="_testlib_8h_source_1l04597"/>04597 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04598"/>04598 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04599"/>04599 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
<anchor xml:id="_testlib_8h_source_1l04600"/>04600 __declspec(deprecated(<emphasis role="stringliteral">&quot;Use&#32;registerGen(argc,&#32;argv,&#32;0)&#32;or&#32;registerGen(argc,&#32;argv,&#32;1).&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04601"/>04601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;The&#32;third&#32;parameter&#32;stands&#32;for&#32;the&#32;random&#32;generator&#32;version.&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04602"/>04602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;If&#32;you&#32;are&#32;trying&#32;to&#32;compile&#32;old&#32;generator&#32;use&#32;macro&#32;-DUSE_RND_AS_BEFORE_087&#32;or&#32;registerGen(argc,&#32;argv,&#32;0).&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04603"/>04603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Version&#32;1&#32;has&#32;been&#32;released&#32;on&#32;Spring,&#32;2013.&#32;Use&#32;it&#32;to&#32;write&#32;new&#32;generators.&quot;</emphasis>))
<anchor xml:id="_testlib_8h_source_1l04604"/>04604 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04605"/><link linkend="_testlib_8h_1a1fbb926756e2060c6e46bae99de4a781">04605</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76">registerGen</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[])&#32;{
<anchor xml:id="_testlib_8h_source_1l04606"/>04606 &#32;&#32;&#32;&#32;std::fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Use&#32;registerGen(argc,&#32;argv,&#32;0)&#32;or&#32;registerGen(argc,&#32;argv,&#32;1).&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04607"/>04607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;The&#32;third&#32;parameter&#32;stands&#32;for&#32;the&#32;random&#32;generator&#32;version.&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04608"/>04608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;If&#32;you&#32;are&#32;trying&#32;to&#32;compile&#32;old&#32;generator&#32;use&#32;macro&#32;-DUSE_RND_AS_BEFORE_087&#32;or&#32;registerGen(argc,&#32;argv,&#32;0).&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04609"/>04609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Version&#32;1&#32;has&#32;been&#32;released&#32;on&#32;Spring,&#32;2013.&#32;Use&#32;it&#32;to&#32;write&#32;new&#32;generators.\n\n&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04610"/>04610 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76">registerGen</link>(argc,&#32;argv,&#32;0);
<anchor xml:id="_testlib_8h_source_1l04611"/>04611 }
<anchor xml:id="_testlib_8h_source_1l04612"/>04612 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04613"/>04613 
<anchor xml:id="_testlib_8h_source_1l04614"/><link linkend="_testlib_8h_1aa87c56b5c1a61e59f3484778120a5797">04614</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1aa87c56b5c1a61e59f3484778120a5797">setAppesModeEncoding</link>(std::string&#32;<link linkend="_testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460">appesModeEncoding</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04615"/>04615 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;ENCODINGS[]&#32;=&#32;{<emphasis role="stringliteral">&quot;ascii&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;utf-7&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;utf-8&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;utf-16&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;utf-16le&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;utf-16be&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;utf-32&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;utf-32le&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;utf-32be&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-1&quot;</emphasis>,&#32;
<anchor xml:id="_testlib_8h_source_1l04616"/>04616 <emphasis role="stringliteral">&quot;iso-8859-2&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-3&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-4&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-5&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-6&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-7&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-8&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-9&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-10&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-11&quot;</emphasis>,&#32;
<anchor xml:id="_testlib_8h_source_1l04617"/>04617 <emphasis role="stringliteral">&quot;iso-8859-13&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-14&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-15&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-8859-16&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;windows-1250&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;windows-1251&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;windows-1252&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;windows-1253&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;windows-1254&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;windows-1255&quot;</emphasis>,&#32;
<anchor xml:id="_testlib_8h_source_1l04618"/>04618 <emphasis role="stringliteral">&quot;windows-1256&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;windows-1257&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;windows-1258&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;gb2312&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;gbk&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;gb18030&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;big5&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;shift-jis&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;euc-jp&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;euc-kr&quot;</emphasis>,&#32;
<anchor xml:id="_testlib_8h_source_1l04619"/>04619 <emphasis role="stringliteral">&quot;euc-cn&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;euc-tw&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;koi8-r&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;koi8-u&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;tis-620&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm437&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm850&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm852&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm855&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm857&quot;</emphasis>,&#32;
<anchor xml:id="_testlib_8h_source_1l04620"/>04620 <emphasis role="stringliteral">&quot;ibm860&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm861&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm862&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm863&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm865&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm866&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ibm869&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;macroman&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;maccentraleurope&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;maciceland&quot;</emphasis>,&#32;
<anchor xml:id="_testlib_8h_source_1l04621"/>04621 <emphasis role="stringliteral">&quot;maccroatian&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;macromania&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;maccyrillic&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;macukraine&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;macgreek&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;macturkish&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;machebrew&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;macarabic&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;macthai&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;hz-gb-2312&quot;</emphasis>,&#32;
<anchor xml:id="_testlib_8h_source_1l04622"/>04622 <emphasis role="stringliteral">&quot;iso-2022-jp&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-2022-kr&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-2022-cn&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;armscii-8&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;tscii&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iscii&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;viscii&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;geostd8&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp949&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp874&quot;</emphasis>,&#32;
<anchor xml:id="_testlib_8h_source_1l04623"/>04623 <emphasis role="stringliteral">&quot;cp1006&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp775&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp858&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp737&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp853&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp856&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp922&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp1046&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp1125&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp1131&quot;</emphasis>,&#32;
<anchor xml:id="_testlib_8h_source_1l04624"/>04624 <emphasis role="stringliteral">&quot;ptcp154&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;koi8-t&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;koi8-ru&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;mulelao-1&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cp1133&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-ir-166&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;tcvn&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-ir-14&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-ir-87&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;iso-ir-159&quot;</emphasis>};
<anchor xml:id="_testlib_8h_source_1l04625"/>04625 &#32;&#32;&#32;&#32;
<anchor xml:id="_testlib_8h_source_1l04626"/>04626 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460">appesModeEncoding</link>&#32;=&#32;<link linkend="_testlib_8h_1a2d0670a860a887c1de821de0550c0a32">lowerCase</link>(<link linkend="_testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460">appesModeEncoding</link>);
<anchor xml:id="_testlib_8h_source_1l04627"/>04627 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;valid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04628"/>04628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(ENCODINGS)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(ENCODINGS[0]);&#32;i++)
<anchor xml:id="_testlib_8h_source_1l04629"/>04629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460">appesModeEncoding</link>&#32;==&#32;ENCODINGS[i])&#32;{
<anchor xml:id="_testlib_8h_source_1l04630"/>04630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04631"/>04631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04632"/>04632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04633"/>04633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!valid)
<anchor xml:id="_testlib_8h_source_1l04634"/>04634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;encoding&#32;for&#32;setAppesModeEncoding(encoding)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04635"/>04635 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460">::appesModeEncoding</link>&#32;=&#32;<link linkend="_testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460">appesModeEncoding</link>;
<anchor xml:id="_testlib_8h_source_1l04636"/>04636 }
<anchor xml:id="_testlib_8h_source_1l04637"/>04637 
<anchor xml:id="_testlib_8h_source_1l04638"/><link linkend="_testlib_8h_1a01331bd5d26dd46c4bc7b9295a036aa0">04638</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a01331bd5d26dd46c4bc7b9295a036aa0">registerInteraction</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[])&#32;{
<anchor xml:id="_testlib_8h_source_1l04639"/>04639 &#32;&#32;&#32;&#32;__testlib_ensuresPreconditions();
<anchor xml:id="_testlib_8h_source_1l04640"/>04640 &#32;&#32;&#32;&#32;__testlib_set_testset_and_group(argc,&#32;argv);
<anchor xml:id="_testlib_8h_source_1l04641"/>04641 &#32;&#32;&#32;&#32;<link linkend="_struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1">TestlibFinalizeGuard::registered</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04642"/>04642 
<anchor xml:id="_testlib_8h_source_1l04643"/>04643 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fadaea9b0ac8f600ff71b0f7616869deac">_interactor</link>;
<anchor xml:id="_testlib_8h_source_1l04644"/>04644 &#32;&#32;&#32;&#32;__testlib_set_binary(stdin);
<anchor xml:id="_testlib_8h_source_1l04645"/>04645 
<anchor xml:id="_testlib_8h_source_1l04646"/>04646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;1&#32;&amp;&amp;&#32;!strcmp(<emphasis role="stringliteral">&quot;--help&quot;</emphasis>,&#32;argv[1]))
<anchor xml:id="_testlib_8h_source_1l04647"/>04647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a694d06929cd60de7f337b6e265b2365b">__testlib_help</link>();
<anchor xml:id="_testlib_8h_source_1l04648"/>04648 
<anchor xml:id="_testlib_8h_source_1l04649"/>04649 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&lt;&#32;3&#32;||&#32;argc&#32;&gt;&#32;6)&#32;{
<anchor xml:id="_testlib_8h_source_1l04650"/>04650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Program&#32;must&#32;be&#32;run&#32;with&#32;the&#32;following&#32;arguments:&#32;&quot;</emphasis>)&#32;+
<anchor xml:id="_testlib_8h_source_1l04651"/>04651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string(<emphasis role="stringliteral">&quot;&lt;input-file&gt;&#32;&lt;output-file&gt;&#32;[&lt;answer-file&gt;&#32;[&lt;report-file&gt;&#32;[&lt;-appes&gt;]]]&quot;</emphasis>)&#32;+
<anchor xml:id="_testlib_8h_source_1l04652"/>04652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\nUse&#32;\&quot;--help\&quot;&#32;to&#32;get&#32;help&#32;information&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04653"/>04653 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04654"/>04654 
<anchor xml:id="_testlib_8h_source_1l04655"/>04655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&lt;=&#32;4)&#32;{
<anchor xml:id="_testlib_8h_source_1l04656"/>04656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04657"/>04657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e">appesMode</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04658"/>04658 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04659"/>04659 
<anchor xml:id="_testlib_8h_source_1l04660"/>04660 <emphasis role="preprocessor">#ifndef&#32;EJUDGE</emphasis>
<anchor xml:id="_testlib_8h_source_1l04661"/>04661 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;5)&#32;{
<anchor xml:id="_testlib_8h_source_1l04662"/>04662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;=&#32;argv[4];
<anchor xml:id="_testlib_8h_source_1l04663"/>04663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e">appesMode</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04664"/>04664 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04665"/>04665 
<anchor xml:id="_testlib_8h_source_1l04666"/>04666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;6)&#32;{
<anchor xml:id="_testlib_8h_source_1l04667"/>04667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(<emphasis role="stringliteral">&quot;-APPES&quot;</emphasis>,&#32;argv[5])&#32;&amp;&amp;&#32;strcmp(<emphasis role="stringliteral">&quot;-appes&quot;</emphasis>,&#32;argv[5]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04668"/>04668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Program&#32;must&#32;be&#32;run&#32;with&#32;the&#32;following&#32;arguments:&#32;&quot;</emphasis>)&#32;+
<anchor xml:id="_testlib_8h_source_1l04669"/>04669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;input-file&gt;&#32;&lt;output-file&gt;&#32;&lt;answer-file&gt;&#32;[&lt;report-file&gt;&#32;[&lt;-appes&gt;]]&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04670"/>04670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l04671"/>04671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;=&#32;argv[4];
<anchor xml:id="_testlib_8h_source_1l04672"/>04672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e">appesMode</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04673"/>04673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04674"/>04674 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04675"/>04675 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04676"/>04676 
<anchor xml:id="_testlib_8h_source_1l04677"/>04677 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(argv[1],&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">_input</link>);
<anchor xml:id="_testlib_8h_source_1l04678"/>04678 
<anchor xml:id="_testlib_8h_source_1l04679"/>04679 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a675e9c0cb400805c69d94e7cdded4494">tout</link>.open(argv[2],&#32;std::ios_base::out);
<anchor xml:id="_testlib_8h_source_1l04680"/>04680 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a675e9c0cb400805c69d94e7cdded4494">tout</link>.fail()&#32;||&#32;!<link linkend="_testlib_8h_1a675e9c0cb400805c69d94e7cdded4494">tout</link>.is_open())
<anchor xml:id="_testlib_8h_source_1l04681"/>04681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Can&#32;not&#32;write&#32;to&#32;the&#32;test-output-file&#32;&apos;&quot;</emphasis>)&#32;+&#32;argv[2]&#32;+&#32;std::string(<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>));
<anchor xml:id="_testlib_8h_source_1l04682"/>04682 
<anchor xml:id="_testlib_8h_source_1l04683"/>04683 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a93822943d6413c3eba20a27b9d31336b">ouf</link>.<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(stdin,&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6">_output</link>);
<anchor xml:id="_testlib_8h_source_1l04684"/>04684 
<anchor xml:id="_testlib_8h_source_1l04685"/>04685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;=&#32;4)
<anchor xml:id="_testlib_8h_source_1l04686"/>04686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac">ans</link>.<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(argv[3],&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61">_answer</link>);
<anchor xml:id="_testlib_8h_source_1l04687"/>04687 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04688"/>04688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac">ans</link>.<link linkend="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b">name</link>&#32;=&#32;<emphasis role="stringliteral">&quot;unopened&#32;answer&#32;stream&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04689"/>04689 }
<anchor xml:id="_testlib_8h_source_1l04690"/>04690 
<anchor xml:id="_testlib_8h_source_1l04691"/><link linkend="_testlib_8h_1a92d612e581676b81e9162f70839e88ef">04691</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a92d612e581676b81e9162f70839e88ef">registerValidation</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04692"/>04692 &#32;&#32;&#32;&#32;__testlib_ensuresPreconditions();
<anchor xml:id="_testlib_8h_source_1l04693"/>04693 &#32;&#32;&#32;&#32;<link linkend="_struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1">TestlibFinalizeGuard::registered</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04694"/>04694 
<anchor xml:id="_testlib_8h_source_1l04695"/>04695 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f">_validator</link>;
<anchor xml:id="_testlib_8h_source_1l04696"/>04696 
<anchor xml:id="_testlib_8h_source_1l04697"/>04697 &#32;&#32;&#32;&#32;__testlib_set_binary(stdin);
<anchor xml:id="_testlib_8h_source_1l04698"/>04698 &#32;&#32;&#32;&#32;__testlib_set_binary(stdout);
<anchor xml:id="_testlib_8h_source_1l04699"/>04699 &#32;&#32;&#32;&#32;__testlib_set_binary(stderr);
<anchor xml:id="_testlib_8h_source_1l04700"/>04700 
<anchor xml:id="_testlib_8h_source_1l04701"/>04701 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(stdin,&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">_input</link>);
<anchor xml:id="_testlib_8h_source_1l04702"/>04702 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04703"/>04703 }
<anchor xml:id="_testlib_8h_source_1l04704"/>04704 
<anchor xml:id="_testlib_8h_source_1l04705"/><link linkend="_testlib_8h_1af37a8d5160de18491abf562b60790dff">04705</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a92d612e581676b81e9162f70839e88ef">registerValidation</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[])&#32;{
<anchor xml:id="_testlib_8h_source_1l04706"/>04706 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a92d612e581676b81e9162f70839e88ef">registerValidation</link>();
<anchor xml:id="_testlib_8h_source_1l04707"/>04707 &#32;&#32;&#32;&#32;__testlib_set_testset_and_group(argc,&#32;argv);
<anchor xml:id="_testlib_8h_source_1l04708"/>04708 
<anchor xml:id="_testlib_8h_source_1l04709"/>04709 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1aeb0b49097c1087062e53aac935028b47">initialize</link>();
<anchor xml:id="_testlib_8h_source_1l04710"/>04710 &#32;&#32;&#32;&#32;<link linkend="_struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1">TestlibFinalizeGuard::registered</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04711"/>04711 
<anchor xml:id="_testlib_8h_source_1l04712"/>04712 &#32;&#32;&#32;&#32;std::string&#32;comment&#32;=&#32;<emphasis role="stringliteral">&quot;Validator&#32;must&#32;be&#32;run&#32;with&#32;the&#32;following&#32;arguments:&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04713"/>04713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;[--testset&#32;testset]&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04714"/>04714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;[--group&#32;group]&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04715"/>04715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;[--testOverviewLogFileName&#32;fileName]&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04716"/>04716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;[--testMarkupFileName&#32;fileName]&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04717"/>04717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;[--testCase&#32;testCase]&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04718"/>04718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;[--testCaseFileName&#32;fileName]&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04719"/>04719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
<anchor xml:id="_testlib_8h_source_1l04720"/>04720 
<anchor xml:id="_testlib_8h_source_1l04721"/>04721 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;argc;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l04722"/>04722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--testset&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04723"/>04723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc&#32;&amp;&amp;&#32;strlen(argv[i&#32;+&#32;1])&#32;&gt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l04724"/>04724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1a98abe366b29d8445a77b0a8467dceb41">setTestset</link>(argv[++i]);
<anchor xml:id="_testlib_8h_source_1l04725"/>04725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04726"/>04726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;comment);
<anchor xml:id="_testlib_8h_source_1l04727"/>04727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04728"/>04728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--group&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04729"/>04729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc)
<anchor xml:id="_testlib_8h_source_1l04730"/>04730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1aad2457aadd48a75837e2770aa6c380bb">setGroup</link>(argv[++i]);
<anchor xml:id="_testlib_8h_source_1l04731"/>04731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04732"/>04732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;comment);
<anchor xml:id="_testlib_8h_source_1l04733"/>04733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04734"/>04734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--testOverviewLogFileName&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04735"/>04735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc)
<anchor xml:id="_testlib_8h_source_1l04736"/>04736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1a759723fc94643a78cc0b14da68b0107e">setTestOverviewLogFileName</link>(argv[++i]);
<anchor xml:id="_testlib_8h_source_1l04737"/>04737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04738"/>04738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;comment);
<anchor xml:id="_testlib_8h_source_1l04739"/>04739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04740"/>04740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--testMarkupFileName&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04741"/>04741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc)
<anchor xml:id="_testlib_8h_source_1l04742"/>04742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1a82a648685268dc91e9bf48f1c4fb8d57">setTestMarkupFileName</link>(argv[++i]);
<anchor xml:id="_testlib_8h_source_1l04743"/>04743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04744"/>04744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;comment);
<anchor xml:id="_testlib_8h_source_1l04745"/>04745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04746"/>04746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--testCase&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04747"/>04747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc)&#32;{
<anchor xml:id="_testlib_8h_source_1l04748"/>04748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;testCase&#32;=&#32;stringToLongLong(<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>,&#32;argv[++i]);
<anchor xml:id="_testlib_8h_source_1l04749"/>04749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(testCase&#32;&lt;&#32;1&#32;||&#32;testCase&#32;&gt;=&#32;<link linkend="_testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0">__TESTLIB_MAX_TEST_CASE</link>)
<anchor xml:id="_testlib_8h_source_1l04750"/>04750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;Argument&#32;testCase&#32;should&#32;be&#32;between&#32;1&#32;and&#32;%d,&#32;but&#32;&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0">__TESTLIB_MAX_TEST_CASE</link>)
<anchor xml:id="_testlib_8h_source_1l04751"/>04751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;toString(testCase)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04752"/>04752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ab4fd3b0dbe4e35310a9c7b0b7c2a411d">setTestCase</link>(<emphasis role="keywordtype">int</emphasis>(testCase));
<anchor xml:id="_testlib_8h_source_1l04753"/>04753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04754"/>04754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;comment);
<anchor xml:id="_testlib_8h_source_1l04755"/>04755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04756"/>04756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--testCaseFileName&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04757"/>04757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc)&#32;{
<anchor xml:id="_testlib_8h_source_1l04758"/>04758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1abe2f949d8c9bff6fe61e0f9fab6e68e4">setTestCaseFileName</link>(argv[++i]);
<anchor xml:id="_testlib_8h_source_1l04759"/>04759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04760"/>04760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;comment);
<anchor xml:id="_testlib_8h_source_1l04761"/>04761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04762"/>04762 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04763"/>04763 }
<anchor xml:id="_testlib_8h_source_1l04764"/>04764 
<anchor xml:id="_testlib_8h_source_1l04765"/><link linkend="_testlib_8h_1a988dc33cd922d2f4748e4305743d03d8">04765</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a988dc33cd922d2f4748e4305743d03d8">addFeature</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_testlib_8h_1aca975e2860357cde841db9a2eb501e4f">feature</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04766"/>04766 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;!=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f">_validator</link>)
<anchor xml:id="_testlib_8h_source_1l04767"/>04767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Features&#32;are&#32;supported&#32;in&#32;validators&#32;only.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04768"/>04768 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1ad584b1395f153ccfedf884750ff10f70">addFeature</link>(<link linkend="_testlib_8h_1aca975e2860357cde841db9a2eb501e4f">feature</link>);
<anchor xml:id="_testlib_8h_source_1l04769"/>04769 }
<anchor xml:id="_testlib_8h_source_1l04770"/>04770 
<anchor xml:id="_testlib_8h_source_1l04771"/><link linkend="_testlib_8h_1aca975e2860357cde841db9a2eb501e4f">04771</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1aca975e2860357cde841db9a2eb501e4f">feature</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;<link linkend="_testlib_8h_1aca975e2860357cde841db9a2eb501e4f">feature</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04772"/>04772 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;!=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f">_validator</link>)
<anchor xml:id="_testlib_8h_source_1l04773"/>04773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Features&#32;are&#32;supported&#32;in&#32;validators&#32;only.&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04774"/>04774 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a72a79ac1064de9f716b78e4369669976">validator</link>.<link linkend="_class_validator_1a85dd9d919dbd6668399ca595658bba80">feature</link>(<link linkend="_testlib_8h_1aca975e2860357cde841db9a2eb501e4f">feature</link>);
<anchor xml:id="_testlib_8h_source_1l04775"/>04775 }
<anchor xml:id="_testlib_8h_source_1l04776"/>04776 
<anchor xml:id="_testlib_8h_source_1l04777"/><link linkend="_class_checker">04777</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_checker">Checker</link>&#32;{
<anchor xml:id="_testlib_8h_source_1l04778"/>04778 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_testlib_8h_source_1l04779"/>04779 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_initialized;
<anchor xml:id="_testlib_8h_source_1l04780"/>04780 &#32;&#32;&#32;&#32;std::string&#32;_testset;
<anchor xml:id="_testlib_8h_source_1l04781"/>04781 &#32;&#32;&#32;&#32;std::string&#32;_group;
<anchor xml:id="_testlib_8h_source_1l04782"/>04782 
<anchor xml:id="_testlib_8h_source_1l04783"/>04783 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_testlib_8h_source_1l04784"/><link linkend="_class_checker_1aafe6cbd15f04ea271878f54c424c4b2a">04784</link> &#32;&#32;&#32;&#32;<link linkend="_class_checker_1aafe6cbd15f04ea271878f54c424c4b2a">Checker</link>()&#32;:&#32;_initialized(false),&#32;_testset(<emphasis role="stringliteral">&quot;tests&quot;</emphasis>),&#32;_group()&#32;{
<anchor xml:id="_testlib_8h_source_1l04785"/>04785 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04786"/>04786 
<anchor xml:id="_testlib_8h_source_1l04787"/><link linkend="_class_checker_1a271ef5fb00c4230cebb26ef476117a9d">04787</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_checker_1a271ef5fb00c4230cebb26ef476117a9d">initialize</link>()&#32;{
<anchor xml:id="_testlib_8h_source_1l04788"/>04788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_initialized&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04789"/>04789 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04790"/>04790 
<anchor xml:id="_testlib_8h_source_1l04791"/><link linkend="_class_checker_1ac0b5f297b97d53d2662d6faf87da23c4">04791</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_checker_1ac0b5f297b97d53d2662d6faf87da23c4">testset</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l04792"/>04792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_initialized)
<anchor xml:id="_testlib_8h_source_1l04793"/>04793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Checker&#32;should&#32;be&#32;initialized&#32;with&#32;registerTestlibCmd(argc,&#32;argv)&#32;instead&#32;of&#32;registerTestlibCmd()&#32;to&#32;support&#32;checker.testset()&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04794"/>04794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_testset;
<anchor xml:id="_testlib_8h_source_1l04795"/>04795 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04796"/>04796 
<anchor xml:id="_testlib_8h_source_1l04797"/><link linkend="_class_checker_1a30f363a82bc2c6345314b5aa690c6ab2">04797</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_checker_1a30f363a82bc2c6345314b5aa690c6ab2">group</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_testlib_8h_source_1l04798"/>04798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_initialized)
<anchor xml:id="_testlib_8h_source_1l04799"/>04799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Checker&#32;should&#32;be&#32;initialized&#32;with&#32;registerTestlibCmd(argc,&#32;argv)&#32;instead&#32;of&#32;registerTestlibCmd()&#32;to&#32;support&#32;checker.group()&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04800"/>04800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_group;
<anchor xml:id="_testlib_8h_source_1l04801"/>04801 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04802"/>04802 
<anchor xml:id="_testlib_8h_source_1l04803"/><link linkend="_class_checker_1a9d820f5d5a3026e8f0fa4548a329b6b7">04803</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_checker_1a9d820f5d5a3026e8f0fa4548a329b6b7">setTestset</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_checker_1ac0b5f297b97d53d2662d6faf87da23c4">testset</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04804"/>04804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_testset&#32;=&#32;<link linkend="_class_checker_1ac0b5f297b97d53d2662d6faf87da23c4">testset</link>;
<anchor xml:id="_testlib_8h_source_1l04805"/>04805 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04806"/>04806 
<anchor xml:id="_testlib_8h_source_1l04807"/><link linkend="_class_checker_1a86db664876730b34937e5be2552eb9a0">04807</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_checker_1a86db664876730b34937e5be2552eb9a0">setGroup</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_checker_1a30f363a82bc2c6345314b5aa690c6ab2">group</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l04808"/>04808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_group&#32;=&#32;<link linkend="_class_checker_1a30f363a82bc2c6345314b5aa690c6ab2">group</link>;
<anchor xml:id="_testlib_8h_source_1l04809"/>04809 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04810"/><link linkend="_testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c">04810</link> }&#32;<link linkend="_testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c">checker</link>;
<anchor xml:id="_testlib_8h_source_1l04811"/>04811 
<anchor xml:id="_testlib_8h_source_1l04812"/><link linkend="_testlib_8h_1aef178d6340fe04d5d616ee2da19488b4">04812</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1aef178d6340fe04d5d616ee2da19488b4">registerTestlibCmd</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[])&#32;{
<anchor xml:id="_testlib_8h_source_1l04813"/>04813 &#32;&#32;&#32;&#32;__testlib_ensuresPreconditions();
<anchor xml:id="_testlib_8h_source_1l04814"/>04814 &#32;&#32;&#32;&#32;__testlib_set_testset_and_group(argc,&#32;argv);
<anchor xml:id="_testlib_8h_source_1l04815"/>04815 &#32;&#32;&#32;&#32;<link linkend="_struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1">TestlibFinalizeGuard::registered</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04816"/>04816 
<anchor xml:id="_testlib_8h_source_1l04817"/>04817 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fad23f42b9c6d23ab5679d79151c4585ff">_checker</link>;
<anchor xml:id="_testlib_8h_source_1l04818"/>04818 &#32;&#32;&#32;&#32;__testlib_set_binary(stdin);
<anchor xml:id="_testlib_8h_source_1l04819"/>04819 
<anchor xml:id="_testlib_8h_source_1l04820"/>04820 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;args(1,&#32;argv[0]);
<anchor xml:id="_testlib_8h_source_1l04821"/>04821 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c">checker</link>.<link linkend="_class_checker_1a271ef5fb00c4230cebb26ef476117a9d">initialize</link>();
<anchor xml:id="_testlib_8h_source_1l04822"/>04822 
<anchor xml:id="_testlib_8h_source_1l04823"/>04823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;argc;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l04824"/>04824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--testset&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04825"/>04825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc&#32;&amp;&amp;&#32;strlen(argv[i&#32;+&#32;1])&#32;&gt;&#32;0)
<anchor xml:id="_testlib_8h_source_1l04826"/>04826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c">checker</link>.<link linkend="_class_checker_1a9d820f5d5a3026e8f0fa4548a329b6b7">setTestset</link>(argv[++i]);
<anchor xml:id="_testlib_8h_source_1l04827"/>04827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04828"/>04828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Expected&#32;testset&#32;after&#32;--testset&#32;command&#32;line&#32;parameter&quot;</emphasis>));
<anchor xml:id="_testlib_8h_source_1l04829"/>04829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(<emphasis role="stringliteral">&quot;--group&quot;</emphasis>,&#32;argv[i]))&#32;{
<anchor xml:id="_testlib_8h_source_1l04830"/>04830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;argc)
<anchor xml:id="_testlib_8h_source_1l04831"/>04831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c">checker</link>.<link linkend="_class_checker_1a86db664876730b34937e5be2552eb9a0">setGroup</link>(argv[++i]);
<anchor xml:id="_testlib_8h_source_1l04832"/>04832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04833"/>04833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Expected&#32;group&#32;after&#32;--group&#32;command&#32;line&#32;parameter&quot;</emphasis>));
<anchor xml:id="_testlib_8h_source_1l04834"/>04834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04835"/>04835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args.push_back(argv[i]);
<anchor xml:id="_testlib_8h_source_1l04836"/>04836 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04837"/>04837 
<anchor xml:id="_testlib_8h_source_1l04838"/>04838 &#32;&#32;&#32;&#32;argc&#32;=&#32;int(args.size());
<anchor xml:id="_testlib_8h_source_1l04839"/>04839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;1&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;--help&quot;</emphasis>&#32;==&#32;args[1])
<anchor xml:id="_testlib_8h_source_1l04840"/>04840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a694d06929cd60de7f337b6e265b2365b">__testlib_help</link>();
<anchor xml:id="_testlib_8h_source_1l04841"/>04841 
<anchor xml:id="_testlib_8h_source_1l04842"/>04842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&lt;&#32;4&#32;||&#32;argc&#32;&gt;&#32;6)&#32;{
<anchor xml:id="_testlib_8h_source_1l04843"/>04843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Program&#32;must&#32;be&#32;run&#32;with&#32;the&#32;following&#32;arguments:&#32;&quot;</emphasis>)&#32;+
<anchor xml:id="_testlib_8h_source_1l04844"/>04844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string(<emphasis role="stringliteral">&quot;[--testset&#32;testset]&#32;[--group&#32;group]&#32;&lt;input-file&gt;&#32;&lt;output-file&gt;&#32;&lt;answer-file&gt;&#32;[&lt;report-file&gt;&#32;[&lt;-appes&gt;]]&quot;</emphasis>)&#32;+
<anchor xml:id="_testlib_8h_source_1l04845"/>04845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\nUse&#32;\&quot;--help\&quot;&#32;to&#32;get&#32;help&#32;information&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04846"/>04846 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04847"/>04847 
<anchor xml:id="_testlib_8h_source_1l04848"/>04848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;4)&#32;{
<anchor xml:id="_testlib_8h_source_1l04849"/>04849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04850"/>04850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e">appesMode</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04851"/>04851 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04852"/>04852 
<anchor xml:id="_testlib_8h_source_1l04853"/>04853 <emphasis role="preprocessor">#ifndef&#32;EJUDGE</emphasis>
<anchor xml:id="_testlib_8h_source_1l04854"/>04854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;5)&#32;{
<anchor xml:id="_testlib_8h_source_1l04855"/>04855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;=&#32;args[4];
<anchor xml:id="_testlib_8h_source_1l04856"/>04856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e">appesMode</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04857"/>04857 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04858"/>04858 
<anchor xml:id="_testlib_8h_source_1l04859"/>04859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;6)&#32;{
<anchor xml:id="_testlib_8h_source_1l04860"/>04860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="stringliteral">&quot;-APPES&quot;</emphasis>&#32;!=&#32;args[5]&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;-appes&quot;</emphasis>&#32;!=&#32;args[5])&#32;{
<anchor xml:id="_testlib_8h_source_1l04861"/>04861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Program&#32;must&#32;be&#32;run&#32;with&#32;the&#32;following&#32;arguments:&#32;&quot;</emphasis>)&#32;+
<anchor xml:id="_testlib_8h_source_1l04862"/>04862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;input-file&gt;&#32;&lt;output-file&gt;&#32;&lt;answer-file&gt;&#32;[&lt;report-file&gt;&#32;[&lt;-appes&gt;]]&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04863"/>04863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l04864"/>04864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a300565f96b1c710f123009c6aa8aed29">resultName</link>&#32;=&#32;args[4];
<anchor xml:id="_testlib_8h_source_1l04865"/>04865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e">appesMode</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04866"/>04866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04867"/>04867 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04868"/>04868 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04869"/>04869 
<anchor xml:id="_testlib_8h_source_1l04870"/>04870 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(args[1],&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">_input</link>);
<anchor xml:id="_testlib_8h_source_1l04871"/>04871 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a93822943d6413c3eba20a27b9d31336b">ouf</link>.<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(args[2],&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6">_output</link>);
<anchor xml:id="_testlib_8h_source_1l04872"/>04872 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a93822943d6413c3eba20a27b9d31336b">ouf</link>.<link linkend="_struct_in_stream_1a1ee5c101df11ec9fe00867379bf3937f">skipBom</link>();
<anchor xml:id="_testlib_8h_source_1l04873"/>04873 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac">ans</link>.<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(args[3],&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61">_answer</link>);
<anchor xml:id="_testlib_8h_source_1l04874"/>04874 }
<anchor xml:id="_testlib_8h_source_1l04875"/>04875 
<anchor xml:id="_testlib_8h_source_1l04876"/><link linkend="_testlib_8h_1a58c2e7a2e44f8466c34b4500023cac6e">04876</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a58c2e7a2e44f8466c34b4500023cac6e">registerTestlib</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l04877"/>04877 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&lt;&#32;3&#32;||&#32;argc&#32;&gt;&#32;5)
<anchor xml:id="_testlib_8h_source_1l04878"/>04878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;std::string(<emphasis role="stringliteral">&quot;Program&#32;must&#32;be&#32;run&#32;with&#32;the&#32;following&#32;arguments:&#32;&quot;</emphasis>)&#32;+
<anchor xml:id="_testlib_8h_source_1l04879"/>04879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;input-file&gt;&#32;&lt;output-file&gt;&#32;&lt;answer-file&gt;&#32;[&lt;report-file&gt;&#32;[&lt;-appes&gt;]]&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04880"/>04880 
<anchor xml:id="_testlib_8h_source_1l04881"/>04881 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*[argc&#32;+&#32;1];
<anchor xml:id="_testlib_8h_source_1l04882"/>04882 
<anchor xml:id="_testlib_8h_source_1l04883"/>04883 &#32;&#32;&#32;&#32;va_list&#32;ap;
<anchor xml:id="_testlib_8h_source_1l04884"/>04884 &#32;&#32;&#32;&#32;va_start(ap,&#32;argc);
<anchor xml:id="_testlib_8h_source_1l04885"/>04885 &#32;&#32;&#32;&#32;argv[0]&#32;=&#32;NULL;
<anchor xml:id="_testlib_8h_source_1l04886"/>04886 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;argc;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l04887"/>04887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argv[i&#32;+&#32;1]&#32;=&#32;va_arg(ap,&#32;<emphasis role="keywordtype">char</emphasis>*);
<anchor xml:id="_testlib_8h_source_1l04888"/>04888 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04889"/>04889 &#32;&#32;&#32;&#32;va_end(ap);
<anchor xml:id="_testlib_8h_source_1l04890"/>04890 
<anchor xml:id="_testlib_8h_source_1l04891"/>04891 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aef178d6340fe04d5d616ee2da19488b4">registerTestlibCmd</link>(argc&#32;+&#32;1,&#32;argv);
<anchor xml:id="_testlib_8h_source_1l04892"/>04892 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;argv;
<anchor xml:id="_testlib_8h_source_1l04893"/>04893 }
<anchor xml:id="_testlib_8h_source_1l04894"/>04894 
<anchor xml:id="_testlib_8h_source_1l04895"/>04895 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__testlib_ensure(<emphasis role="keywordtype">bool</emphasis>&#32;cond,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;msg)&#32;{
<anchor xml:id="_testlib_8h_source_1l04896"/>04896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cond)
<anchor xml:id="_testlib_8h_source_1l04897"/>04897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;msg.c_str());
<anchor xml:id="_testlib_8h_source_1l04898"/>04898 }
<anchor xml:id="_testlib_8h_source_1l04899"/>04899 
<anchor xml:id="_testlib_8h_source_1l04900"/>04900 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l04901"/>04901 __attribute__((unused))
<anchor xml:id="_testlib_8h_source_1l04902"/>04902 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04903"/>04903 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__testlib_ensure(<emphasis role="keywordtype">bool</emphasis>&#32;cond,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg)&#32;{
<anchor xml:id="_testlib_8h_source_1l04904"/>04904 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cond)
<anchor xml:id="_testlib_8h_source_1l04905"/>04905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;msg);
<anchor xml:id="_testlib_8h_source_1l04906"/>04906 }
<anchor xml:id="_testlib_8h_source_1l04907"/>04907 
<anchor xml:id="_testlib_8h_source_1l04908"/><link linkend="_testlib_8h_1a6995c405db0a243abdf49c4e1de55a41">04908</link> <emphasis role="preprocessor">#define&#32;ensure(cond)&#32;__testlib_ensure(cond,&#32;&quot;Condition&#32;failed:&#32;\&quot;&quot;&#32;#cond&#32;&quot;\&quot;&quot;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04909"/><link linkend="_testlib_8h_1a9a63ce5ce3b143f8df9df20769c2ab86">04909</link> <emphasis role="preprocessor">#define&#32;STRINGIZE_DETAIL(x)&#32;#x</emphasis>
<anchor xml:id="_testlib_8h_source_1l04910"/><link linkend="_testlib_8h_1a3428692efe6051ef30016ffde1a9f7bb">04910</link> <emphasis role="preprocessor">#define&#32;STRINGIZE(x)&#32;STRINGIZE_DETAIL(x)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04911"/><link linkend="_testlib_8h_1a4d844981188f58cfa1385d5a4d6918c4">04911</link> <emphasis role="preprocessor">#define&#32;ensure_ext(cond)&#32;__testlib_ensure(cond,&#32;&quot;Line&#32;&quot;&#32;STRINGIZE(__LINE__)&#32;&quot;:&#32;Condition&#32;failed:&#32;\&quot;&quot;&#32;#cond&#32;&quot;\&quot;&quot;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04912"/>04912 
<anchor xml:id="_testlib_8h_source_1l04913"/>04913 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l04914"/>04914 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;2,&#32;3)))
<anchor xml:id="_testlib_8h_source_1l04915"/>04915 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04916"/><link linkend="_testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc">04916</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc">ensuref</link>(<emphasis role="keywordtype">bool</emphasis>&#32;cond,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l04917"/>04917 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cond)&#32;{
<anchor xml:id="_testlib_8h_source_1l04918"/>04918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04919"/>04919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_ensure(cond,&#32;message);
<anchor xml:id="_testlib_8h_source_1l04920"/>04920 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l04921"/>04921 }
<anchor xml:id="_testlib_8h_source_1l04922"/>04922 
<anchor xml:id="_testlib_8h_source_1l04923"/>04923 <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__testlib_fail(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;message)&#32;{
<anchor xml:id="_testlib_8h_source_1l04924"/>04924 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01">quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;message.c_str());
<anchor xml:id="_testlib_8h_source_1l04925"/>04925 }
<anchor xml:id="_testlib_8h_source_1l04926"/>04926 
<anchor xml:id="_testlib_8h_source_1l04927"/>04927 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l04928"/>04928 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;1,&#32;2)))
<anchor xml:id="_testlib_8h_source_1l04929"/>04929 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04930"/><link linkend="_testlib_8h_1a14fb24cad2f7e3d532a76f41ba4ba15b">04930</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a14fb24cad2f7e3d532a76f41ba4ba15b">setName</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l04931"/>04931 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>,&#32;name);
<anchor xml:id="_testlib_8h_source_1l04932"/>04932 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a00f5e960957827ed8846cf705f810473">checkerName</link>&#32;=&#32;name;
<anchor xml:id="_testlib_8h_source_1l04933"/>04933 }
<anchor xml:id="_testlib_8h_source_1l04934"/>04934 
<anchor xml:id="_testlib_8h_source_1l04935"/>04935 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_testlib_8h_source_1l04936"/>04936 <emphasis role="comment">&#32;*&#32;Do&#32;not&#32;use&#32;random_shuffle,&#32;because&#32;it&#32;will&#32;produce&#32;different&#32;result</emphasis>
<anchor xml:id="_testlib_8h_source_1l04937"/>04937 <emphasis role="comment">&#32;*&#32;for&#32;different&#32;C++&#32;compilers.</emphasis>
<anchor xml:id="_testlib_8h_source_1l04938"/>04938 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l04939"/>04939 <emphasis role="comment">&#32;*&#32;This&#32;implementation&#32;uses&#32;testlib&#32;random_t&#32;to&#32;produce&#32;random&#32;numbers,&#32;so</emphasis>
<anchor xml:id="_testlib_8h_source_1l04940"/>04940 <emphasis role="comment">&#32;*&#32;it&#32;is&#32;stable.</emphasis>
<anchor xml:id="_testlib_8h_source_1l04941"/>04941 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l04942"/>04942 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIter&gt;
<anchor xml:id="_testlib_8h_source_1l04943"/><link linkend="_testlib_8h_1a892cac7bffad68bec03005d0a771c3c7">04943</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a892cac7bffad68bec03005d0a771c3c7">shuffle</link>(_RandomAccessIter&#32;__first,&#32;_RandomAccessIter&#32;__last)&#32;{
<anchor xml:id="_testlib_8h_source_1l04944"/>04944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_testlib_8h_source_1l04945"/>04945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_RandomAccessIter&#32;__i&#32;=&#32;__first&#32;+&#32;1;&#32;__i&#32;!=&#32;__last;&#32;++__i)
<anchor xml:id="_testlib_8h_source_1l04946"/>04946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__i,&#32;__first&#32;+&#32;<link linkend="_testlib_8h_1a5743b8b2167a45883185605a8d8e10ce">rnd</link>.<link linkend="_classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6">next</link>(<emphasis role="keywordtype">int</emphasis>(__i&#32;-&#32;__first)&#32;+&#32;1));
<anchor xml:id="_testlib_8h_source_1l04947"/>04947 }
<anchor xml:id="_testlib_8h_source_1l04948"/>04948 
<anchor xml:id="_testlib_8h_source_1l04949"/>04949 
<anchor xml:id="_testlib_8h_source_1l04950"/>04950 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIter&gt;
<anchor xml:id="_testlib_8h_source_1l04951"/>04951 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__clang__)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04952"/>04952 __attribute__&#32;((error(<emphasis role="stringliteral">&quot;Don&apos;t&#32;use&#32;random_shuffle(),&#32;use&#32;shuffle()&#32;instead&quot;</emphasis>)))
<anchor xml:id="_testlib_8h_source_1l04953"/>04953 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04954"/><link linkend="_testlib_8h_1a2474f90782a9f77e45d81ae18d7c1ffb">04954</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a2474f90782a9f77e45d81ae18d7c1ffb">random_shuffle</link>(_RandomAccessIter,&#32;_RandomAccessIter)&#32;{
<anchor xml:id="_testlib_8h_source_1l04955"/>04955 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01">quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Don&apos;t&#32;use&#32;random_shuffle(),&#32;use&#32;shuffle()&#32;instead&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04956"/>04956 }
<anchor xml:id="_testlib_8h_source_1l04957"/>04957 
<anchor xml:id="_testlib_8h_source_1l04958"/>04958 <emphasis role="preprocessor">#ifdef&#32;__GLIBC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l04959"/>04959 <emphasis role="preprocessor">#&#32;&#32;define&#32;RAND_THROW_STATEMENT&#32;throw()</emphasis>
<anchor xml:id="_testlib_8h_source_1l04960"/>04960 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_testlib_8h_source_1l04961"/><link linkend="_testlib_8h_1a390e9021e1ac7b756fdf9a49c3da47f9">04961</link> <emphasis role="preprocessor">#&#32;&#32;define&#32;RAND_THROW_STATEMENT</emphasis>
<anchor xml:id="_testlib_8h_source_1l04962"/>04962 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04963"/>04963 
<anchor xml:id="_testlib_8h_source_1l04964"/>04964 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__clang__)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04965"/>04965 
<anchor xml:id="_testlib_8h_source_1l04966"/>04966 __attribute__&#32;((error(<emphasis role="stringliteral">&quot;Don&apos;t&#32;use&#32;rand(),&#32;use&#32;rnd.next()&#32;instead&quot;</emphasis>)))
<anchor xml:id="_testlib_8h_source_1l04967"/>04967 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04968"/>04968 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
<anchor xml:id="_testlib_8h_source_1l04969"/>04969 <emphasis role="preprocessor">#&#32;&#32;&#32;pragma&#32;warning(&#32;disable&#32;:&#32;4273&#32;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04970"/>04970 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04971"/><link linkend="_testlib_8h_1a84b949a61c3fa63ca17fcf0b2f9ad4f3">04971</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_testlib_8h_1a84b949a61c3fa63ca17fcf0b2f9ad4f3">rand</link>()&#32;<link linkend="_testlib_8h_1a390e9021e1ac7b756fdf9a49c3da47f9">RAND_THROW_STATEMENT</link>
<anchor xml:id="_testlib_8h_source_1l04972"/>04972 {
<anchor xml:id="_testlib_8h_source_1l04973"/>04973 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01">quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Don&apos;t&#32;use&#32;rand(),&#32;use&#32;rnd.next()&#32;instead&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l04974"/>04974 
<anchor xml:id="_testlib_8h_source_1l04975"/>04975 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;This&#32;line&#32;never&#32;runs.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l04976"/>04976 &#32;&#32;&#32;&#32;<emphasis role="comment">//throw&#32;&quot;Don&apos;t&#32;use&#32;rand(),&#32;use&#32;rnd.next()&#32;instead&quot;;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04977"/>04977 }
<anchor xml:id="_testlib_8h_source_1l04978"/>04978 
<anchor xml:id="_testlib_8h_source_1l04979"/>04979 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__clang__)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04980"/>04980 
<anchor xml:id="_testlib_8h_source_1l04981"/>04981 __attribute__&#32;((error(<emphasis role="stringliteral">&quot;Don&apos;t&#32;use&#32;srand(),&#32;you&#32;should&#32;use&#32;&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04982"/>04982 <emphasis role="stringliteral">&quot;&apos;registerGen(argc,&#32;argv,&#32;1);&apos;&#32;to&#32;initialize&#32;generator&#32;seed&#32;&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04983"/>04983 <emphasis role="stringliteral">&quot;by&#32;hash&#32;code&#32;of&#32;the&#32;command&#32;line&#32;params.&#32;The&#32;third&#32;parameter&#32;&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04984"/>04984 <emphasis role="stringliteral">&quot;is&#32;randomGeneratorVersion&#32;(currently&#32;the&#32;latest&#32;is&#32;1).&quot;</emphasis>)))
<anchor xml:id="_testlib_8h_source_1l04985"/>04985 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04986"/>04986 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
<anchor xml:id="_testlib_8h_source_1l04987"/>04987 <emphasis role="preprocessor">#&#32;&#32;&#32;pragma&#32;warning(&#32;disable&#32;:&#32;4273&#32;)</emphasis>
<anchor xml:id="_testlib_8h_source_1l04988"/>04988 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l04989"/><link linkend="_testlib_8h_1a7e6ebe263f2a877015210e0ac28c3e79">04989</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a7e6ebe263f2a877015210e0ac28c3e79">srand</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;seed)&#32;<link linkend="_testlib_8h_1a390e9021e1ac7b756fdf9a49c3da47f9">RAND_THROW_STATEMENT</link>
<anchor xml:id="_testlib_8h_source_1l04990"/>04990 {
<anchor xml:id="_testlib_8h_source_1l04991"/>04991 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01">quitf</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457">_fail</link>,&#32;<emphasis role="stringliteral">&quot;Don&apos;t&#32;use&#32;srand(),&#32;you&#32;should&#32;use&#32;&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04992"/>04992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;registerGen(argc,&#32;argv,&#32;1);&apos;&#32;to&#32;initialize&#32;generator&#32;seed&#32;&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04993"/>04993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;by&#32;hash&#32;code&#32;of&#32;the&#32;command&#32;line&#32;params.&#32;The&#32;third&#32;parameter&#32;&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l04994"/>04994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;is&#32;randomGeneratorVersion&#32;(currently&#32;the&#32;latest&#32;is&#32;1)&#32;[ignored&#32;seed=%u].&quot;</emphasis>,&#32;seed);
<anchor xml:id="_testlib_8h_source_1l04995"/>04995 }
<anchor xml:id="_testlib_8h_source_1l04996"/>04996 
<anchor xml:id="_testlib_8h_source_1l04997"/><link linkend="_testlib_8h_1a7b5d06041e39daeafd603dd998ce02c6">04997</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a7b5d06041e39daeafd603dd998ce02c6">startTest</link>(<emphasis role="keywordtype">int</emphasis>&#32;test)&#32;{
<anchor xml:id="_testlib_8h_source_1l04998"/>04998 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;testFileName&#32;=&#32;vtos(test);
<anchor xml:id="_testlib_8h_source_1l04999"/>04999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NULL&#32;==&#32;freopen(testFileName.c_str(),&#32;<emphasis role="stringliteral">&quot;wt&quot;</emphasis>,&#32;stdout))
<anchor xml:id="_testlib_8h_source_1l05000"/>05000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Unable&#32;to&#32;write&#32;file&#32;&apos;&quot;</emphasis>&#32;+&#32;testFileName&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05001"/>05001 }
<anchor xml:id="_testlib_8h_source_1l05002"/>05002 
<anchor xml:id="_testlib_8h_source_1l05003"/>05003 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05004"/>05004 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05005"/>05005 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05006"/><link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">05006</link> <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l05007"/>05007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_part(s);
<anchor xml:id="_testlib_8h_source_1l05008"/>05008 }
<anchor xml:id="_testlib_8h_source_1l05009"/>05009 
<anchor xml:id="_testlib_8h_source_1l05010"/>05010 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05011"/>05011 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05012"/>05012 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05013"/><link linkend="_testlib_8h_1a99a404dab8181e5e96eb0a675082f75d">05013</link> <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_testlib_8h_1a99a404dab8181e5e96eb0a675082f75d">englishEnding</link>(<emphasis role="keywordtype">int</emphasis>&#32;x)&#32;{
<anchor xml:id="_testlib_8h_source_1l05014"/>05014 &#32;&#32;&#32;&#32;x&#32;%=&#32;100;
<anchor xml:id="_testlib_8h_source_1l05015"/>05015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;/&#32;10&#32;==&#32;1)
<anchor xml:id="_testlib_8h_source_1l05016"/>05016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;th&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05017"/>05017 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;%&#32;10&#32;==&#32;1)
<anchor xml:id="_testlib_8h_source_1l05018"/>05018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;st&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05019"/>05019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;%&#32;10&#32;==&#32;2)
<anchor xml:id="_testlib_8h_source_1l05020"/>05020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;nd&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05021"/>05021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;%&#32;10&#32;==&#32;3)
<anchor xml:id="_testlib_8h_source_1l05022"/>05022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;rd&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05023"/>05023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;th&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05024"/>05024 }
<anchor xml:id="_testlib_8h_source_1l05025"/>05025 
<anchor xml:id="_testlib_8h_source_1l05026"/>05026 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Separator&gt;
<anchor xml:id="_testlib_8h_source_1l05027"/>05027 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05028"/>05028 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05029"/>05029 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05030"/><link linkend="_testlib_8h_1a639102617cba0cd4773c91f5eb4a1755">05030</link> std::string&#32;<link linkend="_testlib_8h_1a639102617cba0cd4773c91f5eb4a1755">join</link>(_ForwardIterator&#32;first,&#32;_ForwardIterator&#32;last,&#32;_Separator&#32;separator)&#32;{
<anchor xml:id="_testlib_8h_source_1l05031"/>05031 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
<anchor xml:id="_testlib_8h_source_1l05032"/>05032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;repeated&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05033"/>05033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_ForwardIterator&#32;i&#32;=&#32;first;&#32;i&#32;!=&#32;last;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l05034"/>05034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(repeated)
<anchor xml:id="_testlib_8h_source_1l05035"/>05035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;separator;
<anchor xml:id="_testlib_8h_source_1l05036"/>05036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05037"/>05037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;repeated&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05038"/>05038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;*i;
<anchor xml:id="_testlib_8h_source_1l05039"/>05039 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05040"/>05040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ss.str();
<anchor xml:id="_testlib_8h_source_1l05041"/>05041 }
<anchor xml:id="_testlib_8h_source_1l05042"/>05042 
<anchor xml:id="_testlib_8h_source_1l05043"/>05043 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
<anchor xml:id="_testlib_8h_source_1l05044"/>05044 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05045"/>05045 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05046"/>05046 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05047"/><link linkend="_testlib_8h_1a4d11cf2b81aaccdb03807cff7c1bae28">05047</link> std::string&#32;<link linkend="_testlib_8h_1a639102617cba0cd4773c91f5eb4a1755">join</link>(_ForwardIterator&#32;first,&#32;_ForwardIterator&#32;last)&#32;{
<anchor xml:id="_testlib_8h_source_1l05048"/>05048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a639102617cba0cd4773c91f5eb4a1755">join</link>(first,&#32;last,&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05049"/>05049 }
<anchor xml:id="_testlib_8h_source_1l05050"/>05050 
<anchor xml:id="_testlib_8h_source_1l05051"/>05051 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Collection,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Separator&gt;
<anchor xml:id="_testlib_8h_source_1l05052"/>05052 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05053"/>05053 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05054"/>05054 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05055"/><link linkend="_testlib_8h_1a8c0f114f708064c2c01b47ab82cdf028">05055</link> std::string&#32;<link linkend="_testlib_8h_1a639102617cba0cd4773c91f5eb4a1755">join</link>(<emphasis role="keyword">const</emphasis>&#32;_Collection&#32;&amp;collection,&#32;_Separator&#32;separator)&#32;{
<anchor xml:id="_testlib_8h_source_1l05056"/>05056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a639102617cba0cd4773c91f5eb4a1755">join</link>(collection.begin(),&#32;collection.end(),&#32;separator);
<anchor xml:id="_testlib_8h_source_1l05057"/>05057 }
<anchor xml:id="_testlib_8h_source_1l05058"/>05058 
<anchor xml:id="_testlib_8h_source_1l05059"/>05059 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Collection&gt;
<anchor xml:id="_testlib_8h_source_1l05060"/>05060 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05061"/>05061 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05062"/>05062 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05063"/><link linkend="_testlib_8h_1a31e919f2108a1f317e66d345a23c4923">05063</link> std::string&#32;<link linkend="_testlib_8h_1a639102617cba0cd4773c91f5eb4a1755">join</link>(<emphasis role="keyword">const</emphasis>&#32;_Collection&#32;&amp;collection)&#32;{
<anchor xml:id="_testlib_8h_source_1l05064"/>05064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_testlib_8h_1a639102617cba0cd4773c91f5eb4a1755">join</link>(collection,&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05065"/>05065 }
<anchor xml:id="_testlib_8h_source_1l05066"/>05066 
<anchor xml:id="_testlib_8h_source_1l05071"/>05071 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05072"/>05072 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05073"/>05073 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05074"/><link linkend="_testlib_8h_1ad85d51a1b33f2422e08f3ca02dbd3127">05074</link> std::vector&lt;std::string&gt;&#32;<link linkend="_testlib_8h_1ad85d51a1b33f2422e08f3ca02dbd3127">split</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;separator)&#32;{
<anchor xml:id="_testlib_8h_source_1l05075"/>05075 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;result;
<anchor xml:id="_testlib_8h_source_1l05076"/>05076 &#32;&#32;&#32;&#32;std::string&#32;item;
<anchor xml:id="_testlib_8h_source_1l05077"/>05077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l05078"/>05078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;separator)&#32;{
<anchor xml:id="_testlib_8h_source_1l05079"/>05079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(item);
<anchor xml:id="_testlib_8h_source_1l05080"/>05080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05081"/>05081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05082"/>05082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l05083"/>05083 &#32;&#32;&#32;&#32;result.push_back(item);
<anchor xml:id="_testlib_8h_source_1l05084"/>05084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l05085"/>05085 }
<anchor xml:id="_testlib_8h_source_1l05086"/>05086 
<anchor xml:id="_testlib_8h_source_1l05091"/>05091 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05092"/>05092 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05093"/>05093 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05094"/><link linkend="_testlib_8h_1a955ec7cfff0acb85ba9695bda2609499">05094</link> std::vector&lt;std::string&gt;&#32;<link linkend="_testlib_8h_1ad85d51a1b33f2422e08f3ca02dbd3127">split</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;separators)&#32;{
<anchor xml:id="_testlib_8h_source_1l05095"/>05095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(separators.empty())
<anchor xml:id="_testlib_8h_source_1l05096"/>05096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::vector&lt;std::string&gt;(1,&#32;s);
<anchor xml:id="_testlib_8h_source_1l05097"/>05097 
<anchor xml:id="_testlib_8h_source_1l05098"/>05098 &#32;&#32;&#32;&#32;std::vector&lt;bool&gt;&#32;isSeparator(256);
<anchor xml:id="_testlib_8h_source_1l05099"/>05099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;separators.size();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l05100"/>05100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSeparator[(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)&#32;(separators[i])]&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05101"/>05101 
<anchor xml:id="_testlib_8h_source_1l05102"/>05102 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;result;
<anchor xml:id="_testlib_8h_source_1l05103"/>05103 &#32;&#32;&#32;&#32;std::string&#32;item;
<anchor xml:id="_testlib_8h_source_1l05104"/>05104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l05105"/>05105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSeparator[(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)&#32;(s[i])])&#32;{
<anchor xml:id="_testlib_8h_source_1l05106"/>05106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(item);
<anchor xml:id="_testlib_8h_source_1l05107"/>05107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05108"/>05108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05109"/>05109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l05110"/>05110 &#32;&#32;&#32;&#32;result.push_back(item);
<anchor xml:id="_testlib_8h_source_1l05111"/>05111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l05112"/>05112 }
<anchor xml:id="_testlib_8h_source_1l05113"/>05113 
<anchor xml:id="_testlib_8h_source_1l05117"/>05117 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05118"/>05118 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05119"/>05119 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05120"/><link linkend="_testlib_8h_1aab9e80a2f4e4203b27b11c5880850d8e">05120</link> std::vector&lt;std::string&gt;&#32;<link linkend="_testlib_8h_1aab9e80a2f4e4203b27b11c5880850d8e">tokenize</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;separator)&#32;{
<anchor xml:id="_testlib_8h_source_1l05121"/>05121 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;result;
<anchor xml:id="_testlib_8h_source_1l05122"/>05122 &#32;&#32;&#32;&#32;std::string&#32;item;
<anchor xml:id="_testlib_8h_source_1l05123"/>05123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l05124"/>05124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;separator)&#32;{
<anchor xml:id="_testlib_8h_source_1l05125"/>05125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!item.empty())
<anchor xml:id="_testlib_8h_source_1l05126"/>05126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(item);
<anchor xml:id="_testlib_8h_source_1l05127"/>05127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05128"/>05128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05129"/>05129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l05130"/>05130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!item.empty())
<anchor xml:id="_testlib_8h_source_1l05131"/>05131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(item);
<anchor xml:id="_testlib_8h_source_1l05132"/>05132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l05133"/>05133 }
<anchor xml:id="_testlib_8h_source_1l05134"/>05134 
<anchor xml:id="_testlib_8h_source_1l05138"/>05138 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05139"/>05139 __attribute__((<emphasis role="keyword">const</emphasis>))
<anchor xml:id="_testlib_8h_source_1l05140"/>05140 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05141"/><link linkend="_testlib_8h_1af67ac6c551dc21d30494892a51a7fbb7">05141</link> std::vector&lt;std::string&gt;&#32;<link linkend="_testlib_8h_1aab9e80a2f4e4203b27b11c5880850d8e">tokenize</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;separators)&#32;{
<anchor xml:id="_testlib_8h_source_1l05142"/>05142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(separators.empty())
<anchor xml:id="_testlib_8h_source_1l05143"/>05143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::vector&lt;std::string&gt;(1,&#32;s);
<anchor xml:id="_testlib_8h_source_1l05144"/>05144 
<anchor xml:id="_testlib_8h_source_1l05145"/>05145 &#32;&#32;&#32;&#32;std::vector&lt;bool&gt;&#32;isSeparator(256);
<anchor xml:id="_testlib_8h_source_1l05146"/>05146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;separators.size();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l05147"/>05147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSeparator[(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)&#32;(separators[i])]&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05148"/>05148 
<anchor xml:id="_testlib_8h_source_1l05149"/>05149 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;result;
<anchor xml:id="_testlib_8h_source_1l05150"/>05150 &#32;&#32;&#32;&#32;std::string&#32;item;
<anchor xml:id="_testlib_8h_source_1l05151"/>05151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l05152"/>05152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSeparator[(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)&#32;(s[i])])&#32;{
<anchor xml:id="_testlib_8h_source_1l05153"/>05153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!item.empty())
<anchor xml:id="_testlib_8h_source_1l05154"/>05154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(item);
<anchor xml:id="_testlib_8h_source_1l05155"/>05155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05156"/>05156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05157"/>05157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l05158"/>05158 
<anchor xml:id="_testlib_8h_source_1l05159"/>05159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!item.empty())
<anchor xml:id="_testlib_8h_source_1l05160"/>05160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(item);
<anchor xml:id="_testlib_8h_source_1l05161"/>05161 
<anchor xml:id="_testlib_8h_source_1l05162"/>05162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l05163"/>05163 }
<anchor xml:id="_testlib_8h_source_1l05164"/>05164 
<anchor xml:id="_testlib_8h_source_1l05165"/><link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">05165</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">__testlib_expectedButFound</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;std::string&#32;expected,&#32;std::string&#32;found,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prepend)&#32;{
<anchor xml:id="_testlib_8h_source_1l05166"/>05166 &#32;&#32;&#32;&#32;std::string&#32;message;
<anchor xml:id="_testlib_8h_source_1l05167"/>05167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strlen(prepend)&#32;!=&#32;0)
<anchor xml:id="_testlib_8h_source_1l05168"/>05168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;message&#32;=&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;%s:&#32;expected&#32;&apos;%s&apos;,&#32;but&#32;found&#32;&apos;%s&apos;&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l05169"/>05169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(prepend).c_str(),&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(expected).c_str(),&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(found).c_str());
<anchor xml:id="_testlib_8h_source_1l05170"/>05170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05171"/>05171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;message&#32;=&#32;<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;%s&apos;,&#32;but&#32;found&#32;&apos;%s&apos;&quot;</emphasis>,
<anchor xml:id="_testlib_8h_source_1l05172"/>05172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(expected).c_str(),&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(found).c_str());
<anchor xml:id="_testlib_8h_source_1l05173"/>05173 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1acec28096e85b471e7121ed06ba1eeb42">quit</link>(result,&#32;message);
<anchor xml:id="_testlib_8h_source_1l05174"/>05174 }
<anchor xml:id="_testlib_8h_source_1l05175"/>05175 
<anchor xml:id="_testlib_8h_source_1l05176"/><link linkend="_testlib_8h_1a4a02f43815b2ec1d3963a3d487234d0d">05176</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">__testlib_expectedButFound</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keywordtype">double</emphasis>&#32;expected,&#32;<emphasis role="keywordtype">double</emphasis>&#32;found,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prepend)&#32;{
<anchor xml:id="_testlib_8h_source_1l05177"/>05177 &#32;&#32;&#32;&#32;std::string&#32;expectedString&#32;=&#32;removeDoubleTrailingZeroes(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;%.12f&quot;</emphasis>,&#32;expected));
<anchor xml:id="_testlib_8h_source_1l05178"/>05178 &#32;&#32;&#32;&#32;std::string&#32;foundString&#32;=&#32;removeDoubleTrailingZeroes(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;%.12f&quot;</emphasis>,&#32;found));
<anchor xml:id="_testlib_8h_source_1l05179"/>05179 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">__testlib_expectedButFound</link>(result,&#32;expectedString,&#32;foundString,&#32;prepend);
<anchor xml:id="_testlib_8h_source_1l05180"/>05180 }
<anchor xml:id="_testlib_8h_source_1l05181"/>05181 
<anchor xml:id="_testlib_8h_source_1l05182"/>05182 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05183"/>05183 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05184"/>05184 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;4,&#32;5)))
<anchor xml:id="_testlib_8h_source_1l05185"/>05185 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05186"/><link linkend="_testlib_8h_1a3775e4b9dc20c18e8b0d509a145d5d90">05186</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a3775e4b9dc20c18e8b0d509a145d5d90">expectedButFound</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;T&#32;expected,&#32;T&#32;found,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prependFormat&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l05187"/>05187 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(prependFormat,&#32;prependFormat,&#32;prepend);
<anchor xml:id="_testlib_8h_source_1l05188"/>05188 &#32;&#32;&#32;&#32;std::string&#32;expectedString&#32;=&#32;vtos(expected);
<anchor xml:id="_testlib_8h_source_1l05189"/>05189 &#32;&#32;&#32;&#32;std::string&#32;foundString&#32;=&#32;vtos(found);
<anchor xml:id="_testlib_8h_source_1l05190"/>05190 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">__testlib_expectedButFound</link>(result,&#32;expectedString,&#32;foundString,&#32;prepend.c_str());
<anchor xml:id="_testlib_8h_source_1l05191"/>05191 }
<anchor xml:id="_testlib_8h_source_1l05192"/>05192 
<anchor xml:id="_testlib_8h_source_1l05193"/>05193 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05194"/>05194 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05195"/>05195 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;4,&#32;5)))
<anchor xml:id="_testlib_8h_source_1l05196"/>05196 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05197"/><link linkend="_testlib_8h_1ace65de365c59bd5b3c271f84cf884bd8">05197</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>
<anchor xml:id="_testlib_8h_source_1l05198"/>05198 <link linkend="_testlib_8h_1ace65de365c59bd5b3c271f84cf884bd8">expectedButFound&lt;std::string&gt;</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;std::string&#32;expected,&#32;std::string&#32;found,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prependFormat,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l05199"/>05199 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(prependFormat,&#32;prependFormat,&#32;prepend);
<anchor xml:id="_testlib_8h_source_1l05200"/>05200 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">__testlib_expectedButFound</link>(result,&#32;expected,&#32;found,&#32;prepend.c_str());
<anchor xml:id="_testlib_8h_source_1l05201"/>05201 }
<anchor xml:id="_testlib_8h_source_1l05202"/>05202 
<anchor xml:id="_testlib_8h_source_1l05203"/>05203 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05204"/>05204 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05205"/>05205 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;4,&#32;5)))
<anchor xml:id="_testlib_8h_source_1l05206"/>05206 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05207"/><link linkend="_testlib_8h_1a3cc2bbe22675e2d0b0bfaf8f61d005a8">05207</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a3cc2bbe22675e2d0b0bfaf8f61d005a8">expectedButFound&lt;double&gt;</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keywordtype">double</emphasis>&#32;expected,&#32;<emphasis role="keywordtype">double</emphasis>&#32;found,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prependFormat,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l05208"/>05208 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(prependFormat,&#32;prependFormat,&#32;prepend);
<anchor xml:id="_testlib_8h_source_1l05209"/>05209 &#32;&#32;&#32;&#32;std::string&#32;expectedString&#32;=&#32;removeDoubleTrailingZeroes(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;%.12f&quot;</emphasis>,&#32;expected));
<anchor xml:id="_testlib_8h_source_1l05210"/>05210 &#32;&#32;&#32;&#32;std::string&#32;foundString&#32;=&#32;removeDoubleTrailingZeroes(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;%.12f&quot;</emphasis>,&#32;found));
<anchor xml:id="_testlib_8h_source_1l05211"/>05211 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">__testlib_expectedButFound</link>(result,&#32;expectedString,&#32;foundString,&#32;prepend.c_str());
<anchor xml:id="_testlib_8h_source_1l05212"/>05212 }
<anchor xml:id="_testlib_8h_source_1l05213"/>05213 
<anchor xml:id="_testlib_8h_source_1l05214"/>05214 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05215"/>05215 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05216"/>05216 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;4,&#32;5)))
<anchor xml:id="_testlib_8h_source_1l05217"/>05217 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05218"/><link linkend="_testlib_8h_1a8c5e10df2297d4ebe22eb580285ae5de">05218</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>
<anchor xml:id="_testlib_8h_source_1l05219"/>05219 <link linkend="_testlib_8h_1a8c5e10df2297d4ebe22eb580285ae5de">expectedButFound&lt;const char *&gt;</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*expected,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*found,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prependFormat,
<anchor xml:id="_testlib_8h_source_1l05220"/>05220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l05221"/>05221 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(prependFormat,&#32;prependFormat,&#32;prepend);
<anchor xml:id="_testlib_8h_source_1l05222"/>05222 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">__testlib_expectedButFound</link>(result,&#32;std::string(expected),&#32;std::string(found),&#32;prepend.c_str());
<anchor xml:id="_testlib_8h_source_1l05223"/>05223 }
<anchor xml:id="_testlib_8h_source_1l05224"/>05224 
<anchor xml:id="_testlib_8h_source_1l05225"/>05225 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05226"/>05226 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05227"/>05227 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;4,&#32;5)))
<anchor xml:id="_testlib_8h_source_1l05228"/>05228 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05229"/><link linkend="_testlib_8h_1a5f326691d44051de660eb6f3f25400f9">05229</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_testlib_8h_1a5f326691d44051de660eb6f3f25400f9">expectedButFound&lt;float&gt;</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keywordtype">float</emphasis>&#32;expected,&#32;<emphasis role="keywordtype">float</emphasis>&#32;found,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prependFormat,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l05230"/>05230 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(prependFormat,&#32;prependFormat,&#32;prepend);
<anchor xml:id="_testlib_8h_source_1l05231"/>05231 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">__testlib_expectedButFound</link>(result,&#32;<emphasis role="keywordtype">double</emphasis>(expected),&#32;<emphasis role="keywordtype">double</emphasis>(found),&#32;prepend.c_str());
<anchor xml:id="_testlib_8h_source_1l05232"/>05232 }
<anchor xml:id="_testlib_8h_source_1l05233"/>05233 
<anchor xml:id="_testlib_8h_source_1l05234"/>05234 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05235"/>05235 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
<anchor xml:id="_testlib_8h_source_1l05236"/>05236 __attribute__&#32;((<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>&#32;(printf,&#32;4,&#32;5)))
<anchor xml:id="_testlib_8h_source_1l05237"/>05237 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l05238"/><link linkend="_testlib_8h_1a1c7f66f9e3c4f693663ffc534807ea02">05238</link> <link linkend="_testlib_8h_1aa1728270d73c5d1598de1fd691762eb1">NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>
<anchor xml:id="_testlib_8h_source_1l05239"/>05239 <link linkend="_testlib_8h_1a1c7f66f9e3c4f693663ffc534807ea02">expectedButFound&lt;long double&gt;</link>(<link linkend="_testlib_8h_1aca738f43134375f0a18077d633f14578">TResult</link>&#32;result,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;expected,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;found,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prependFormat,&#32;...)&#32;{
<anchor xml:id="_testlib_8h_source_1l05240"/>05240 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db">FMT_TO_RESULT</link>(prependFormat,&#32;prependFormat,&#32;prepend);
<anchor xml:id="_testlib_8h_source_1l05241"/>05241 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a117c50c18ae39dbb09a488ac92a086db">__testlib_expectedButFound</link>(result,&#32;<emphasis role="keywordtype">double</emphasis>(expected),&#32;<emphasis role="keywordtype">double</emphasis>(found),&#32;prepend.c_str());
<anchor xml:id="_testlib_8h_source_1l05242"/>05242 }
<anchor xml:id="_testlib_8h_source_1l05243"/>05243 
<anchor xml:id="_testlib_8h_source_1l05244"/>05244 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;199711L&#32;||&#32;defined(_MSC_VER)</emphasis>
<anchor xml:id="_testlib_8h_source_1l05245"/>05245 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05246"/>05246 <emphasis role="keyword">struct&#32;</emphasis>is_iterable&#32;{
<anchor xml:id="_testlib_8h_source_1l05247"/>05247 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
<anchor xml:id="_testlib_8h_source_1l05248"/>05248 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;test(<emphasis role="keyword">typename</emphasis>&#32;U::iterator&#32;*x);
<anchor xml:id="_testlib_8h_source_1l05249"/>05249 
<anchor xml:id="_testlib_8h_source_1l05250"/>05250 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
<anchor xml:id="_testlib_8h_source_1l05251"/>05251 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;test(U&#32;*x);
<anchor xml:id="_testlib_8h_source_1l05252"/>05252 
<anchor xml:id="_testlib_8h_source_1l05253"/>05253 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(test&lt;T&gt;(0))&#32;==&#32;1;
<anchor xml:id="_testlib_8h_source_1l05254"/>05254 };
<anchor xml:id="_testlib_8h_source_1l05255"/>05255 
<anchor xml:id="_testlib_8h_source_1l05256"/>05256 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;B,&#32;<emphasis role="keyword">class</emphasis>&#32;T&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
<anchor xml:id="_testlib_8h_source_1l05257"/>05257 <emphasis role="keyword">struct&#32;</emphasis>__testlib_enable_if&#32;{
<anchor xml:id="_testlib_8h_source_1l05258"/>05258 };
<anchor xml:id="_testlib_8h_source_1l05259"/>05259 
<anchor xml:id="_testlib_8h_source_1l05260"/>05260 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05261"/>05261 <emphasis role="keyword">struct&#32;</emphasis>__testlib_enable_if&lt;true,&#32;T&gt;&#32;{
<anchor xml:id="_testlib_8h_source_1l05262"/>05262 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;T&#32;type;
<anchor xml:id="_testlib_8h_source_1l05263"/>05263 };
<anchor xml:id="_testlib_8h_source_1l05264"/>05264 
<anchor xml:id="_testlib_8h_source_1l05265"/>05265 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05266"/>05266 <emphasis role="keyword">typename</emphasis>&#32;__testlib_enable_if&lt;!is_iterable&lt;T&gt;::value,&#32;<emphasis role="keywordtype">void</emphasis>&gt;::type&#32;__testlib_print_one(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;t)&#32;{
<anchor xml:id="_testlib_8h_source_1l05267"/>05267 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;t;
<anchor xml:id="_testlib_8h_source_1l05268"/>05268 }
<anchor xml:id="_testlib_8h_source_1l05269"/>05269 
<anchor xml:id="_testlib_8h_source_1l05270"/>05270 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05271"/>05271 <emphasis role="keyword">typename</emphasis>&#32;__testlib_enable_if&lt;is_iterable&lt;T&gt;::value,&#32;<emphasis role="keywordtype">void</emphasis>&gt;::type&#32;__testlib_print_one(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;t)&#32;{
<anchor xml:id="_testlib_8h_source_1l05272"/>05272 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;first&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05273"/>05273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;T::const_iterator&#32;i&#32;=&#32;t.begin();&#32;i&#32;!=&#32;t.end();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l05274"/>05274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first)
<anchor xml:id="_testlib_8h_source_1l05275"/>05275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05276"/>05276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05277"/>05277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05278"/>05278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;*i;
<anchor xml:id="_testlib_8h_source_1l05279"/>05279 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05280"/>05280 }
<anchor xml:id="_testlib_8h_source_1l05281"/>05281 
<anchor xml:id="_testlib_8h_source_1l05282"/>05282 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05283"/>05283 <emphasis role="keyword">typename</emphasis>&#32;__testlib_enable_if&lt;is_iterable&lt;std::string&gt;::value,&#32;<emphasis role="keywordtype">void</emphasis>&gt;::type
<anchor xml:id="_testlib_8h_source_1l05284"/>05284 __testlib_print_one&lt;std::string&gt;(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;t)&#32;{
<anchor xml:id="_testlib_8h_source_1l05285"/>05285 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;t;
<anchor xml:id="_testlib_8h_source_1l05286"/>05286 }
<anchor xml:id="_testlib_8h_source_1l05287"/>05287 
<anchor xml:id="_testlib_8h_source_1l05288"/>05288 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B&gt;
<anchor xml:id="_testlib_8h_source_1l05289"/>05289 <emphasis role="keywordtype">void</emphasis>&#32;__println_range(A&#32;begin,&#32;B&#32;end)&#32;{
<anchor xml:id="_testlib_8h_source_1l05290"/>05290 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;first&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05291"/>05291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(B&#32;i&#32;=&#32;B(begin);&#32;i&#32;!=&#32;end;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l05292"/>05292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first)
<anchor xml:id="_testlib_8h_source_1l05293"/>05293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05294"/>05294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05295"/>05295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05296"/>05296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_print_one(*i);
<anchor xml:id="_testlib_8h_source_1l05297"/>05297 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05298"/>05298 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_testlib_8h_source_1l05299"/>05299 }
<anchor xml:id="_testlib_8h_source_1l05300"/>05300 
<anchor xml:id="_testlib_8h_source_1l05301"/>05301 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T,&#32;<emphasis role="keyword">class</emphasis>&#32;Enable&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
<anchor xml:id="_testlib_8h_source_1l05302"/>05302 <emphasis role="keyword">struct&#32;</emphasis>is_iterator&#32;{
<anchor xml:id="_testlib_8h_source_1l05303"/>05303 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;makeT();
<anchor xml:id="_testlib_8h_source_1l05304"/>05304 
<anchor xml:id="_testlib_8h_source_1l05305"/>05305 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*twoptrs[2];
<anchor xml:id="_testlib_8h_source_1l05306"/>05306 
<anchor xml:id="_testlib_8h_source_1l05307"/>05307 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;twoptrs&#32;&amp;test(...);
<anchor xml:id="_testlib_8h_source_1l05308"/>05308 
<anchor xml:id="_testlib_8h_source_1l05309"/>05309 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;R&gt;
<anchor xml:id="_testlib_8h_source_1l05310"/>05310 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;R::iterator_category&#32;*test(R);
<anchor xml:id="_testlib_8h_source_1l05311"/>05311 
<anchor xml:id="_testlib_8h_source_1l05312"/>05312 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;R&gt;
<anchor xml:id="_testlib_8h_source_1l05313"/>05313 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*test(R&#32;*);
<anchor xml:id="_testlib_8h_source_1l05314"/>05314 
<anchor xml:id="_testlib_8h_source_1l05315"/>05315 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(test(makeT()))&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">void</emphasis>&#32;*);
<anchor xml:id="_testlib_8h_source_1l05316"/>05316 };
<anchor xml:id="_testlib_8h_source_1l05317"/>05317 
<anchor xml:id="_testlib_8h_source_1l05318"/>05318 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05319"/>05319 <emphasis role="keyword">struct&#32;</emphasis>is_iterator&lt;T,&#32;typename&#32;__testlib_enable_if&lt;std::is_array&lt;T&gt;::value&gt;::type&gt;&#32;{
<anchor xml:id="_testlib_8h_source_1l05320"/>05320 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05321"/>05321 };
<anchor xml:id="_testlib_8h_source_1l05322"/>05322 
<anchor xml:id="_testlib_8h_source_1l05323"/>05323 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B&gt;
<anchor xml:id="_testlib_8h_source_1l05324"/>05324 <emphasis role="keyword">typename</emphasis>&#32;__testlib_enable_if&lt;!is_iterator&lt;B&gt;::value,&#32;<emphasis role="keywordtype">void</emphasis>&gt;::type&#32;println(<emphasis role="keyword">const</emphasis>&#32;A&#32;&amp;a,&#32;<emphasis role="keyword">const</emphasis>&#32;B&#32;&amp;b)&#32;{
<anchor xml:id="_testlib_8h_source_1l05325"/>05325 &#32;&#32;&#32;&#32;__testlib_print_one(a);
<anchor xml:id="_testlib_8h_source_1l05326"/>05326 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05327"/>05327 &#32;&#32;&#32;&#32;__testlib_print_one(b);
<anchor xml:id="_testlib_8h_source_1l05328"/>05328 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_testlib_8h_source_1l05329"/>05329 }
<anchor xml:id="_testlib_8h_source_1l05330"/>05330 
<anchor xml:id="_testlib_8h_source_1l05331"/>05331 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B&gt;
<anchor xml:id="_testlib_8h_source_1l05332"/>05332 <emphasis role="keyword">typename</emphasis>&#32;__testlib_enable_if&lt;is_iterator&lt;B&gt;::value,&#32;<emphasis role="keywordtype">void</emphasis>&gt;::type&#32;println(<emphasis role="keyword">const</emphasis>&#32;A&#32;&amp;a,&#32;<emphasis role="keyword">const</emphasis>&#32;B&#32;&amp;b)&#32;{
<anchor xml:id="_testlib_8h_source_1l05333"/>05333 &#32;&#32;&#32;&#32;__println_range(a,&#32;b);
<anchor xml:id="_testlib_8h_source_1l05334"/>05334 }
<anchor xml:id="_testlib_8h_source_1l05335"/>05335 
<anchor xml:id="_testlib_8h_source_1l05336"/>05336 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;A&gt;
<anchor xml:id="_testlib_8h_source_1l05337"/>05337 <emphasis role="keywordtype">void</emphasis>&#32;println(<emphasis role="keyword">const</emphasis>&#32;A&#32;*a,&#32;<emphasis role="keyword">const</emphasis>&#32;A&#32;*b)&#32;{
<anchor xml:id="_testlib_8h_source_1l05338"/>05338 &#32;&#32;&#32;&#32;__println_range(a,&#32;b);
<anchor xml:id="_testlib_8h_source_1l05339"/>05339 }
<anchor xml:id="_testlib_8h_source_1l05340"/>05340 
<anchor xml:id="_testlib_8h_source_1l05341"/>05341 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05342"/>05342 <emphasis role="keywordtype">void</emphasis>&#32;println&lt;char&gt;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*a,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*b)&#32;{
<anchor xml:id="_testlib_8h_source_1l05343"/>05343 &#32;&#32;&#32;&#32;__testlib_print_one(a);
<anchor xml:id="_testlib_8h_source_1l05344"/>05344 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05345"/>05345 &#32;&#32;&#32;&#32;__testlib_print_one(b);
<anchor xml:id="_testlib_8h_source_1l05346"/>05346 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_testlib_8h_source_1l05347"/>05347 }
<anchor xml:id="_testlib_8h_source_1l05348"/>05348 
<anchor xml:id="_testlib_8h_source_1l05349"/>05349 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05350"/>05350 <emphasis role="keywordtype">void</emphasis>&#32;println(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;x)&#32;{
<anchor xml:id="_testlib_8h_source_1l05351"/>05351 &#32;&#32;&#32;&#32;__testlib_print_one(x);
<anchor xml:id="_testlib_8h_source_1l05352"/>05352 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_testlib_8h_source_1l05353"/>05353 }
<anchor xml:id="_testlib_8h_source_1l05354"/>05354 
<anchor xml:id="_testlib_8h_source_1l05355"/>05355 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B,&#32;<emphasis role="keyword">typename</emphasis>&#32;C&gt;
<anchor xml:id="_testlib_8h_source_1l05356"/>05356 <emphasis role="keywordtype">void</emphasis>&#32;println(<emphasis role="keyword">const</emphasis>&#32;A&#32;&amp;a,&#32;<emphasis role="keyword">const</emphasis>&#32;B&#32;&amp;b,&#32;<emphasis role="keyword">const</emphasis>&#32;C&#32;&amp;c)&#32;{
<anchor xml:id="_testlib_8h_source_1l05357"/>05357 &#32;&#32;&#32;&#32;__testlib_print_one(a);
<anchor xml:id="_testlib_8h_source_1l05358"/>05358 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05359"/>05359 &#32;&#32;&#32;&#32;__testlib_print_one(b);
<anchor xml:id="_testlib_8h_source_1l05360"/>05360 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05361"/>05361 &#32;&#32;&#32;&#32;__testlib_print_one(c);
<anchor xml:id="_testlib_8h_source_1l05362"/>05362 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_testlib_8h_source_1l05363"/>05363 }
<anchor xml:id="_testlib_8h_source_1l05364"/>05364 
<anchor xml:id="_testlib_8h_source_1l05365"/>05365 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B,&#32;<emphasis role="keyword">typename</emphasis>&#32;C,&#32;<emphasis role="keyword">typename</emphasis>&#32;D&gt;
<anchor xml:id="_testlib_8h_source_1l05366"/>05366 <emphasis role="keywordtype">void</emphasis>&#32;println(<emphasis role="keyword">const</emphasis>&#32;A&#32;&amp;a,&#32;<emphasis role="keyword">const</emphasis>&#32;B&#32;&amp;b,&#32;<emphasis role="keyword">const</emphasis>&#32;C&#32;&amp;c,&#32;<emphasis role="keyword">const</emphasis>&#32;D&#32;&amp;d)&#32;{
<anchor xml:id="_testlib_8h_source_1l05367"/>05367 &#32;&#32;&#32;&#32;__testlib_print_one(a);
<anchor xml:id="_testlib_8h_source_1l05368"/>05368 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05369"/>05369 &#32;&#32;&#32;&#32;__testlib_print_one(b);
<anchor xml:id="_testlib_8h_source_1l05370"/>05370 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05371"/>05371 &#32;&#32;&#32;&#32;__testlib_print_one(c);
<anchor xml:id="_testlib_8h_source_1l05372"/>05372 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05373"/>05373 &#32;&#32;&#32;&#32;__testlib_print_one(d);
<anchor xml:id="_testlib_8h_source_1l05374"/>05374 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_testlib_8h_source_1l05375"/>05375 }
<anchor xml:id="_testlib_8h_source_1l05376"/>05376 
<anchor xml:id="_testlib_8h_source_1l05377"/>05377 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B,&#32;<emphasis role="keyword">typename</emphasis>&#32;C,&#32;<emphasis role="keyword">typename</emphasis>&#32;D,&#32;<emphasis role="keyword">typename</emphasis>&#32;E&gt;
<anchor xml:id="_testlib_8h_source_1l05378"/>05378 <emphasis role="keywordtype">void</emphasis>&#32;println(<emphasis role="keyword">const</emphasis>&#32;A&#32;&amp;a,&#32;<emphasis role="keyword">const</emphasis>&#32;B&#32;&amp;b,&#32;<emphasis role="keyword">const</emphasis>&#32;C&#32;&amp;c,&#32;<emphasis role="keyword">const</emphasis>&#32;D&#32;&amp;d,&#32;<emphasis role="keyword">const</emphasis>&#32;E&#32;&amp;e)&#32;{
<anchor xml:id="_testlib_8h_source_1l05379"/>05379 &#32;&#32;&#32;&#32;__testlib_print_one(a);
<anchor xml:id="_testlib_8h_source_1l05380"/>05380 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05381"/>05381 &#32;&#32;&#32;&#32;__testlib_print_one(b);
<anchor xml:id="_testlib_8h_source_1l05382"/>05382 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05383"/>05383 &#32;&#32;&#32;&#32;__testlib_print_one(c);
<anchor xml:id="_testlib_8h_source_1l05384"/>05384 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05385"/>05385 &#32;&#32;&#32;&#32;__testlib_print_one(d);
<anchor xml:id="_testlib_8h_source_1l05386"/>05386 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05387"/>05387 &#32;&#32;&#32;&#32;__testlib_print_one(e);
<anchor xml:id="_testlib_8h_source_1l05388"/>05388 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_testlib_8h_source_1l05389"/>05389 }
<anchor xml:id="_testlib_8h_source_1l05390"/>05390 
<anchor xml:id="_testlib_8h_source_1l05391"/>05391 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B,&#32;<emphasis role="keyword">typename</emphasis>&#32;C,&#32;<emphasis role="keyword">typename</emphasis>&#32;D,&#32;<emphasis role="keyword">typename</emphasis>&#32;E,&#32;<emphasis role="keyword">typename</emphasis>&#32;F&gt;
<anchor xml:id="_testlib_8h_source_1l05392"/>05392 <emphasis role="keywordtype">void</emphasis>&#32;println(<emphasis role="keyword">const</emphasis>&#32;A&#32;&amp;a,&#32;<emphasis role="keyword">const</emphasis>&#32;B&#32;&amp;b,&#32;<emphasis role="keyword">const</emphasis>&#32;C&#32;&amp;c,&#32;<emphasis role="keyword">const</emphasis>&#32;D&#32;&amp;d,&#32;<emphasis role="keyword">const</emphasis>&#32;E&#32;&amp;e,&#32;<emphasis role="keyword">const</emphasis>&#32;F&#32;&amp;f)&#32;{
<anchor xml:id="_testlib_8h_source_1l05393"/>05393 &#32;&#32;&#32;&#32;__testlib_print_one(a);
<anchor xml:id="_testlib_8h_source_1l05394"/>05394 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05395"/>05395 &#32;&#32;&#32;&#32;__testlib_print_one(b);
<anchor xml:id="_testlib_8h_source_1l05396"/>05396 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05397"/>05397 &#32;&#32;&#32;&#32;__testlib_print_one(c);
<anchor xml:id="_testlib_8h_source_1l05398"/>05398 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05399"/>05399 &#32;&#32;&#32;&#32;__testlib_print_one(d);
<anchor xml:id="_testlib_8h_source_1l05400"/>05400 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05401"/>05401 &#32;&#32;&#32;&#32;__testlib_print_one(e);
<anchor xml:id="_testlib_8h_source_1l05402"/>05402 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05403"/>05403 &#32;&#32;&#32;&#32;__testlib_print_one(f);
<anchor xml:id="_testlib_8h_source_1l05404"/>05404 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_testlib_8h_source_1l05405"/>05405 }
<anchor xml:id="_testlib_8h_source_1l05406"/>05406 
<anchor xml:id="_testlib_8h_source_1l05407"/>05407 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B,&#32;<emphasis role="keyword">typename</emphasis>&#32;C,&#32;<emphasis role="keyword">typename</emphasis>&#32;D,&#32;<emphasis role="keyword">typename</emphasis>&#32;E,&#32;<emphasis role="keyword">typename</emphasis>&#32;F,&#32;<emphasis role="keyword">typename</emphasis>&#32;G&gt;
<anchor xml:id="_testlib_8h_source_1l05408"/>05408 <emphasis role="keywordtype">void</emphasis>&#32;println(<emphasis role="keyword">const</emphasis>&#32;A&#32;&amp;a,&#32;<emphasis role="keyword">const</emphasis>&#32;B&#32;&amp;b,&#32;<emphasis role="keyword">const</emphasis>&#32;C&#32;&amp;c,&#32;<emphasis role="keyword">const</emphasis>&#32;D&#32;&amp;d,&#32;<emphasis role="keyword">const</emphasis>&#32;E&#32;&amp;e,&#32;<emphasis role="keyword">const</emphasis>&#32;F&#32;&amp;f,&#32;<emphasis role="keyword">const</emphasis>&#32;G&#32;&amp;g)&#32;{
<anchor xml:id="_testlib_8h_source_1l05409"/>05409 &#32;&#32;&#32;&#32;__testlib_print_one(a);
<anchor xml:id="_testlib_8h_source_1l05410"/>05410 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05411"/>05411 &#32;&#32;&#32;&#32;__testlib_print_one(b);
<anchor xml:id="_testlib_8h_source_1l05412"/>05412 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05413"/>05413 &#32;&#32;&#32;&#32;__testlib_print_one(c);
<anchor xml:id="_testlib_8h_source_1l05414"/>05414 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05415"/>05415 &#32;&#32;&#32;&#32;__testlib_print_one(d);
<anchor xml:id="_testlib_8h_source_1l05416"/>05416 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05417"/>05417 &#32;&#32;&#32;&#32;__testlib_print_one(e);
<anchor xml:id="_testlib_8h_source_1l05418"/>05418 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05419"/>05419 &#32;&#32;&#32;&#32;__testlib_print_one(f);
<anchor xml:id="_testlib_8h_source_1l05420"/>05420 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05421"/>05421 &#32;&#32;&#32;&#32;__testlib_print_one(g);
<anchor xml:id="_testlib_8h_source_1l05422"/>05422 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_testlib_8h_source_1l05423"/>05423 }
<anchor xml:id="_testlib_8h_source_1l05424"/>05424 
<anchor xml:id="_testlib_8h_source_1l05425"/>05425 <emphasis role="comment">/*&#32;opts&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l05426"/>05426 
<anchor xml:id="_testlib_8h_source_1l05431"/>05431 <emphasis role="keyword">struct&#32;</emphasis>TestlibOpt&#32;{
<anchor xml:id="_testlib_8h_source_1l05432"/>05432 &#32;&#32;&#32;&#32;std::string&#32;value;
<anchor xml:id="_testlib_8h_source_1l05433"/>05433 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;used;
<anchor xml:id="_testlib_8h_source_1l05434"/>05434 
<anchor xml:id="_testlib_8h_source_1l05435"/>05435 &#32;&#32;&#32;&#32;TestlibOpt()&#32;:&#32;value(),&#32;used(false)&#32;{}
<anchor xml:id="_testlib_8h_source_1l05436"/>05436 };
<anchor xml:id="_testlib_8h_source_1l05437"/>05437 
<anchor xml:id="_testlib_8h_source_1l05451"/>05451 <emphasis role="keywordtype">size_t</emphasis>&#32;getOptType(<emphasis role="keywordtype">char</emphasis>&#32;*s)&#32;{
<anchor xml:id="_testlib_8h_source_1l05452"/>05452 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!s&#32;||&#32;strlen(s)&#32;&lt;=&#32;1)
<anchor xml:id="_testlib_8h_source_1l05453"/>05453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_testlib_8h_source_1l05454"/>05454 
<anchor xml:id="_testlib_8h_source_1l05455"/>05455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[0]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l05456"/>05456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isalpha(s[1]))
<anchor xml:id="_testlib_8h_source_1l05457"/>05457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_testlib_8h_source_1l05458"/>05458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[1]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05459"/>05459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;isalpha(s[2])&#32;?&#32;2&#32;:&#32;0;
<anchor xml:id="_testlib_8h_source_1l05460"/>05460 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05461"/>05461 
<anchor xml:id="_testlib_8h_source_1l05462"/>05462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_testlib_8h_source_1l05463"/>05463 }
<anchor xml:id="_testlib_8h_source_1l05464"/>05464 
<anchor xml:id="_testlib_8h_source_1l05494"/>05494 <emphasis role="keywordtype">size_t</emphasis>&#32;parseOpt(<emphasis role="keywordtype">size_t</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[],&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index,&#32;std::map&lt;std::string,&#32;TestlibOpt&gt;&#32;&amp;opts)&#32;{
<anchor xml:id="_testlib_8h_source_1l05495"/>05495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&gt;=&#32;argc)
<anchor xml:id="_testlib_8h_source_1l05496"/>05496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_testlib_8h_source_1l05497"/>05497 
<anchor xml:id="_testlib_8h_source_1l05498"/>05498 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;type&#32;=&#32;getOptType(argv[index]),&#32;inc&#32;=&#32;1;
<anchor xml:id="_testlib_8h_source_1l05499"/>05499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l05500"/>05500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;key(argv[index]&#32;+&#32;type),&#32;val;
<anchor xml:id="_testlib_8h_source_1l05501"/>05501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;sep&#32;=&#32;key.find(<emphasis role="charliteral">&apos;=&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05502"/>05502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sep&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="_testlib_8h_source_1l05503"/>05503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val&#32;=&#32;key.substr(sep&#32;+&#32;1);
<anchor xml:id="_testlib_8h_source_1l05504"/>05504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;key.substr(0,&#32;sep);
<anchor xml:id="_testlib_8h_source_1l05505"/>05505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l05506"/>05506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;+&#32;1&#32;&lt;&#32;argc&#32;&amp;&amp;&#32;getOptType(argv[index&#32;+&#32;1])&#32;==&#32;0)&#32;{
<anchor xml:id="_testlib_8h_source_1l05507"/>05507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val&#32;=&#32;argv[index&#32;+&#32;1];
<anchor xml:id="_testlib_8h_source_1l05508"/>05508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inc&#32;=&#32;2;
<anchor xml:id="_testlib_8h_source_1l05509"/>05509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l05510"/>05510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(key.length()&#32;&gt;&#32;1&#32;&amp;&amp;&#32;isdigit(key[1]))&#32;{
<anchor xml:id="_testlib_8h_source_1l05511"/>05511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val&#32;=&#32;key.substr(1);
<anchor xml:id="_testlib_8h_source_1l05512"/>05512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;key.substr(0,&#32;1);
<anchor xml:id="_testlib_8h_source_1l05513"/>05513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l05514"/>05514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val&#32;=&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05515"/>05515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05516"/>05516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05517"/>05517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05518"/>05518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts[key].value&#32;=&#32;val;
<anchor xml:id="_testlib_8h_source_1l05519"/>05519 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l05520"/>05520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inc;
<anchor xml:id="_testlib_8h_source_1l05521"/>05521 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05522"/>05522 
<anchor xml:id="_testlib_8h_source_1l05523"/>05523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inc;
<anchor xml:id="_testlib_8h_source_1l05524"/>05524 }
<anchor xml:id="_testlib_8h_source_1l05525"/>05525 
<anchor xml:id="_testlib_8h_source_1l05529"/>05529 std::vector&lt;std::string&gt;&#32;__testlib_argv;
<anchor xml:id="_testlib_8h_source_1l05530"/>05530 
<anchor xml:id="_testlib_8h_source_1l05534"/>05534 std::map&lt;std::string,&#32;TestlibOpt&gt;&#32;__testlib_opts;
<anchor xml:id="_testlib_8h_source_1l05535"/>05535 
<anchor xml:id="_testlib_8h_source_1l05543"/>05543 <emphasis role="keywordtype">bool</emphasis>&#32;__testlib_ensureNoUnusedOptsFlag&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05544"/>05544 
<anchor xml:id="_testlib_8h_source_1l05549"/>05549 <emphasis role="keywordtype">bool</emphasis>&#32;__testlib_ensureNoUnusedOptsSuppressed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05550"/>05550 
<anchor xml:id="_testlib_8h_source_1l05555"/>05555 <emphasis role="keywordtype">void</emphasis>&#32;prepareOpts(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[])&#32;{
<anchor xml:id="_testlib_8h_source_1l05556"/>05556 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&lt;=&#32;0)
<anchor xml:id="_testlib_8h_source_1l05557"/>05557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;argc&gt;=0&#32;but&#32;found&#32;&quot;</emphasis>&#32;+&#32;toString(argc));
<anchor xml:id="_testlib_8h_source_1l05558"/>05558 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(argc);&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-use-auto,modernize-use-auto)</emphasis>
<anchor xml:id="_testlib_8h_source_1l05559"/>05559 &#32;&#32;&#32;&#32;__testlib_opts&#32;=&#32;std::map&lt;std::string,&#32;TestlibOpt&gt;();
<anchor xml:id="_testlib_8h_source_1l05560"/>05560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;index&#32;=&#32;1;&#32;index&#32;&lt;&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;&#32;index&#32;+=&#32;parseOpt(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>,&#32;argv,&#32;index,&#32;__testlib_opts));
<anchor xml:id="_testlib_8h_source_1l05561"/>05561 &#32;&#32;&#32;&#32;__testlib_argv&#32;=&#32;std::vector&lt;std::string&gt;(<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>);
<anchor xml:id="_testlib_8h_source_1l05562"/>05562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;<link linkend="_checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;&#32;index++)
<anchor xml:id="_testlib_8h_source_1l05563"/>05563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_argv[index]&#32;=&#32;argv[index];
<anchor xml:id="_testlib_8h_source_1l05564"/>05564 }
<anchor xml:id="_testlib_8h_source_1l05565"/>05565 
<anchor xml:id="_testlib_8h_source_1l05570"/>05570 std::string&#32;__testlib_indexToArgv(<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="_testlib_8h_source_1l05571"/>05571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&lt;&#32;0&#32;||&#32;index&#32;&gt;=&#32;<emphasis role="keywordtype">int</emphasis>(__testlib_argv.size()))
<anchor xml:id="_testlib_8h_source_1l05572"/>05572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;index&#32;&apos;&quot;</emphasis>&#32;+&#32;toString(index)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;is&#32;out&#32;of&#32;range&#32;[0,&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05573"/>05573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;toString(__testlib_argv.size())&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05574"/>05574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_argv[size_t(index)];
<anchor xml:id="_testlib_8h_source_1l05575"/>05575 }
<anchor xml:id="_testlib_8h_source_1l05576"/>05576 
<anchor xml:id="_testlib_8h_source_1l05581"/>05581 std::string&#32;__testlib_keyToOpts(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05582"/>05582 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;__testlib_opts.find(key);
<anchor xml:id="_testlib_8h_source_1l05583"/>05583 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;==&#32;__testlib_opts.end())
<anchor xml:id="_testlib_8h_source_1l05584"/>05584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;unknown&#32;key&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(key)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05585"/>05585 &#32;&#32;&#32;&#32;it-&gt;second.used&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05586"/>05586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second.value;
<anchor xml:id="_testlib_8h_source_1l05587"/>05587 }
<anchor xml:id="_testlib_8h_source_1l05588"/>05588 
<anchor xml:id="_testlib_8h_source_1l05589"/>05589 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05590"/>05590 T&#32;optValueToIntegral(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;nonnegative);
<anchor xml:id="_testlib_8h_source_1l05591"/>05591 
<anchor xml:id="_testlib_8h_source_1l05592"/>05592 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;optValueToLongDouble(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s);
<anchor xml:id="_testlib_8h_source_1l05593"/>05593 
<anchor xml:id="_testlib_8h_source_1l05594"/>05594 std::string&#32;parseExponentialOptValue(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l05595"/>05595 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;std::string::npos;
<anchor xml:id="_testlib_8h_source_1l05596"/>05596 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)
<anchor xml:id="_testlib_8h_source_1l05597"/>05597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>&#32;||&#32;s[i]&#32;==&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l05598"/>05598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)
<anchor xml:id="_testlib_8h_source_1l05599"/>05599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;typical&#32;exponential&#32;notation&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05600"/>05600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;i;
<anchor xml:id="_testlib_8h_source_1l05601"/>05601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05602"/>05602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;==&#32;std::string::npos)
<anchor xml:id="_testlib_8h_source_1l05603"/>05603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
<anchor xml:id="_testlib_8h_source_1l05604"/>05604 &#32;&#32;&#32;&#32;std::string&#32;e&#32;=&#32;s.substr(pos&#32;+&#32;1);
<anchor xml:id="_testlib_8h_source_1l05605"/>05605 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!e.empty()&#32;&amp;&amp;&#32;e[0]&#32;==&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05606"/>05606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e&#32;=&#32;e.substr(1);
<anchor xml:id="_testlib_8h_source_1l05607"/>05607 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e.empty())
<anchor xml:id="_testlib_8h_source_1l05608"/>05608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;typical&#32;exponential&#32;notation&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05609"/>05609 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e.length()&#32;&gt;&#32;20)
<anchor xml:id="_testlib_8h_source_1l05610"/>05610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;typical&#32;exponential&#32;notation&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05611"/>05611 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ne&#32;=&#32;optValueToIntegral&lt;int&gt;(e,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05612"/>05612 &#32;&#32;&#32;&#32;std::string&#32;num&#32;=&#32;s.substr(0,&#32;pos);
<anchor xml:id="_testlib_8h_source_1l05613"/>05613 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num.length()&#32;&gt;&#32;20)
<anchor xml:id="_testlib_8h_source_1l05614"/>05614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;typical&#32;exponential&#32;notation&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05615"/>05615 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!num.empty()&#32;&amp;&amp;&#32;num[0]&#32;==&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05616"/>05616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num&#32;=&#32;num.substr(1);
<anchor xml:id="_testlib_8h_source_1l05617"/>05617 &#32;&#32;&#32;&#32;optValueToLongDouble(num);
<anchor xml:id="_testlib_8h_source_1l05618"/>05618 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;minus&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05619"/>05619 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num[0]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l05620"/>05620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minus&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05621"/>05621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num&#32;=&#32;num.substr(1);
<anchor xml:id="_testlib_8h_source_1l05622"/>05622 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05623"/>05623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;+ne;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l05624"/>05624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;sep&#32;=&#32;num.find(<emphasis role="charliteral">&apos;.&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05625"/>05625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sep&#32;==&#32;std::string::npos)
<anchor xml:id="_testlib_8h_source_1l05626"/>05626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num&#32;+=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05627"/>05627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l05628"/>05628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sep&#32;+&#32;1&#32;==&#32;num.length())
<anchor xml:id="_testlib_8h_source_1l05629"/>05629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num[sep]&#32;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05630"/>05630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05631"/>05631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::swap(num[sep],&#32;num[sep&#32;+&#32;1]);
<anchor xml:id="_testlib_8h_source_1l05632"/>05632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05633"/>05633 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05634"/>05634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;-ne;&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l05635"/>05635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;sep&#32;=&#32;num.find(<emphasis role="charliteral">&apos;.&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05636"/>05636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sep&#32;==&#32;std::string::npos)
<anchor xml:id="_testlib_8h_source_1l05637"/>05637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num.insert(num.begin()&#32;+&#32;<emphasis role="keywordtype">int</emphasis>(num.length())&#32;-&#32;1,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05638"/>05638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l05639"/>05639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sep&#32;==&#32;0)
<anchor xml:id="_testlib_8h_source_1l05640"/>05640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num.insert(num.begin()&#32;+&#32;1,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05641"/>05641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05642"/>05642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::swap(num[sep&#32;-&#32;1],&#32;num[sep]);
<anchor xml:id="_testlib_8h_source_1l05643"/>05643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05644"/>05644 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05645"/>05645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!num.empty()&#32;&amp;&amp;&#32;num[0]&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05646"/>05646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num&#32;=&#32;num.substr(1);
<anchor xml:id="_testlib_8h_source_1l05647"/>05647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(num.find(<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;!=&#32;std::string::npos&#32;&amp;&amp;&#32;num.back()&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05648"/>05648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num&#32;=&#32;num.substr(0,&#32;num.length()&#32;-&#32;1);
<anchor xml:id="_testlib_8h_source_1l05649"/>05649 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!num.empty()&#32;&amp;&amp;&#32;num.back()&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05650"/>05650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num&#32;=&#32;num.substr(0,&#32;num.length()&#32;-&#32;1);
<anchor xml:id="_testlib_8h_source_1l05651"/>05651 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((!num.empty()&#32;&amp;&amp;&#32;num[0]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;||&#32;num.empty())
<anchor xml:id="_testlib_8h_source_1l05652"/>05652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num.insert(num.begin(),&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05653"/>05653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(minus&#32;?&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;+&#32;num;
<anchor xml:id="_testlib_8h_source_1l05654"/>05654 }
<anchor xml:id="_testlib_8h_source_1l05655"/>05655 
<anchor xml:id="_testlib_8h_source_1l05656"/>05656 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05657"/>05657 T&#32;optValueToIntegral(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s_,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;nonnegative)&#32;{
<anchor xml:id="_testlib_8h_source_1l05658"/>05658 &#32;&#32;&#32;&#32;std::string&#32;s(parseExponentialOptValue(s_));
<anchor xml:id="_testlib_8h_source_1l05659"/>05659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s.empty())
<anchor xml:id="_testlib_8h_source_1l05660"/>05660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;integer&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s_)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05661"/>05661 &#32;&#32;&#32;&#32;T&#32;value&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l05662"/>05662 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;about&#32;=&#32;0.0;
<anchor xml:id="_testlib_8h_source_1l05663"/>05663 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;sign&#32;=&#32;+1;
<anchor xml:id="_testlib_8h_source_1l05664"/>05664 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l05665"/>05665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[pos]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l05666"/>05666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nonnegative)
<anchor xml:id="_testlib_8h_source_1l05667"/>05667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;non-negative&#32;integer&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s_)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05668"/>05668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sign&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l05669"/>05669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l05670"/>05670 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05671"/>05671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;pos;&#32;i&#32;&lt;&#32;s.length();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l05672"/>05672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;&lt;&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;s[i]&#32;&gt;&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05673"/>05673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;integer&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s_)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05674"/>05674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;T(value&#32;*&#32;10&#32;+&#32;s[i]&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05675"/>05675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;about&#32;=&#32;about&#32;*&#32;10&#32;+&#32;s[i]&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05676"/>05676 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05677"/>05677 &#32;&#32;&#32;&#32;value&#32;*=&#32;sign;
<anchor xml:id="_testlib_8h_source_1l05678"/>05678 &#32;&#32;&#32;&#32;about&#32;*=&#32;sign;
<anchor xml:id="_testlib_8h_source_1l05679"/>05679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fabsl(value&#32;-&#32;about)&#32;&gt;&#32;0.1)
<anchor xml:id="_testlib_8h_source_1l05680"/>05680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;integer&#32;overflow:&#32;expected&#32;integer&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s_)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05681"/>05681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
<anchor xml:id="_testlib_8h_source_1l05682"/>05682 }
<anchor xml:id="_testlib_8h_source_1l05683"/>05683 
<anchor xml:id="_testlib_8h_source_1l05684"/>05684 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;optValueToLongDouble(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s_)&#32;{
<anchor xml:id="_testlib_8h_source_1l05685"/>05685 &#32;&#32;&#32;&#32;std::string&#32;s(parseExponentialOptValue(s_));
<anchor xml:id="_testlib_8h_source_1l05686"/>05686 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s.empty())
<anchor xml:id="_testlib_8h_source_1l05687"/>05687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;float&#32;number&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s_)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05688"/>05688 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;value&#32;=&#32;0.0;
<anchor xml:id="_testlib_8h_source_1l05689"/>05689 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;sign&#32;=&#32;+1;
<anchor xml:id="_testlib_8h_source_1l05690"/>05690 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l05691"/>05691 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[pos]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l05692"/>05692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sign&#32;=&#32;-1;
<anchor xml:id="_testlib_8h_source_1l05693"/>05693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
<anchor xml:id="_testlib_8h_source_1l05694"/>05694 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05695"/>05695 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;period&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05696"/>05696 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;mul&#32;=&#32;1.0;
<anchor xml:id="_testlib_8h_source_1l05697"/>05697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;pos;&#32;i&#32;&lt;&#32;s.length();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l05698"/>05698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l05699"/>05699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(period)
<anchor xml:id="_testlib_8h_source_1l05700"/>05700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;float&#32;number&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s_)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05701"/>05701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l05702"/>05702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;period&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05703"/>05703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05704"/>05704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05705"/>05705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05706"/>05706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(period)
<anchor xml:id="_testlib_8h_source_1l05707"/>05707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mul&#32;*=&#32;10.0;
<anchor xml:id="_testlib_8h_source_1l05708"/>05708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;&lt;&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;s[i]&#32;&gt;&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05709"/>05709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;expected&#32;float&#32;number&#32;but&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(s_)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05710"/>05710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(period)
<anchor xml:id="_testlib_8h_source_1l05711"/>05711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;+=&#32;(s[i]&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;/&#32;mul;
<anchor xml:id="_testlib_8h_source_1l05712"/>05712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l05713"/>05713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;value&#32;*&#32;10&#32;+&#32;s[i]&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05714"/>05714 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05715"/>05715 &#32;&#32;&#32;&#32;value&#32;*=&#32;sign;
<anchor xml:id="_testlib_8h_source_1l05716"/>05716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
<anchor xml:id="_testlib_8h_source_1l05717"/>05717 }
<anchor xml:id="_testlib_8h_source_1l05718"/>05718 
<anchor xml:id="_testlib_8h_source_1l05726"/>05726 <emphasis role="keywordtype">bool</emphasis>&#32;has_opt(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05727"/>05727 &#32;&#32;&#32;&#32;__testlib_ensureNoUnusedOptsFlag&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05728"/>05728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_opts.count(key)&#32;!=&#32;0;
<anchor xml:id="_testlib_8h_source_1l05729"/>05729 }
<anchor xml:id="_testlib_8h_source_1l05730"/>05730 
<anchor xml:id="_testlib_8h_source_1l05731"/>05731 <emphasis role="comment">/*&#32;About&#32;the&#32;following&#32;part&#32;for&#32;opt&#32;with&#32;2&#32;and&#32;3&#32;arguments.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05732"/>05732 <emphasis role="comment">&#32;*&#32;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05733"/>05733 <emphasis role="comment">&#32;*&#32;To&#32;parse&#32;the&#32;argv/opts&#32;correctly&#32;for&#32;a&#32;give&#32;type&#32;(integer,&#32;floating&#32;point&#32;or</emphasis>
<anchor xml:id="_testlib_8h_source_1l05734"/>05734 <emphasis role="comment">&#32;*&#32;string),&#32;some&#32;meta&#32;programming&#32;must&#32;be&#32;done&#32;to&#32;determine&#32;the&#32;type&#32;of</emphasis>
<anchor xml:id="_testlib_8h_source_1l05735"/>05735 <emphasis role="comment">&#32;*&#32;the&#32;type,&#32;and&#32;use&#32;the&#32;correct&#32;parsing&#32;function&#32;accordingly.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05736"/>05736 <emphasis role="comment">&#32;*&#32;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05737"/>05737 <emphasis role="comment">&#32;*&#32;The&#32;pseudo&#32;algorithm&#32;for&#32;determining&#32;the&#32;type&#32;of&#32;T&#32;and&#32;parse&#32;it&#32;accordingly</emphasis>
<anchor xml:id="_testlib_8h_source_1l05738"/>05738 <emphasis role="comment">&#32;*&#32;is&#32;as&#32;follows:</emphasis>
<anchor xml:id="_testlib_8h_source_1l05739"/>05739 <emphasis role="comment">&#32;*&#32;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05740"/>05740 <emphasis role="comment">&#32;*&#32;if&#32;(T&#32;is&#32;integral&#32;type)&#32;{</emphasis>
<anchor xml:id="_testlib_8h_source_1l05741"/>05741 <emphasis role="comment">&#32;*&#32;&#32;&#32;if&#32;(T&#32;is&#32;unsigned)&#32;{</emphasis>
<anchor xml:id="_testlib_8h_source_1l05742"/>05742 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;parse&#32;the&#32;argv/opt&#32;as&#32;an&#32;**unsigned&#32;integer**&#32;of&#32;type&#32;T.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05743"/>05743 <emphasis role="comment">&#32;*&#32;&#32;&#32;}&#32;else&#32;{</emphasis>
<anchor xml:id="_testlib_8h_source_1l05744"/>05744 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;parse&#32;the&#32;argv/opt&#32;as&#32;an&#32;**signed&#32;integer**&#32;of&#32;type&#32;T.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05745"/>05745 <emphasis role="comment">&#32;*&#32;}&#32;else&#32;{</emphasis>
<anchor xml:id="_testlib_8h_source_1l05746"/>05746 <emphasis role="comment">&#32;*&#32;&#32;&#32;if&#32;(T&#32;is&#32;floating&#32;point&#32;type)&#32;{</emphasis>
<anchor xml:id="_testlib_8h_source_1l05747"/>05747 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;parse&#32;the&#32;argv/opt&#32;as&#32;an&#32;**floating&#32;point**&#32;of&#32;type&#32;T.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05748"/>05748 <emphasis role="comment">&#32;*&#32;&#32;&#32;}&#32;else&#32;{</emphasis>
<anchor xml:id="_testlib_8h_source_1l05749"/>05749 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;//&#32;T&#32;should&#32;be&#32;std::string</emphasis>
<anchor xml:id="_testlib_8h_source_1l05750"/>05750 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;just&#32;the&#32;raw&#32;content&#32;of&#32;the&#32;argv/opts.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05751"/>05751 <emphasis role="comment">&#32;*&#32;&#32;&#32;}</emphasis>
<anchor xml:id="_testlib_8h_source_1l05752"/>05752 <emphasis role="comment">&#32;*&#32;}</emphasis>
<anchor xml:id="_testlib_8h_source_1l05753"/>05753 <emphasis role="comment">&#32;*&#32;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05754"/>05754 <emphasis role="comment">&#32;*&#32;To&#32;help&#32;with&#32;meta&#32;programming,&#32;some&#32;`opt`&#32;function&#32;with&#32;2&#32;or&#32;3&#32;arguments&#32;are</emphasis>
<anchor xml:id="_testlib_8h_source_1l05755"/>05755 <emphasis role="comment">&#32;*&#32;defined.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05756"/>05756 <emphasis role="comment">&#32;*&#32;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05757"/>05757 <emphasis role="comment">&#32;*&#32;Opt&#32;with&#32;3&#32;arguments:&#32;&#32;&#32;&#32;T&#32;opt(true/false&#32;is_integral,&#32;true/false&#32;is_unsigned,&#32;index/key)</emphasis>
<anchor xml:id="_testlib_8h_source_1l05758"/>05758 <emphasis role="comment">&#32;*&#32;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05759"/>05759 <emphasis role="comment">&#32;*&#32;&#32;&#32;+&#32;The&#32;first&#32;argument&#32;is&#32;for&#32;determining&#32;whether&#32;the&#32;type&#32;T&#32;is&#32;an&#32;integral</emphasis>
<anchor xml:id="_testlib_8h_source_1l05760"/>05760 <emphasis role="comment">&#32;*&#32;&#32;&#32;type.&#32;That&#32;is,&#32;the&#32;result&#32;of&#32;std::is_integral&lt;T&gt;()&#32;should&#32;be&#32;passed&#32;to</emphasis>
<anchor xml:id="_testlib_8h_source_1l05761"/>05761 <emphasis role="comment">&#32;*&#32;&#32;&#32;this&#32;argument.&#32;When&#32;false,&#32;the&#32;type&#32;_should_&#32;be&#32;either&#32;floating&#32;point&#32;or&#32;a</emphasis>
<anchor xml:id="_testlib_8h_source_1l05762"/>05762 <emphasis role="comment">&#32;*&#32;&#32;&#32;std::string.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05763"/>05763 <emphasis role="comment">&#32;*&#32;&#32;&#32;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05764"/>05764 <emphasis role="comment">&#32;*&#32;&#32;&#32;+&#32;The&#32;second&#32;argument&#32;is&#32;for&#32;determining&#32;whether&#32;the&#32;signedness&#32;of&#32;the&#32;type</emphasis>
<anchor xml:id="_testlib_8h_source_1l05765"/>05765 <emphasis role="comment">&#32;*&#32;&#32;&#32;T&#32;(if&#32;it&#32;is&#32;unsigned&#32;or&#32;signed).&#32;That&#32;is,&#32;the&#32;result&#32;of</emphasis>
<anchor xml:id="_testlib_8h_source_1l05766"/>05766 <emphasis role="comment">&#32;*&#32;&#32;&#32;std::is_unsigned&lt;T&gt;()&#32;should&#32;be&#32;passed&#32;to&#32;this&#32;argument.&#32;This&#32;argument&#32;can</emphasis>
<anchor xml:id="_testlib_8h_source_1l05767"/>05767 <emphasis role="comment">&#32;*&#32;&#32;&#32;be&#32;ignored&#32;if&#32;the&#32;first&#32;one&#32;is&#32;false,&#32;because&#32;it&#32;only&#32;applies&#32;to&#32;integer.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05768"/>05768 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_testlib_8h_source_1l05769"/>05769 <emphasis role="comment">&#32;*&#32;Opt&#32;with&#32;2&#32;arguments:&#32;&#32;&#32;&#32;T&#32;opt(true/false&#32;is_floating_point,&#32;index/key)</emphasis>
<anchor xml:id="_testlib_8h_source_1l05770"/>05770 <emphasis role="comment">&#32;*&#32;&#32;&#32;+&#32;The&#32;first&#32;argument&#32;is&#32;for&#32;determining&#32;whether&#32;the&#32;type&#32;T&#32;is&#32;a&#32;floating</emphasis>
<anchor xml:id="_testlib_8h_source_1l05771"/>05771 <emphasis role="comment">&#32;*&#32;&#32;&#32;point&#32;type.&#32;That&#32;is,&#32;the&#32;result&#32;of&#32;std::is_floating_point&lt;T&gt;()&#32;should&#32;be</emphasis>
<anchor xml:id="_testlib_8h_source_1l05772"/>05772 <emphasis role="comment">&#32;*&#32;&#32;&#32;passed&#32;to&#32;this&#32;argument.&#32;When&#32;false,&#32;the&#32;type&#32;_should_&#32;be&#32;a&#32;std::string.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05773"/>05773 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l05774"/>05774 
<anchor xml:id="_testlib_8h_source_1l05775"/>05775 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05776"/>05776 T&#32;opt(std::false_type&#32;is_floating_point,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index);
<anchor xml:id="_testlib_8h_source_1l05777"/>05777 
<anchor xml:id="_testlib_8h_source_1l05778"/>05778 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05779"/>05779 std::string&#32;opt(std::false_type&#32;<emphasis role="comment">/*is_floating_point*/</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="_testlib_8h_source_1l05780"/>05780 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_indexToArgv(index);
<anchor xml:id="_testlib_8h_source_1l05781"/>05781 }
<anchor xml:id="_testlib_8h_source_1l05782"/>05782 
<anchor xml:id="_testlib_8h_source_1l05783"/>05783 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05784"/>05784 T&#32;opt(std::true_type&#32;<emphasis role="comment">/*is_floating_point*/</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="_testlib_8h_source_1l05785"/>05785 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T(optValueToLongDouble(__testlib_indexToArgv(index)));
<anchor xml:id="_testlib_8h_source_1l05786"/>05786 }
<anchor xml:id="_testlib_8h_source_1l05787"/>05787 
<anchor xml:id="_testlib_8h_source_1l05788"/>05788 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
<anchor xml:id="_testlib_8h_source_1l05789"/>05789 T&#32;opt(std::false_type&#32;<emphasis role="comment">/*is_integral*/</emphasis>,&#32;U&#32;<emphasis role="comment">/*is_unsigned*/</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="_testlib_8h_source_1l05790"/>05790 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;T&gt;(std::is_floating_point&lt;T&gt;(),&#32;index);
<anchor xml:id="_testlib_8h_source_1l05791"/>05791 }
<anchor xml:id="_testlib_8h_source_1l05792"/>05792 
<anchor xml:id="_testlib_8h_source_1l05793"/>05793 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05794"/>05794 T&#32;opt(std::true_type&#32;<emphasis role="comment">/*is_integral*/</emphasis>,&#32;std::false_type&#32;<emphasis role="comment">/*is_unsigned*/</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="_testlib_8h_source_1l05795"/>05795 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;optValueToIntegral&lt;T&gt;(__testlib_indexToArgv(index),&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05796"/>05796 }
<anchor xml:id="_testlib_8h_source_1l05797"/>05797 
<anchor xml:id="_testlib_8h_source_1l05798"/>05798 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05799"/>05799 T&#32;opt(std::true_type&#32;<emphasis role="comment">/*is_integral*/</emphasis>,&#32;std::true_type&#32;<emphasis role="comment">/*is_unsigned*/</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="_testlib_8h_source_1l05800"/>05800 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;optValueToIntegral&lt;T&gt;(__testlib_indexToArgv(index),&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05801"/>05801 }
<anchor xml:id="_testlib_8h_source_1l05802"/>05802 
<anchor xml:id="_testlib_8h_source_1l05803"/>05803 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05804"/>05804 <emphasis role="keywordtype">bool</emphasis>&#32;opt(std::true_type&#32;<emphasis role="comment">/*is_integral*/</emphasis>,&#32;std::true_type&#32;<emphasis role="comment">/*is_unsigned*/</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="_testlib_8h_source_1l05805"/>05805 &#32;&#32;&#32;&#32;std::string&#32;value&#32;=&#32;__testlib_indexToArgv(index);
<anchor xml:id="_testlib_8h_source_1l05806"/>05806 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>&#32;||&#32;value&#32;==&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05807"/>05807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05808"/>05808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>&#32;||&#32;value&#32;==&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05809"/>05809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05810"/>05810 &#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;opt&#32;by&#32;index&#32;&apos;&quot;</emphasis>&#32;+&#32;toString(index)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;:&#32;expected&#32;bool&#32;true/false&#32;or&#32;0/1&#32;but&#32;&apos;&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05811"/>05811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(value)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05812"/>05812 }
<anchor xml:id="_testlib_8h_source_1l05813"/>05813 
<anchor xml:id="_testlib_8h_source_1l05817"/>05817 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05818"/>05818 T&#32;opt(<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="_testlib_8h_source_1l05819"/>05819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;T&gt;(std::is_integral&lt;T&gt;(),&#32;std::is_unsigned&lt;T&gt;(),&#32;index);
<anchor xml:id="_testlib_8h_source_1l05820"/>05820 }
<anchor xml:id="_testlib_8h_source_1l05821"/>05821 
<anchor xml:id="_testlib_8h_source_1l05825"/>05825 std::string&#32;opt(<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="_testlib_8h_source_1l05826"/>05826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;std::string&gt;(index);
<anchor xml:id="_testlib_8h_source_1l05827"/>05827 }
<anchor xml:id="_testlib_8h_source_1l05828"/>05828 
<anchor xml:id="_testlib_8h_source_1l05833"/>05833 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05834"/>05834 T&#32;opt(<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;default_value)&#32;{
<anchor xml:id="_testlib_8h_source_1l05835"/>05835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&gt;=&#32;<emphasis role="keywordtype">int</emphasis>(__testlib_argv.size()))&#32;{
<anchor xml:id="_testlib_8h_source_1l05836"/>05836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;default_value;
<anchor xml:id="_testlib_8h_source_1l05837"/>05837 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05838"/>05838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;T&gt;(index);
<anchor xml:id="_testlib_8h_source_1l05839"/>05839 }
<anchor xml:id="_testlib_8h_source_1l05840"/>05840 
<anchor xml:id="_testlib_8h_source_1l05845"/>05845 std::string&#32;opt(<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;default_value)&#32;{
<anchor xml:id="_testlib_8h_source_1l05846"/>05846 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;std::string&gt;(index,&#32;default_value);
<anchor xml:id="_testlib_8h_source_1l05847"/>05847 }
<anchor xml:id="_testlib_8h_source_1l05848"/>05848 
<anchor xml:id="_testlib_8h_source_1l05849"/>05849 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05850"/>05850 T&#32;opt(std::false_type&#32;is_floating_point,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key);
<anchor xml:id="_testlib_8h_source_1l05851"/>05851 
<anchor xml:id="_testlib_8h_source_1l05852"/>05852 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05853"/>05853 std::string&#32;opt(std::false_type&#32;<emphasis role="comment">/*is_floating_point*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05854"/>05854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testlib_keyToOpts(key);
<anchor xml:id="_testlib_8h_source_1l05855"/>05855 }
<anchor xml:id="_testlib_8h_source_1l05856"/>05856 
<anchor xml:id="_testlib_8h_source_1l05857"/>05857 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05858"/>05858 T&#32;opt(std::true_type&#32;<emphasis role="comment">/*is_integral*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05859"/>05859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T(optValueToLongDouble(__testlib_keyToOpts(key)));
<anchor xml:id="_testlib_8h_source_1l05860"/>05860 }
<anchor xml:id="_testlib_8h_source_1l05861"/>05861 
<anchor xml:id="_testlib_8h_source_1l05862"/>05862 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
<anchor xml:id="_testlib_8h_source_1l05863"/>05863 T&#32;opt(std::false_type&#32;<emphasis role="comment">/*is_integral*/</emphasis>,&#32;U,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05864"/>05864 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;T&gt;(std::is_floating_point&lt;T&gt;(),&#32;key);
<anchor xml:id="_testlib_8h_source_1l05865"/>05865 }
<anchor xml:id="_testlib_8h_source_1l05866"/>05866 
<anchor xml:id="_testlib_8h_source_1l05867"/>05867 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05868"/>05868 T&#32;opt(std::true_type&#32;<emphasis role="comment">/*is_integral*/</emphasis>,&#32;std::false_type&#32;<emphasis role="comment">/*is_unsigned*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05869"/>05869 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;optValueToIntegral&lt;T&gt;(__testlib_keyToOpts(key),&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05870"/>05870 }
<anchor xml:id="_testlib_8h_source_1l05871"/>05871 
<anchor xml:id="_testlib_8h_source_1l05872"/>05872 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05873"/>05873 T&#32;opt(std::true_type&#32;<emphasis role="comment">/*is_integral*/</emphasis>,&#32;std::true_type&#32;<emphasis role="comment">/*is_unsigned*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05874"/>05874 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;optValueToIntegral&lt;T&gt;(__testlib_keyToOpts(key),&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05875"/>05875 }
<anchor xml:id="_testlib_8h_source_1l05876"/>05876 
<anchor xml:id="_testlib_8h_source_1l05877"/>05877 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_testlib_8h_source_1l05878"/>05878 <emphasis role="keywordtype">bool</emphasis>&#32;opt(std::true_type&#32;<emphasis role="comment">/*is_integral*/</emphasis>,&#32;std::true_type&#32;<emphasis role="comment">/*is_unsigned*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05879"/>05879 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!has_opt(key))
<anchor xml:id="_testlib_8h_source_1l05880"/>05880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05881"/>05881 &#32;&#32;&#32;&#32;std::string&#32;value&#32;=&#32;__testlib_keyToOpts(key);
<anchor xml:id="_testlib_8h_source_1l05882"/>05882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>&#32;||&#32;value&#32;==&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05883"/>05883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05884"/>05884 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>&#32;||&#32;value&#32;==&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05885"/>05885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05886"/>05886 &#32;&#32;&#32;&#32;__testlib_fail(<emphasis role="stringliteral">&quot;Opts:&#32;key&#32;&apos;&quot;</emphasis>&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(key)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;:&#32;expected&#32;bool&#32;true/false&#32;or&#32;0/1&#32;but&#32;&apos;&quot;</emphasis>
<anchor xml:id="_testlib_8h_source_1l05887"/>05887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(value)&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;found&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05888"/>05888 }
<anchor xml:id="_testlib_8h_source_1l05889"/>05889 
<anchor xml:id="_testlib_8h_source_1l05893"/>05893 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l05894"/>05894 T&#32;opt(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05895"/>05895 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;T&gt;(std::is_integral&lt;T&gt;(),&#32;std::is_unsigned&lt;T&gt;(),&#32;key);
<anchor xml:id="_testlib_8h_source_1l05896"/>05896 }
<anchor xml:id="_testlib_8h_source_1l05897"/>05897 
<anchor xml:id="_testlib_8h_source_1l05901"/>05901 std::string&#32;opt(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key)&#32;{
<anchor xml:id="_testlib_8h_source_1l05902"/>05902 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;std::string&gt;(key);
<anchor xml:id="_testlib_8h_source_1l05903"/>05903 }
<anchor xml:id="_testlib_8h_source_1l05904"/>05904 
<anchor xml:id="_testlib_8h_source_1l05905"/>05905 <emphasis role="comment">/*&#32;Scorer&#32;started.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l05906"/>05906 
<anchor xml:id="_testlib_8h_source_1l05907"/>05907 <emphasis role="keyword">enum</emphasis>&#32;TestResultVerdict&#32;{
<anchor xml:id="_testlib_8h_source_1l05908"/>05908 &#32;&#32;&#32;&#32;SKIPPED,
<anchor xml:id="_testlib_8h_source_1l05909"/>05909 &#32;&#32;&#32;&#32;OK,
<anchor xml:id="_testlib_8h_source_1l05910"/>05910 &#32;&#32;&#32;&#32;WRONG_ANSWER,
<anchor xml:id="_testlib_8h_source_1l05911"/>05911 &#32;&#32;&#32;&#32;RUNTIME_ERROR,
<anchor xml:id="_testlib_8h_source_1l05912"/>05912 &#32;&#32;&#32;&#32;TIME_LIMIT_EXCEEDED,
<anchor xml:id="_testlib_8h_source_1l05913"/>05913 &#32;&#32;&#32;&#32;IDLENESS_LIMIT_EXCEEDED,
<anchor xml:id="_testlib_8h_source_1l05914"/>05914 &#32;&#32;&#32;&#32;MEMORY_LIMIT_EXCEEDED,
<anchor xml:id="_testlib_8h_source_1l05915"/>05915 &#32;&#32;&#32;&#32;COMPILATION_ERROR,
<anchor xml:id="_testlib_8h_source_1l05916"/>05916 &#32;&#32;&#32;&#32;CRASHED,
<anchor xml:id="_testlib_8h_source_1l05917"/>05917 &#32;&#32;&#32;&#32;FAILED
<anchor xml:id="_testlib_8h_source_1l05918"/>05918 };
<anchor xml:id="_testlib_8h_source_1l05919"/>05919 
<anchor xml:id="_testlib_8h_source_1l05920"/>05920 std::string&#32;serializeVerdict(TestResultVerdict&#32;verdict)&#32;{
<anchor xml:id="_testlib_8h_source_1l05921"/>05921 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(verdict)&#32;{
<anchor xml:id="_testlib_8h_source_1l05922"/>05922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SKIPPED:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;SKIPPED&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05923"/>05923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;OK:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;OK&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05924"/>05924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;WRONG_ANSWER:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WRONG_ANSWER&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05925"/>05925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;RUNTIME_ERROR:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;RUNTIME_ERROR&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05926"/>05926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TIME_LIMIT_EXCEEDED:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;TIME_LIMIT_EXCEEDED&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05927"/>05927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IDLENESS_LIMIT_EXCEEDED:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;IDLENESS_LIMIT_EXCEEDED&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05928"/>05928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;MEMORY_LIMIT_EXCEEDED:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;MEMORY_LIMIT_EXCEEDED&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05929"/>05929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;COMPILATION_ERROR:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;COMPILATION_ERROR&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05930"/>05930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CRASHED:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CRASHED&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05931"/>05931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;FAILED:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;FAILED&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05932"/>05932 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05933"/>05933 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;verdict&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05934"/>05934 }
<anchor xml:id="_testlib_8h_source_1l05935"/>05935 
<anchor xml:id="_testlib_8h_source_1l05936"/>05936 TestResultVerdict&#32;deserializeTestResultVerdict(std::string&#32;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l05937"/>05937 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;SKIPPED&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05938"/>05938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SKIPPED;
<anchor xml:id="_testlib_8h_source_1l05939"/>05939 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;OK&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05940"/>05940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;OK;
<anchor xml:id="_testlib_8h_source_1l05941"/>05941 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;WRONG_ANSWER&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05942"/>05942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;WRONG_ANSWER;
<anchor xml:id="_testlib_8h_source_1l05943"/>05943 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;RUNTIME_ERROR&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05944"/>05944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RUNTIME_ERROR;
<anchor xml:id="_testlib_8h_source_1l05945"/>05945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;TIME_LIMIT_EXCEEDED&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05946"/>05946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TIME_LIMIT_EXCEEDED;
<anchor xml:id="_testlib_8h_source_1l05947"/>05947 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;IDLENESS_LIMIT_EXCEEDED&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05948"/>05948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IDLENESS_LIMIT_EXCEEDED;
<anchor xml:id="_testlib_8h_source_1l05949"/>05949 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;MEMORY_LIMIT_EXCEEDED&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05950"/>05950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MEMORY_LIMIT_EXCEEDED;
<anchor xml:id="_testlib_8h_source_1l05951"/>05951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;COMPILATION_ERROR&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05952"/>05952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;COMPILATION_ERROR;
<anchor xml:id="_testlib_8h_source_1l05953"/>05953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;CRASHED&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05954"/>05954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CRASHED;
<anchor xml:id="_testlib_8h_source_1l05955"/>05955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;<emphasis role="stringliteral">&quot;FAILED&quot;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l05956"/>05956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FAILED;
<anchor xml:id="_testlib_8h_source_1l05957"/>05957 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc">ensuref</link>(<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;serialized&#32;TestResultVerdict&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05958"/>05958 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;return&#32;actually.</emphasis>
<anchor xml:id="_testlib_8h_source_1l05959"/>05959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FAILED;
<anchor xml:id="_testlib_8h_source_1l05960"/>05960 }
<anchor xml:id="_testlib_8h_source_1l05961"/>05961 
<anchor xml:id="_testlib_8h_source_1l05962"/>05962 <emphasis role="keyword">struct&#32;</emphasis>TestResult&#32;{
<anchor xml:id="_testlib_8h_source_1l05963"/>05963 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;testIndex;
<anchor xml:id="_testlib_8h_source_1l05964"/>05964 &#32;&#32;&#32;&#32;std::string&#32;testset;
<anchor xml:id="_testlib_8h_source_1l05965"/>05965 &#32;&#32;&#32;&#32;std::string&#32;group;
<anchor xml:id="_testlib_8h_source_1l05966"/>05966 &#32;&#32;&#32;&#32;TestResultVerdict&#32;verdict;
<anchor xml:id="_testlib_8h_source_1l05967"/>05967 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;points;
<anchor xml:id="_testlib_8h_source_1l05968"/>05968 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;timeConsumed;
<anchor xml:id="_testlib_8h_source_1l05969"/>05969 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;memoryConsumed;
<anchor xml:id="_testlib_8h_source_1l05970"/>05970 &#32;&#32;&#32;&#32;std::string&#32;input;
<anchor xml:id="_testlib_8h_source_1l05971"/>05971 &#32;&#32;&#32;&#32;std::string&#32;output;
<anchor xml:id="_testlib_8h_source_1l05972"/>05972 &#32;&#32;&#32;&#32;std::string&#32;answer;
<anchor xml:id="_testlib_8h_source_1l05973"/>05973 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;exitCode;
<anchor xml:id="_testlib_8h_source_1l05974"/>05974 &#32;&#32;&#32;&#32;std::string&#32;checkerComment;
<anchor xml:id="_testlib_8h_source_1l05975"/>05975 };
<anchor xml:id="_testlib_8h_source_1l05976"/>05976 
<anchor xml:id="_testlib_8h_source_1l05977"/>05977 std::string&#32;serializePoints(<emphasis role="keywordtype">double</emphasis>&#32;points)&#32;{
<anchor xml:id="_testlib_8h_source_1l05978"/>05978 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::isnan(points))
<anchor xml:id="_testlib_8h_source_1l05979"/>05979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l05980"/>05980 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l05981"/>05981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c[64];
<anchor xml:id="_testlib_8h_source_1l05982"/>05982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;snprintf(c,&#32;64,&#32;<emphasis role="stringliteral">&quot;%.03lf&quot;</emphasis>,&#32;points);
<anchor xml:id="_testlib_8h_source_1l05983"/>05983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="_testlib_8h_source_1l05984"/>05984 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l05985"/>05985 }
<anchor xml:id="_testlib_8h_source_1l05986"/>05986 
<anchor xml:id="_testlib_8h_source_1l05987"/>05987 <emphasis role="keywordtype">double</emphasis>&#32;deserializePoints(std::string&#32;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l05988"/>05988 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s.empty())
<anchor xml:id="_testlib_8h_source_1l05989"/>05989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;double&gt;::quiet_NaN();
<anchor xml:id="_testlib_8h_source_1l05990"/>05990 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l05991"/>05991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l05992"/>05992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc">ensuref</link>(sscanf(s.c_str(),&#32;<emphasis role="stringliteral">&quot;%lf&quot;</emphasis>,&#32;&amp;result)&#32;==&#32;1,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;serialized&#32;points&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l05993"/>05993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l05994"/>05994 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_testlib_8h_source_1l05995"/>05995 }
<anchor xml:id="_testlib_8h_source_1l05996"/>05996 
<anchor xml:id="_testlib_8h_source_1l05997"/>05997 std::string&#32;escapeTestResultString(std::string&#32;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l05998"/>05998 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_testlib_8h_source_1l05999"/>05999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l06000"/>06000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l06001"/>06001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06002"/>06002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l06003"/>06003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;\\n&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06004"/>06004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06005"/>06005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06006"/>06006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>&#32;||&#32;s[i]&#32;==&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>)
<anchor xml:id="_testlib_8h_source_1l06007"/>06007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06008"/>06008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l06009"/>06009 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06010"/>06010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l06011"/>06011 }
<anchor xml:id="_testlib_8h_source_1l06012"/>06012 
<anchor xml:id="_testlib_8h_source_1l06013"/>06013 std::string&#32;unescapeTestResultString(std::string&#32;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l06014"/>06014 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_testlib_8h_source_1l06015"/>06015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l06016"/>06016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>&#32;&amp;&amp;&#32;i&#32;+&#32;1&#32;&lt;&#32;s.length())&#32;{
<anchor xml:id="_testlib_8h_source_1l06017"/>06017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i&#32;+&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l06018"/>06018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06019"/>06019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="_testlib_8h_source_1l06020"/>06020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06021"/>06021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i&#32;+&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>&#32;||&#32;s[i&#32;+&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l06022"/>06022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;s[i&#32;+&#32;1];
<anchor xml:id="_testlib_8h_source_1l06023"/>06023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="_testlib_8h_source_1l06024"/>06024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06025"/>06025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06026"/>06026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06027"/>06027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l06028"/>06028 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06029"/>06029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l06030"/>06030 }
<anchor xml:id="_testlib_8h_source_1l06031"/>06031 
<anchor xml:id="_testlib_8h_source_1l06032"/>06032 std::string&#32;serializeTestResult(TestResult&#32;tr)&#32;{
<anchor xml:id="_testlib_8h_source_1l06033"/>06033 &#32;&#32;&#32;&#32;std::string&#32;result;
<anchor xml:id="_testlib_8h_source_1l06034"/>06034 &#32;&#32;&#32;&#32;result&#32;+=&#32;std::to_string(tr.testIndex);
<anchor xml:id="_testlib_8h_source_1l06035"/>06035 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06036"/>06036 &#32;&#32;&#32;&#32;result&#32;+=&#32;escapeTestResultString(tr.testset);
<anchor xml:id="_testlib_8h_source_1l06037"/>06037 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06038"/>06038 &#32;&#32;&#32;&#32;result&#32;+=&#32;escapeTestResultString(tr.group);
<anchor xml:id="_testlib_8h_source_1l06039"/>06039 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06040"/>06040 &#32;&#32;&#32;&#32;result&#32;+=&#32;serializeVerdict(tr.verdict);
<anchor xml:id="_testlib_8h_source_1l06041"/>06041 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06042"/>06042 &#32;&#32;&#32;&#32;result&#32;+=&#32;serializePoints(tr.points);
<anchor xml:id="_testlib_8h_source_1l06043"/>06043 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06044"/>06044 &#32;&#32;&#32;&#32;result&#32;+=&#32;std::to_string(tr.timeConsumed);
<anchor xml:id="_testlib_8h_source_1l06045"/>06045 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06046"/>06046 &#32;&#32;&#32;&#32;result&#32;+=&#32;std::to_string(tr.memoryConsumed);
<anchor xml:id="_testlib_8h_source_1l06047"/>06047 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06048"/>06048 &#32;&#32;&#32;&#32;result&#32;+=&#32;escapeTestResultString(tr.input);
<anchor xml:id="_testlib_8h_source_1l06049"/>06049 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06050"/>06050 &#32;&#32;&#32;&#32;result&#32;+=&#32;escapeTestResultString(tr.output);
<anchor xml:id="_testlib_8h_source_1l06051"/>06051 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06052"/>06052 &#32;&#32;&#32;&#32;result&#32;+=&#32;escapeTestResultString(tr.answer);
<anchor xml:id="_testlib_8h_source_1l06053"/>06053 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06054"/>06054 &#32;&#32;&#32;&#32;result&#32;+=&#32;std::to_string(tr.exitCode);
<anchor xml:id="_testlib_8h_source_1l06055"/>06055 &#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06056"/>06056 &#32;&#32;&#32;&#32;result&#32;+=&#32;escapeTestResultString(tr.checkerComment);
<anchor xml:id="_testlib_8h_source_1l06057"/>06057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l06058"/>06058 }
<anchor xml:id="_testlib_8h_source_1l06059"/>06059 
<anchor xml:id="_testlib_8h_source_1l06060"/>06060 TestResult&#32;deserializeTestResult(std::string&#32;s)&#32;{
<anchor xml:id="_testlib_8h_source_1l06061"/>06061 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;items;
<anchor xml:id="_testlib_8h_source_1l06062"/>06062 &#32;&#32;&#32;&#32;std::string&#32;t;
<anchor xml:id="_testlib_8h_source_1l06063"/>06063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.length();&#32;i++)&#32;{
<anchor xml:id="_testlib_8h_source_1l06064"/>06064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l06065"/>06065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l06066"/>06066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;&lt;&#32;s.length())
<anchor xml:id="_testlib_8h_source_1l06067"/>06067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;+=&#32;s[i&#32;+&#32;1];
<anchor xml:id="_testlib_8h_source_1l06068"/>06068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="_testlib_8h_source_1l06069"/>06069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06070"/>06070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_testlib_8h_source_1l06071"/>06071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[i]&#32;==&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>)&#32;{
<anchor xml:id="_testlib_8h_source_1l06072"/>06072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;items.push_back(t);
<anchor xml:id="_testlib_8h_source_1l06073"/>06073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06074"/>06074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_testlib_8h_source_1l06075"/>06075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;+=&#32;s[i];
<anchor xml:id="_testlib_8h_source_1l06076"/>06076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06077"/>06077 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06078"/>06078 &#32;&#32;&#32;&#32;items.push_back(t);
<anchor xml:id="_testlib_8h_source_1l06079"/>06079 
<anchor xml:id="_testlib_8h_source_1l06080"/>06080 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc">ensuref</link>(items.size()&#32;==&#32;12,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;TestResult&#32;serialization:&#32;expected&#32;exactly&#32;12&#32;items&quot;</emphasis>);
<anchor xml:id="_testlib_8h_source_1l06081"/>06081 &#32;&#32;&#32;&#32;
<anchor xml:id="_testlib_8h_source_1l06082"/>06082 &#32;&#32;&#32;&#32;TestResult&#32;tr;
<anchor xml:id="_testlib_8h_source_1l06083"/>06083 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;0;
<anchor xml:id="_testlib_8h_source_1l06084"/>06084 &#32;&#32;&#32;&#32;tr.testIndex&#32;=&#32;stoi(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06085"/>06085 &#32;&#32;&#32;&#32;tr.testset&#32;=&#32;unescapeTestResultString(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06086"/>06086 &#32;&#32;&#32;&#32;tr.group&#32;=&#32;unescapeTestResultString(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06087"/>06087 &#32;&#32;&#32;&#32;tr.verdict&#32;=&#32;deserializeTestResultVerdict(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06088"/>06088 &#32;&#32;&#32;&#32;tr.points&#32;=&#32;deserializePoints(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06089"/>06089 &#32;&#32;&#32;&#32;tr.timeConsumed&#32;=&#32;stoll(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06090"/>06090 &#32;&#32;&#32;&#32;tr.memoryConsumed&#32;=&#32;stoll(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06091"/>06091 &#32;&#32;&#32;&#32;tr.input&#32;=&#32;unescapeTestResultString(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06092"/>06092 &#32;&#32;&#32;&#32;tr.output&#32;=&#32;unescapeTestResultString(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06093"/>06093 &#32;&#32;&#32;&#32;tr.answer&#32;=&#32;unescapeTestResultString(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06094"/>06094 &#32;&#32;&#32;&#32;tr.exitCode&#32;=&#32;stoi(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06095"/>06095 &#32;&#32;&#32;&#32;tr.checkerComment&#32;=&#32;unescapeTestResultString(items[pos++]);
<anchor xml:id="_testlib_8h_source_1l06096"/>06096 &#32;&#32;&#32;&#32;
<anchor xml:id="_testlib_8h_source_1l06097"/>06097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tr;
<anchor xml:id="_testlib_8h_source_1l06098"/>06098 }
<anchor xml:id="_testlib_8h_source_1l06099"/>06099 
<anchor xml:id="_testlib_8h_source_1l06100"/>06100 std::vector&lt;TestResult&gt;&#32;readTestResults(std::string&#32;fileName)&#32;{
<anchor xml:id="_testlib_8h_source_1l06101"/>06101 &#32;&#32;&#32;&#32;std::ifstream&#32;stream;
<anchor xml:id="_testlib_8h_source_1l06102"/>06102 &#32;&#32;&#32;&#32;stream.open(fileName.c_str(),&#32;std::ios::in);
<anchor xml:id="_testlib_8h_source_1l06103"/>06103 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc">ensuref</link>(stream.is_open(),&#32;<emphasis role="stringliteral">&quot;Can&apos;t&#32;read&#32;test&#32;results&#32;file&#32;&apos;%s&apos;&quot;</emphasis>,&#32;fileName.c_str());
<anchor xml:id="_testlib_8h_source_1l06104"/>06104 &#32;&#32;&#32;&#32;std::vector&lt;TestResult&gt;&#32;result;
<anchor xml:id="_testlib_8h_source_1l06105"/>06105 &#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="_testlib_8h_source_1l06106"/>06106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(getline(stream,&#32;line))
<anchor xml:id="_testlib_8h_source_1l06107"/>06107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!line.empty())
<anchor xml:id="_testlib_8h_source_1l06108"/>06108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.push_back(deserializeTestResult(line));
<anchor xml:id="_testlib_8h_source_1l06109"/>06109 &#32;&#32;&#32;&#32;stream.close();
<anchor xml:id="_testlib_8h_source_1l06110"/>06110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_testlib_8h_source_1l06111"/>06111 }
<anchor xml:id="_testlib_8h_source_1l06112"/>06112 
<anchor xml:id="_testlib_8h_source_1l06113"/>06113 std::function&lt;double(std::vector&lt;TestResult&gt;)&gt;&#32;__testlib_scorer;
<anchor xml:id="_testlib_8h_source_1l06114"/>06114 
<anchor xml:id="_testlib_8h_source_1l06115"/>06115 <emphasis role="keyword">struct&#32;</emphasis>TestlibScorerGuard&#32;{
<anchor xml:id="_testlib_8h_source_1l06116"/>06116 &#32;&#32;&#32;&#32;~TestlibScorerGuard()&#32;{
<anchor xml:id="_testlib_8h_source_1l06117"/>06117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;==&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa">_scorer</link>)&#32;{
<anchor xml:id="_testlib_8h_source_1l06118"/>06118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;TestResult&gt;&#32;testResults;
<anchor xml:id="_testlib_8h_source_1l06119"/>06119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4">eof</link>())&#32;{
<anchor xml:id="_testlib_8h_source_1l06120"/>06120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;line&#32;=&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683">readLine</link>();
<anchor xml:id="_testlib_8h_source_1l06121"/>06121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!line.empty())
<anchor xml:id="_testlib_8h_source_1l06122"/>06122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testResults.push_back(deserializeTestResult(line));
<anchor xml:id="_testlib_8h_source_1l06123"/>06123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06124"/>06124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a80e53f1d7a022f34f8d88839de43d6b5">readEof</link>();
<anchor xml:id="_testlib_8h_source_1l06125"/>06125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%.3f\n&quot;</emphasis>,&#32;__testlib_scorer(testResults));
<anchor xml:id="_testlib_8h_source_1l06126"/>06126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06127"/>06127 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06128"/>06128 }&#32;__testlib_scorer_guard;
<anchor xml:id="_testlib_8h_source_1l06129"/>06129 
<anchor xml:id="_testlib_8h_source_1l06130"/>06130 <emphasis role="keywordtype">void</emphasis>&#32;registerScorer(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[],&#32;std::function&lt;<emphasis role="keywordtype">double</emphasis>(std::vector&lt;TestResult&gt;)&gt;&#32;scorer)&#32;{
<anchor xml:id="_testlib_8h_source_1l06131"/>06131 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Suppress&#32;unused.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l06132"/>06132 &#32;&#32;&#32;&#32;(void)(argc),&#32;(void)(argv);
<anchor xml:id="_testlib_8h_source_1l06133"/>06133 
<anchor xml:id="_testlib_8h_source_1l06134"/>06134 &#32;&#32;&#32;&#32;__testlib_ensuresPreconditions();
<anchor xml:id="_testlib_8h_source_1l06135"/>06135 
<anchor xml:id="_testlib_8h_source_1l06136"/>06136 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf">testlibMode</link>&#32;=&#32;<link linkend="_testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa">_scorer</link>;
<anchor xml:id="_testlib_8h_source_1l06137"/>06137 &#32;&#32;&#32;&#32;__testlib_set_binary(stdin);
<anchor xml:id="_testlib_8h_source_1l06138"/>06138 
<anchor xml:id="_testlib_8h_source_1l06139"/>06139 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a249983cd8365347d249485c7840e3424">init</link>(stdin,&#32;<link linkend="_testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a">_input</link>);
<anchor xml:id="_testlib_8h_source_1l06140"/>06140 &#32;&#32;&#32;&#32;<link linkend="_testlib_8h_1ad3874376581d36b1067d501d534d7b34">inf</link>.<link linkend="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c">strict</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06141"/>06141 
<anchor xml:id="_testlib_8h_source_1l06142"/>06142 &#32;&#32;&#32;&#32;__testlib_scorer&#32;=&#32;scorer;
<anchor xml:id="_testlib_8h_source_1l06143"/>06143 }
<anchor xml:id="_testlib_8h_source_1l06144"/>06144 
<anchor xml:id="_testlib_8h_source_1l06145"/>06145 <emphasis role="comment">/*&#32;Scorer&#32;ended.&#32;*/</emphasis>
<anchor xml:id="_testlib_8h_source_1l06146"/>06146 
<anchor xml:id="_testlib_8h_source_1l06155"/>06155 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_testlib_8h_source_1l06156"/>06156 T&#32;opt(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key,&#32;<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;default_value)&#32;{
<anchor xml:id="_testlib_8h_source_1l06157"/>06157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!has_opt(key))&#32;{
<anchor xml:id="_testlib_8h_source_1l06158"/>06158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;default_value;
<anchor xml:id="_testlib_8h_source_1l06159"/>06159 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06160"/>06160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;T&gt;(key);
<anchor xml:id="_testlib_8h_source_1l06161"/>06161 }
<anchor xml:id="_testlib_8h_source_1l06162"/>06162 
<anchor xml:id="_testlib_8h_source_1l06171"/>06171 std::string&#32;opt(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;key,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;default_value)&#32;{
<anchor xml:id="_testlib_8h_source_1l06172"/>06172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt&lt;std::string&gt;(key,&#32;default_value);
<anchor xml:id="_testlib_8h_source_1l06173"/>06173 }
<anchor xml:id="_testlib_8h_source_1l06174"/>06174 
<anchor xml:id="_testlib_8h_source_1l06182"/>06182 <emphasis role="keywordtype">void</emphasis>&#32;ensureNoUnusedOpts()&#32;{
<anchor xml:id="_testlib_8h_source_1l06183"/>06183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;opt:&#32;__testlib_opts)&#32;{
<anchor xml:id="_testlib_8h_source_1l06184"/>06184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!opt.second.used)&#32;{
<anchor xml:id="_testlib_8h_source_1l06185"/>06185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__testlib_fail(<link linkend="_testlib_8h_1a1921b31564b858b45e94efff9e9d54bf">format</link>(<emphasis role="stringliteral">&quot;Opts:&#32;unused&#32;key&#32;&apos;%s&apos;&quot;</emphasis>,&#32;<link linkend="_testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84">compress</link>(opt.first).c_str()));
<anchor xml:id="_testlib_8h_source_1l06186"/>06186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06187"/>06187 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06188"/>06188 }
<anchor xml:id="_testlib_8h_source_1l06189"/>06189 
<anchor xml:id="_testlib_8h_source_1l06190"/>06190 <emphasis role="keywordtype">void</emphasis>&#32;suppressEnsureNoUnusedOpts()&#32;{
<anchor xml:id="_testlib_8h_source_1l06191"/>06191 &#32;&#32;&#32;&#32;__testlib_ensureNoUnusedOptsSuppressed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_testlib_8h_source_1l06192"/>06192 }
<anchor xml:id="_testlib_8h_source_1l06193"/>06193 
<anchor xml:id="_testlib_8h_source_1l06194"/>06194 <emphasis role="keywordtype">void</emphasis>&#32;TestlibFinalizeGuard::autoEnsureNoUnusedOpts()&#32;{
<anchor xml:id="_testlib_8h_source_1l06195"/>06195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__testlib_ensureNoUnusedOptsFlag&#32;&amp;&amp;&#32;!__testlib_ensureNoUnusedOptsSuppressed)&#32;{
<anchor xml:id="_testlib_8h_source_1l06196"/>06196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureNoUnusedOpts();
<anchor xml:id="_testlib_8h_source_1l06197"/>06197 &#32;&#32;&#32;&#32;}
<anchor xml:id="_testlib_8h_source_1l06198"/>06198 }
<anchor xml:id="_testlib_8h_source_1l06199"/>06199 
<anchor xml:id="_testlib_8h_source_1l06200"/>06200 <link linkend="_struct_testlib_finalize_guard">TestlibFinalizeGuard</link>&#32;<link linkend="_testlib_8h_1a576c1be9a11f2136d2bfa955394d4575">testlibFinalizeGuard</link>;
<anchor xml:id="_testlib_8h_source_1l06201"/>06201 
<anchor xml:id="_testlib_8h_source_1l06202"/>06202 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_testlib_8h_source_1l06203"/>06203 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
