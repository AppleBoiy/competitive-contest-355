<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classrandom__t" kind="class" language="C++" prot="public">
    <compoundname>random_t</compoundname>
    <includes refid="testlib_8h" local="no">testlib.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrandom__t_1a9b2802fabed4ca5132e129fd5015fb7f" prot="private" static="no" mutable="no">
        <type>unsigned long long</type>
        <definition>unsigned long long random_t::seed</definition>
        <argsstring></argsstring>
        <name>seed</name>
        <qualifiedname>random_t::seed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="751" column="24" bodyfile="src/testlib.h" bodystart="751" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classrandom__t_1a938220fb7372fff63715ad1197a6fed8" prot="private" static="yes" mutable="no">
        <type>const unsigned long long</type>
        <definition>const unsigned long long random_t::multiplier</definition>
        <argsstring></argsstring>
        <name>multiplier</name>
        <qualifiedname>random_t::multiplier</qualifiedname>
        <initializer>= 0x5DEECE66DLL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="752" column="37" bodyfile="src/testlib.h" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__t_1a97e38a1231faa226e08a8c45b02737b4" prot="private" static="yes" mutable="no">
        <type>const unsigned long long</type>
        <definition>const unsigned long long random_t::addend</definition>
        <argsstring></argsstring>
        <name>addend</name>
        <qualifiedname>random_t::addend</qualifiedname>
        <initializer>= 0xBLL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="753" column="37" bodyfile="src/testlib.h" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__t_1a53beb1357c18dcd1cfb1996ffd73b67e" prot="private" static="yes" mutable="no">
        <type>const unsigned long long</type>
        <definition>const unsigned long long random_t::mask</definition>
        <argsstring></argsstring>
        <name>mask</name>
        <qualifiedname>random_t::mask</qualifiedname>
        <initializer>= (1LL &lt;&lt; 48) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="754" column="37" bodyfile="src/testlib.h" bodystart="754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrandom__t_1abda22a10c469b0d66adc6edcf31df272" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int random_t::lim</definition>
        <argsstring></argsstring>
        <name>lim</name>
        <qualifiedname>random_t::lim</qualifiedname>
        <initializer>= 25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="755" column="22" bodyfile="src/testlib.h" bodystart="755" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int random_t::version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <qualifiedname>random_t::version</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="775" column="16" bodyfile="src/testlib.h" bodystart="775" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classrandom__t_1af33457a4ec802820a40f6be564c767a8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long long</type>
        <definition>long long random_t::nextBits</definition>
        <argsstring>(int bits)</argsstring>
        <name>nextBits</name>
        <qualifiedname>random_t::nextBits</qualifiedname>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="757" column="15" bodyfile="src/testlib.h" bodystart="757" bodyend="772"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classrandom__t_1a200954ff6ef69dbe691a1d9bc6f73543" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>random_t::random_t</definition>
        <argsstring>()</argsstring>
        <name>random_t</name>
        <qualifiedname>random_t::random_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="778" column="5" bodyfile="src/testlib.h" bodystart="778" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a091210e52bff54e02afeda4d343e081d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void random_t::setSeed</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>setSeed</name>
        <qualifiedname>random_t::setSeed</qualifiedname>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="783" column="10" bodyfile="src/testlib.h" bodystart="783" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a5a4c52c8814df1402bd4451a54c62596" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void random_t::setSeed</definition>
        <argsstring>(long long _seed)</argsstring>
        <name>setSeed</name>
        <qualifiedname>random_t::setSeed</qualifiedname>
        <param>
          <type>long long</type>
          <declname>_seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="798" column="10" bodyfile="src/testlib.h" bodystart="798" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string random_t::next</definition>
        <argsstring>(const std::string &amp;ptrn)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>ptrn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="806" column="17" bodyfile="src/testlib.h" bodystart="806" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a6a2a9da34c281767ff0d2eba26ab10aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int random_t::next</definition>
        <argsstring>(int n)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="821" column="9" bodyfile="src/testlib.h" bodystart="821" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a1a80c042ba815ff52c119c52771170b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int random_t::next</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="839" column="18" bodyfile="src/testlib.h" bodystart="839" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a45c008fa70962b5f24cd3b964fe4685a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long long</type>
        <definition>long long random_t::next</definition>
        <argsstring>(long long n)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>long long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="846" column="15" bodyfile="src/testlib.h" bodystart="846" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a67074aceedb1cc4e0e632d766bdecb64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long random_t::next</definition>
        <argsstring>(unsigned long long n)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>unsigned long long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="861" column="24" bodyfile="src/testlib.h" bodystart="861" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1abfb4c6c332de59554b9ff536f739f6f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long random_t::next</definition>
        <argsstring>(long n)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="868" column="10" bodyfile="src/testlib.h" bodystart="868" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a92799ea85fc3b92554ca5d1c0696a48f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long random_t::next</definition>
        <argsstring>(unsigned long n)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="873" column="19" bodyfile="src/testlib.h" bodystart="873" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a02e0d6d3acf4dc0348b7e6893a9db59a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int random_t::next</definition>
        <argsstring>(int from, int to)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>int</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="880" column="9" bodyfile="src/testlib.h" bodystart="880" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a96576e50564fa3380dcd950a8ae708b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int random_t::next</definition>
        <argsstring>(unsigned int from, unsigned int to)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>from</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="885" column="18" bodyfile="src/testlib.h" bodystart="885" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1ac8efd50ad04ad63205279f8ad9f5cfd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long long</type>
        <definition>long long random_t::next</definition>
        <argsstring>(long long from, long long to)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>long long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="890" column="15" bodyfile="src/testlib.h" bodystart="890" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1af906bf4a0d3f94dce8362e6ad91b73c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long random_t::next</definition>
        <argsstring>(unsigned long long from, unsigned long long to)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>unsigned long long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="895" column="24" bodyfile="src/testlib.h" bodystart="895" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a94266e882ca443601604c27215b5b4b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long random_t::next</definition>
        <argsstring>(long from, long to)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>long</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="902" column="10" bodyfile="src/testlib.h" bodystart="902" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a4d087e798a7882b0e06ea23bffee99b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long random_t::next</definition>
        <argsstring>(unsigned long from, unsigned long to)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="907" column="19" bodyfile="src/testlib.h" bodystart="907" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_t::next</definition>
        <argsstring>()</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="914" column="12" bodyfile="src/testlib.h" bodystart="914" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a025fe558e59c74de018660fcc106afa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_t::next</definition>
        <argsstring>(double n)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>double</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="921" column="12" bodyfile="src/testlib.h" bodystart="921" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a8066c6224478692f9df72ab92268cee9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_t::next</definition>
        <argsstring>(double from, double to)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>double</type>
          <declname>from</declname>
        </param>
        <param>
          <type>double</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="928" column="12" bodyfile="src/testlib.h" bodystart="928" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a6ad67430ee6f8a5ba04d716239ad0001" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>Container::value_type</type>
        <definition>Container::value_type random_t::any</definition>
        <argsstring>(const Container &amp;c)</argsstring>
        <name>any</name>
        <qualifiedname>random_t::any</qualifiedname>
        <param>
          <type>const Container &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="936" column="36" bodyfile="src/testlib.h" bodystart="936" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a56614b8ab0529e6fe2b17d50f9188184" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
        </templateparamlist>
        <type>Iter::value_type</type>
        <definition>Iter::value_type random_t::any</definition>
        <argsstring>(const Iter &amp;begin, const Iter &amp;end)</argsstring>
        <name>any</name>
        <qualifiedname>random_t::any</qualifiedname>
        <param>
          <type>const Iter &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iter &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="947" column="31" bodyfile="src/testlib.h" bodystart="947" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1aacdef5e80fbdb890878a20d22bf819fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string random_t::next</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>next</name>
        <qualifiedname>random_t::next</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="960" column="17" bodyfile="src/testlib.h" bodystart="960" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int random_t::wnext</definition>
        <argsstring>(int n, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="973" column="9" bodyfile="src/testlib.h" bodystart="973" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a0ee4b3d21fe3f8e765cdb55593f6b698" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long long</type>
        <definition>long long random_t::wnext</definition>
        <argsstring>(long long n, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>long long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1000" column="15" bodyfile="src/testlib.h" bodystart="1000" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a45f6cc6e3ecc6677b66e5c756fe4bfe4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_t::wnext</definition>
        <argsstring>(double n, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>double</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1027" column="12" bodyfile="src/testlib.h" bodystart="1027" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a040834a196ac9423950b70444fa9e815" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_t::wnext</definition>
        <argsstring>(int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1054" column="12" bodyfile="src/testlib.h" bodystart="1054" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a25bd3838df67822270e9b357ed99753b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int random_t::wnext</definition>
        <argsstring>(unsigned int n, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1059" column="18" bodyfile="src/testlib.h" bodystart="1059" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1adc03869fcf6b80381e36e196d324a792" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long random_t::wnext</definition>
        <argsstring>(unsigned long long n, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>unsigned long long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1066" column="24" bodyfile="src/testlib.h" bodystart="1066" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a78d4e3af24a4d2dc4330d5cbcce6504a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long random_t::wnext</definition>
        <argsstring>(long n, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1074" column="10" bodyfile="src/testlib.h" bodystart="1074" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a02872a7a16d8e5012c679b84b79a3c9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long random_t::wnext</definition>
        <argsstring>(unsigned long n, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1079" column="19" bodyfile="src/testlib.h" bodystart="1079" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1aa72f4c64829957376aad6cc9103d4201" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int random_t::wnext</definition>
        <argsstring>(int from, int to, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>int</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1087" column="9" bodyfile="src/testlib.h" bodystart="1087" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a1b4c0bf6ead1bb3d8fe4dc2175dacdf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int random_t::wnext</definition>
        <argsstring>(unsigned int from, unsigned int to, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>from</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1094" column="9" bodyfile="src/testlib.h" bodystart="1094" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a5257c1a948d7ef92d664980e9a435fa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long long</type>
        <definition>long long random_t::wnext</definition>
        <argsstring>(long long from, long long to, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>long long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1101" column="15" bodyfile="src/testlib.h" bodystart="1101" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1abd0776ec850dcd8f057699f03cd54d49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long random_t::wnext</definition>
        <argsstring>(unsigned long long from, unsigned long long to, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>unsigned long long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1108" column="24" bodyfile="src/testlib.h" bodystart="1108" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a501082f1d8f8ca94d9a952c822d7c992" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long random_t::wnext</definition>
        <argsstring>(long from, long to, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>long</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1116" column="10" bodyfile="src/testlib.h" bodystart="1116" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a652d3dac50de94daaef2e69cc3ab8ede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long random_t::wnext</definition>
        <argsstring>(unsigned long from, unsigned long to, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>from</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1123" column="19" bodyfile="src/testlib.h" bodystart="1123" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a90cf6b1677f5c6f875f8c88a5933ea40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double random_t::wnext</definition>
        <argsstring>(double from, double to, int type)</argsstring>
        <name>wnext</name>
        <qualifiedname>random_t::wnext</qualifiedname>
        <param>
          <type>double</type>
          <declname>from</declname>
        </param>
        <param>
          <type>double</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1130" column="12" bodyfile="src/testlib.h" bodystart="1130" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a9f733f388bbb553a9afabcbbfc68888d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>Container::value_type</type>
        <definition>Container::value_type random_t::wany</definition>
        <argsstring>(const Container &amp;c, int type)</argsstring>
        <name>wany</name>
        <qualifiedname>random_t::wany</qualifiedname>
        <param>
          <type>const Container &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1138" column="36" bodyfile="src/testlib.h" bodystart="1138" bodyend="1145"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1aa988d6e195c81a659985aa9714ee5607" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
        </templateparamlist>
        <type>Iter::value_type</type>
        <definition>Iter::value_type random_t::wany</definition>
        <argsstring>(const Iter &amp;begin, const Iter &amp;end, int type)</argsstring>
        <name>wany</name>
        <qualifiedname>random_t::wany</qualifiedname>
        <param>
          <type>const Iter &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iter &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1149" column="31" bodyfile="src/testlib.h" bodystart="1149" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a8307bf13307e17694c4d38f76e1457e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; E &gt;</type>
        <definition>std::vector&lt; E &gt; random_t::perm</definition>
        <argsstring>(T size, E first)</argsstring>
        <name>perm</name>
        <qualifiedname>random_t::perm</qualifiedname>
        <param>
          <type>T</type>
          <declname>size</declname>
        </param>
        <param>
          <type>E</type>
          <declname>first</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1161" column="17" bodyfile="src/testlib.h" bodystart="1161" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1ae7d1ae42c9e6f534a871b0e38a6b5743" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; random_t::perm</definition>
        <argsstring>(T size)</argsstring>
        <name>perm</name>
        <qualifiedname>random_t::perm</qualifiedname>
        <param>
          <type>T</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1178" column="17" bodyfile="src/testlib.h" bodystart="1178" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; random_t::distinct</definition>
        <argsstring>(int size, T from, T to)</argsstring>
        <name>distinct</name>
        <qualifiedname>random_t::distinct</qualifiedname>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>T</type>
          <declname>from</declname>
        </param>
        <param>
          <type>T</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1184" column="17" bodyfile="src/testlib.h" bodystart="1184" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a1333938e6448e31ea379d246a7f007cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; random_t::distinct</definition>
        <argsstring>(int size, T upper)</argsstring>
        <name>distinct</name>
        <qualifiedname>random_t::distinct</qualifiedname>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>T</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1222" column="17" bodyfile="src/testlib.h" bodystart="1222" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a7aa0ff6ea67a8e4e8f13caa5ab74f445" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; random_t::partition</definition>
        <argsstring>(int size, T sum, T min_part)</argsstring>
        <name>partition</name>
        <qualifiedname>random_t::partition</qualifiedname>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>T</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>T</type>
          <declname>min_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1238" column="17" bodyfile="src/testlib.h" bodystart="1238" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="classrandom__t_1a2a9ceb1c9f011f481d967f162f16d53a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; random_t::partition</definition>
        <argsstring>(int size, T sum)</argsstring>
        <name>partition</name>
        <qualifiedname>random_t::partition</qualifiedname>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>T</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1282" column="17" bodyfile="src/testlib.h" bodystart="1282" bodyend="1284"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/testlib.h" line="749" column="1" bodyfile="src/testlib.h" bodystart="749" bodyend="1285"/>
    <listofallmembers>
      <member refid="classrandom__t_1a97e38a1231faa226e08a8c45b02737b4" prot="private" virt="non-virtual"><scope>random_t</scope><name>addend</name></member>
      <member refid="classrandom__t_1a6ad67430ee6f8a5ba04d716239ad0001" prot="public" virt="non-virtual"><scope>random_t</scope><name>any</name></member>
      <member refid="classrandom__t_1a56614b8ab0529e6fe2b17d50f9188184" prot="public" virt="non-virtual"><scope>random_t</scope><name>any</name></member>
      <member refid="classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5" prot="public" virt="non-virtual"><scope>random_t</scope><name>distinct</name></member>
      <member refid="classrandom__t_1a1333938e6448e31ea379d246a7f007cb" prot="public" virt="non-virtual"><scope>random_t</scope><name>distinct</name></member>
      <member refid="classrandom__t_1abda22a10c469b0d66adc6edcf31df272" prot="private" virt="non-virtual"><scope>random_t</scope><name>lim</name></member>
      <member refid="classrandom__t_1a53beb1357c18dcd1cfb1996ffd73b67e" prot="private" virt="non-virtual"><scope>random_t</scope><name>mask</name></member>
      <member refid="classrandom__t_1a938220fb7372fff63715ad1197a6fed8" prot="private" virt="non-virtual"><scope>random_t</scope><name>multiplier</name></member>
      <member refid="classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a6a2a9da34c281767ff0d2eba26ab10aa" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a1a80c042ba815ff52c119c52771170b7" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a45c008fa70962b5f24cd3b964fe4685a" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a67074aceedb1cc4e0e632d766bdecb64" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1abfb4c6c332de59554b9ff536f739f6f6" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a92799ea85fc3b92554ca5d1c0696a48f" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a02e0d6d3acf4dc0348b7e6893a9db59a" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a96576e50564fa3380dcd950a8ae708b2" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1ac8efd50ad04ad63205279f8ad9f5cfd8" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1af906bf4a0d3f94dce8362e6ad91b73c1" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a94266e882ca443601604c27215b5b4b6" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a4d087e798a7882b0e06ea23bffee99b6" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a025fe558e59c74de018660fcc106afa1" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1a8066c6224478692f9df72ab92268cee9" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1aacdef5e80fbdb890878a20d22bf819fd" prot="public" virt="non-virtual"><scope>random_t</scope><name>next</name></member>
      <member refid="classrandom__t_1af33457a4ec802820a40f6be564c767a8" prot="private" virt="non-virtual"><scope>random_t</scope><name>nextBits</name></member>
      <member refid="classrandom__t_1a7aa0ff6ea67a8e4e8f13caa5ab74f445" prot="public" virt="non-virtual"><scope>random_t</scope><name>partition</name></member>
      <member refid="classrandom__t_1a2a9ceb1c9f011f481d967f162f16d53a" prot="public" virt="non-virtual"><scope>random_t</scope><name>partition</name></member>
      <member refid="classrandom__t_1a8307bf13307e17694c4d38f76e1457e0" prot="public" virt="non-virtual"><scope>random_t</scope><name>perm</name></member>
      <member refid="classrandom__t_1ae7d1ae42c9e6f534a871b0e38a6b5743" prot="public" virt="non-virtual"><scope>random_t</scope><name>perm</name></member>
      <member refid="classrandom__t_1a200954ff6ef69dbe691a1d9bc6f73543" prot="public" virt="non-virtual"><scope>random_t</scope><name>random_t</name></member>
      <member refid="classrandom__t_1a9b2802fabed4ca5132e129fd5015fb7f" prot="private" virt="non-virtual"><scope>random_t</scope><name>seed</name></member>
      <member refid="classrandom__t_1a091210e52bff54e02afeda4d343e081d" prot="public" virt="non-virtual"><scope>random_t</scope><name>setSeed</name></member>
      <member refid="classrandom__t_1a5a4c52c8814df1402bd4451a54c62596" prot="public" virt="non-virtual"><scope>random_t</scope><name>setSeed</name></member>
      <member refid="classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868" prot="public" virt="non-virtual"><scope>random_t</scope><name>version</name></member>
      <member refid="classrandom__t_1a9f733f388bbb553a9afabcbbfc68888d" prot="public" virt="non-virtual"><scope>random_t</scope><name>wany</name></member>
      <member refid="classrandom__t_1aa988d6e195c81a659985aa9714ee5607" prot="public" virt="non-virtual"><scope>random_t</scope><name>wany</name></member>
      <member refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a0ee4b3d21fe3f8e765cdb55593f6b698" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a45f6cc6e3ecc6677b66e5c756fe4bfe4" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a040834a196ac9423950b70444fa9e815" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a25bd3838df67822270e9b357ed99753b" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1adc03869fcf6b80381e36e196d324a792" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a78d4e3af24a4d2dc4330d5cbcce6504a" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a02872a7a16d8e5012c679b84b79a3c9f" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1aa72f4c64829957376aad6cc9103d4201" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a1b4c0bf6ead1bb3d8fe4dc2175dacdf4" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a5257c1a948d7ef92d664980e9a435fa5" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1abd0776ec850dcd8f057699f03cd54d49" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a501082f1d8f8ca94d9a952c822d7c992" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a652d3dac50de94daaef2e69cc3ab8ede" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
      <member refid="classrandom__t_1a90cf6b1677f5c6f875f8c88a5933ea40" prot="public" virt="non-virtual"><scope>random_t</scope><name>wnext</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
