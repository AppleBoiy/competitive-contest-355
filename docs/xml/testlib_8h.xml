<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="testlib_8h" kind="file" language="C++">
    <compoundname>testlib.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">climits</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cctype</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iterator</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">cstring</includes>
    <includes local="no">limits</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">unistd.h</includes>
    <includedby refid="checker_8cpp" local="yes">src/checker.cpp</includedby>
    <includedby refid="test_8cpp" local="yes">src/test.cpp</includedby>
    <includedby refid="validator_8cpp" local="yes">src/validator.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/testlib.h</label>
        <link refid="testlib_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>cctype</label>
      </node>
      <node id="4">
        <label>climits</label>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="22">
        <label>cstdint</label>
      </node>
      <node id="6">
        <label>cstdio</label>
      </node>
      <node id="3">
        <label>cstdlib</label>
      </node>
      <node id="17">
        <label>cstring</label>
      </node>
      <node id="20">
        <label>fcntl.h</label>
      </node>
      <node id="16">
        <label>fstream</label>
      </node>
      <node id="21">
        <label>functional</label>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>iterator</label>
      </node>
      <node id="18">
        <label>limits</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="11">
        <label>set</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="19">
        <label>stdarg.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="23">
        <label>unistd.h</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/checker.cpp</label>
        <link refid="checker_8cpp"/>
      </node>
      <node id="3">
        <label>src/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="1">
        <label>src/testlib.h</label>
        <link refid="testlib_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/validator.cpp</label>
        <link refid="validator_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classpattern" prot="public">pattern</innerclass>
    <innerclass refid="classrandom__t" prot="public">random_t</innerclass>
    <innerclass refid="class_input_stream_reader" prot="public">InputStreamReader</innerclass>
    <innerclass refid="class_string_input_stream_reader" prot="public">StringInputStreamReader</innerclass>
    <innerclass refid="class_file_input_stream_reader" prot="public">FileInputStreamReader</innerclass>
    <innerclass refid="class_buffered_file_input_stream_reader" prot="public">BufferedFileInputStreamReader</innerclass>
    <innerclass refid="struct_in_stream" prot="public">InStream</innerclass>
    <innerclass refid="struct_validator_bounds_hit" prot="public">ValidatorBoundsHit</innerclass>
    <innerclass refid="struct_constant_bound" prot="public">ConstantBound</innerclass>
    <innerclass refid="struct_constant_bounds" prot="public">ConstantBounds</innerclass>
    <innerclass refid="class_validator" prot="public">Validator</innerclass>
    <innerclass refid="struct_testlib_finalize_guard" prot="public">TestlibFinalizeGuard</innerclass>
    <innerclass refid="class_checker" prot="public">Checker</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="testlib_8h_1a1c6d5de492ac61ad29aec7aa9a436bbf" prot="public" static="no">
        <name>VERSION</name>
        <initializer>&quot;0.9.42-SNAPSHOT&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="28" column="9" bodyfile="src/testlib.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1aaac7e8b42546e8a2fd07b71fd5b12ba0" prot="public" static="no">
        <name>random</name>
        <initializer>__random_deprecated</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="167" column="9" bodyfile="src/testlib.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" prot="public" static="no">
        <name>WORD</name>
        <initializer>unsigned short</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="212" column="13" bodyfile="src/testlib.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1af17a13b2ae0e9c24c020ac1f044f30c2" prot="public" static="no">
        <name>LLONG_MIN</name>
        <initializer>(-9223372036854775807LL - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="221" column="9" bodyfile="src/testlib.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1aa1dd7166a75b73ad62b111ae6fc17c59" prot="public" static="no">
        <name>ULLONG_MAX</name>
        <initializer>(18446744073709551615)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="225" column="9" bodyfile="src/testlib.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" prot="public" static="no">
        <name>LF</name>
        <initializer>((char)10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="228" column="9" bodyfile="src/testlib.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a876ce77f3c672c7162658151e648389e" prot="public" static="no">
        <name>CR</name>
        <initializer>((char)13)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="229" column="9" bodyfile="src/testlib.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1ad58a1fbfc85c7e4790fc55e654f50221" prot="public" static="no">
        <name>TAB</name>
        <initializer>((char)9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="230" column="9" bodyfile="src/testlib.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a5ff6e798033f03e74730e99f01936f84" prot="public" static="no">
        <name>SPACE</name>
        <initializer>((char)&apos; &apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="231" column="9" bodyfile="src/testlib.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" prot="public" static="no">
        <name>EOFC</name>
        <initializer>(255)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="232" column="9" bodyfile="src/testlib.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a809c8f4d2bf12a53a01098f336b97598" prot="public" static="no">
        <name>OK_EXIT_CODE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="238" column="20" bodyfile="src/testlib.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a9407aadd1d7b6a24b40a94be0e1b5e6c" prot="public" static="no">
        <name>WA_EXIT_CODE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="248" column="20" bodyfile="src/testlib.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1acd99fac8764b4f8513d0d78aa80878a5" prot="public" static="no">
        <name>PE_EXIT_CODE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="258" column="20" bodyfile="src/testlib.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1afac612f10342c3ccbfc7f30ae563184b" prot="public" static="no">
        <name>FAIL_EXIT_CODE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="268" column="20" bodyfile="src/testlib.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1ac9085792031f49686fd06d9560164d3b" prot="public" static="no">
        <name>DIRT_EXIT_CODE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="276" column="20" bodyfile="src/testlib.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a58429ce36ac0b67fb7889455174c7e8a" prot="public" static="no">
        <name>POINTS_EXIT_CODE</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="281" column="12" bodyfile="src/testlib.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a30fb6330f5fcaf65c9347f50df26222d" prot="public" static="no">
        <name>UNEXPECTED_EOF_EXIT_CODE</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="285" column="12" bodyfile="src/testlib.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1ac0c3e3c9771bdfbbcbd70392bd74c03a" prot="public" static="no">
        <name>PC_BASE_EXIT_CODE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="292" column="20" bodyfile="src/testlib.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a67a1b89efefde69b271ec10086a493fc" prot="public" static="no">
        <name>__TESTLIB_STATIC_ASSERT</name>
        <param><defname>condition</defname></param>
        <initializer>typedef void* __testlib_static_assert_type[(condition) ? 1 : -1]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="299" column="14" bodyfile="src/testlib.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a29ae4e28b586fcb6dcd1a4a0a69b9a49" prot="public" static="no">
        <name>I64</name>
        <initializer>&quot;%lld&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="306" column="10" bodyfile="src/testlib.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a24c42244bf61006967bf37001c14d2bf" prot="public" static="no">
        <name>U64</name>
        <initializer>&quot;%llu&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="307" column="9" bodyfile="src/testlib.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" prot="public" static="no">
        <name>NORETURN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="315" column="13" bodyfile="src/testlib.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" prot="public" static="no">
        <name>FMT_TO_RESULT</name>
        <param><defname>fmt</defname></param>
        <param><defname>cstr</defname></param>
        <param><defname>result</defname></param>
        <initializer>            std::string result;                              \
            if (__testlib_format_buffer_usage_count != 0)                                  \
                __testlib_fail(&quot;FMT_TO_RESULT::__testlib_format_buffer_usage_count != 0&quot;); \
            __testlib_format_buffer_usage_count++;                                         \
            va_list ap;                                                                    \
            va_start(ap, fmt);                                                             \
            vsnprintf(__testlib_format_buffer, sizeof(__testlib_format_buffer), cstr, ap); \
            va_end(ap);                                                                    \
            __testlib_format_buffer[sizeof(__testlib_format_buffer) - 1] = 0;              \
            result = std::string(__testlib_format_buffer);                                 \
            __testlib_format_buffer_usage_count--;                                         \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="321" column="9" bodyfile="src/testlib.h" bodystart="321" bodyend="332"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a1e8859af5c334b6c4bebb434505b9ae4" prot="public" static="no">
        <name>_pc</name>
        <param><defname>exitCode</defname></param>
        <initializer>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" kindref="member">_partially</ref> + (exitCode)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1636" column="9" bodyfile="src/testlib.h" bodystart="1636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1ab882eaa72c700511353c3099d0952519" prot="public" static="no">
        <name>__testlib_readMany</name>
        <param><defname>readMany</defname></param>
        <param><defname>readOne</defname></param>
        <param><defname>typeName</defname></param>
        <param><defname>space</defname></param>
        <initializer>    if (size &lt; 0)                                                               \
        <ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>, #readMany &quot;: size should be non-negative.&quot;);                \
    if (size &gt; 100000000)                                                       \
        <ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>, #readMany &quot;: size should be at most 100000000.&quot;);           \
                                                                                \
    std::vector&lt;typeName&gt; result(size);                                         \
    readManyIteration = indexBase;                                              \
                                                                                \
    for (int i = 0; i &lt; size; i++)                                              \
    {                                                                           \
        result[i] = readOne;                                                    \
        readManyIteration++;                                                    \
        if (strict &amp;&amp; space &amp;&amp; i + 1 &lt; size)                                              \
            readSpace();                                                        \
    }                                                                           \
                                                                                \
    readManyIteration = NO_INDEX;                                               \
    return result;                                                              \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3436" column="9" bodyfile="src/testlib.h" bodystart="3436" bodyend="3455"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a6995c405db0a243abdf49c4e1de55a41" prot="public" static="no">
        <name>ensure</name>
        <param><defname>cond</defname></param>
        <initializer>__testlib_ensure(cond, &quot;Condition failed: \&quot;&quot; #cond &quot;\&quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4908" column="9" bodyfile="src/testlib.h" bodystart="4908" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a9a63ce5ce3b143f8df9df20769c2ab86" prot="public" static="no">
        <name>STRINGIZE_DETAIL</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4909" column="9" bodyfile="src/testlib.h" bodystart="4909" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a3428692efe6051ef30016ffde1a9f7bb" prot="public" static="no">
        <name>STRINGIZE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="testlib_8h_1a9a63ce5ce3b143f8df9df20769c2ab86" kindref="member">STRINGIZE_DETAIL</ref>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4910" column="9" bodyfile="src/testlib.h" bodystart="4910" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a4d844981188f58cfa1385d5a4d6918c4" prot="public" static="no">
        <name>ensure_ext</name>
        <param><defname>cond</defname></param>
        <initializer>__testlib_ensure(cond, &quot;Line &quot; STRINGIZE(__LINE__) &quot;: Condition failed: \&quot;&quot; #cond &quot;\&quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4911" column="9" bodyfile="src/testlib.h" bodystart="4911" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="testlib_8h_1a390e9021e1ac7b756fdf9a49c3da47f9" prot="public" static="no">
        <name>RAND_THROW_STATEMENT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4961" column="12" bodyfile="src/testlib.h" bodystart="4961" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="testlib_8h_1ae73df2968f2f656074dc00e062600ddb" prot="public" static="no" strong="no">
        <type></type>
        <name>TMode</name>
        <enumvalue id="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" prot="public">
          <name>_input</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6" prot="public">
          <name>_output</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61" prot="public">
          <name>_answer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1616" column="1" bodyfile="src/testlib.h" bodystart="1616" bodyend="1618"/>
      </memberdef>
      <memberdef kind="enum" id="testlib_8h_1aca738f43134375f0a18077d633f14578" prot="public" static="no" strong="no">
        <type></type>
        <name>TResult</name>
        <enumvalue id="testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77" prot="public">
          <name>_ok</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" prot="public">
          <name>_wa</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" prot="public">
          <name>_pe</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" prot="public">
          <name>_fail</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43" prot="public">
          <name>_dirt</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" prot="public">
          <name>_points</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" prot="public">
          <name>_unexpected_eof</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" prot="public">
          <name>_partially</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1621" column="1" bodyfile="src/testlib.h" bodystart="1621" bodyend="1630"/>
      </memberdef>
      <memberdef kind="enum" id="testlib_8h_1a72dc574602eb75df785ecfc398a3158f" prot="public" static="no" strong="no">
        <type></type>
        <name>TTestlibMode</name>
        <enumvalue id="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa344a85f02f1ac239f9f648738a856eb6" prot="public">
          <name>_unknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1a72dc574602eb75df785ecfc398a3158fad23f42b9c6d23ab5679d79151c4585ff" prot="public">
          <name>_checker</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" prot="public">
          <name>_validator</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa5311ad9bde7f5dbdc28c1f8264456fd5" prot="public">
          <name>_generator</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1a72dc574602eb75df785ecfc398a3158fadaea9b0ac8f600ff71b0f7616869deac" prot="public">
          <name>_interactor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa" prot="public">
          <name>_scorer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1632" column="1" bodyfile="src/testlib.h" bodystart="1632" bodyend="1634"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="testlib_8h_1aca3ccf9230a0e9c7f28e21d77f26e74f" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* latestFeatures[]</definition>
        <argsstring>[]</argsstring>
        <name>latestFeatures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="65" column="12" bodyfile="src/testlib.h" bodystart="65" bodyend="158"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1af81af6b6e095900dec587dca7c85b291" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char __testlib_format_buffer[16777216]</definition>
        <argsstring>[16777216]</argsstring>
        <name>__testlib_format_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="318" column="13" bodyfile="src/testlib.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a6463f4d284f30339bafb87ad55f39a0b" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int __testlib_format_buffer_usage_count</definition>
        <argsstring></argsstring>
        <name>__testlib_format_buffer_usage_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="319" column="12" bodyfile="src/testlib.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf" prot="public" static="no" mutable="no">
        <type>const long long</type>
        <definition>const long long __TESTLIB_LONGLONG_MAX</definition>
        <argsstring></argsstring>
        <name>__TESTLIB_LONGLONG_MAX</name>
        <initializer>= 9223372036854775807LL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="333" column="17" bodyfile="src/testlib.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int __TESTLIB_MAX_TEST_CASE</definition>
        <argsstring></argsstring>
        <name>__TESTLIB_MAX_TEST_CASE</name>
        <initializer>= 1073741823</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="334" column="11" bodyfile="src/testlib.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int __testlib_exitCode</definition>
        <argsstring></argsstring>
        <name>__testlib_exitCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="336" column="5" bodyfile="src/testlib.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool __testlib_hasTestCase</definition>
        <argsstring></argsstring>
        <name>__testlib_hasTestCase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="338" column="6" bodyfile="src/testlib.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int __testlib_testCase</definition>
        <argsstring></argsstring>
        <name>__testlib_testCase</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="339" column="5" bodyfile="src/testlib.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string outcomes[]</definition>
        <argsstring>[]</argsstring>
        <name>outcomes</name>
        <initializer>= {
        &quot;accepted&quot;,
        &quot;wrong-answer&quot;,
        &quot;presentation-error&quot;,
        &quot;fail&quot;,
        &quot;fail&quot;,

        &quot;points&quot;,



        &quot;reserved&quot;,
        &quot;reserved&quot;,
        &quot;unexpected-eof&quot;,
        &quot;reserved&quot;,
        &quot;reserved&quot;,
        &quot;reserved&quot;,
        &quot;reserved&quot;,
        &quot;reserved&quot;,
        &quot;reserved&quot;,
        &quot;reserved&quot;,
        &quot;partially-correct&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1639" column="19" bodyfile="src/testlib.h" bodystart="1639" bodyend="1661"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1ad3874376581d36b1067d501d534d7b34" prot="public" static="no" mutable="no">
        <type><ref refid="struct_in_stream" kindref="compound">InStream</ref></type>
        <definition>InStream inf</definition>
        <argsstring></argsstring>
        <name>inf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2371" column="10" bodyfile="src/testlib.h" bodystart="2371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" prot="public" static="no" mutable="no">
        <type><ref refid="struct_in_stream" kindref="compound">InStream</ref></type>
        <definition>InStream ouf</definition>
        <argsstring></argsstring>
        <name>ouf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2372" column="10" bodyfile="src/testlib.h" bodystart="2372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac" prot="public" static="no" mutable="no">
        <type><ref refid="struct_in_stream" kindref="compound">InStream</ref></type>
        <definition>InStream ans</definition>
        <argsstring></argsstring>
        <name>ans</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2373" column="10" bodyfile="src/testlib.h" bodystart="2373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool appesMode</definition>
        <argsstring></argsstring>
        <name>appesMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2374" column="6" bodyfile="src/testlib.h" bodystart="2374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string appesModeEncoding</definition>
        <argsstring></argsstring>
        <name>appesModeEncoding</name>
        <initializer>= &quot;windows-1251&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2375" column="13" bodyfile="src/testlib.h" bodystart="2375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string resultName</definition>
        <argsstring></argsstring>
        <name>resultName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2376" column="13" bodyfile="src/testlib.h" bodystart="2376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a00f5e960957827ed8846cf705f810473" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string checkerName</definition>
        <argsstring></argsstring>
        <name>checkerName</name>
        <initializer>= &quot;untitled checker&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2377" column="13" bodyfile="src/testlib.h" bodystart="2377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" prot="public" static="no" mutable="no">
        <type><ref refid="classrandom__t" kindref="compound">random_t</ref></type>
        <definition>random_t rnd</definition>
        <argsstring></argsstring>
        <name>rnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2378" column="10" bodyfile="src/testlib.h" bodystart="2378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" prot="public" static="no" mutable="no">
        <type><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158f" kindref="member">TTestlibMode</ref></type>
        <definition>TTestlibMode testlibMode</definition>
        <argsstring></argsstring>
        <name>testlibMode</name>
        <initializer>= <ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa344a85f02f1ac239f9f648738a856eb6" kindref="member">_unknown</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2379" column="14" bodyfile="src/testlib.h" bodystart="2379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1acb5280d0779ed8499169e3537ab20fd2" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double __testlib_points</definition>
        <argsstring></argsstring>
        <name>__testlib_points</name>
        <initializer>= std::numeric_limits&lt;float&gt;::infinity()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2380" column="8" bodyfile="src/testlib.h" bodystart="2380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1ad2806158bb273bfbae710825328a0887" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t VALIDATOR_MAX_VARIABLE_COUNT</definition>
        <argsstring></argsstring>
        <name>VALIDATOR_MAX_VARIABLE_COUNT</name>
        <initializer>= 255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2382" column="14" bodyfile="src/testlib.h" bodystart="2382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a72a79ac1064de9f716b78e4369669976" prot="public" static="no" mutable="no">
        <type>class <ref refid="class_validator" kindref="compound">Validator</ref></type>
        <definition>class Validator validator</definition>
        <argsstring></argsstring>
        <name>validator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2764" column="11"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a576c1be9a11f2136d2bfa955394d4575" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="struct_testlib_finalize_guard" kindref="compound">TestlibFinalizeGuard</ref></type>
        <definition>TestlibFinalizeGuard testlibFinalizeGuard</definition>
        <argsstring></argsstring>
        <name>testlibFinalizeGuard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2812" column="29" declfile="src/testlib.h" declline="2812" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a675e9c0cb400805c69d94e7cdded4494" prot="public" static="no" mutable="no">
        <type>std::fstream</type>
        <definition>std::fstream tout</definition>
        <argsstring></argsstring>
        <name>tout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2823" column="14" bodyfile="src/testlib.h" bodystart="2823" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1adf88ff484a3ca535a2a66ea5c0713796" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string __testlib_testset</definition>
        <argsstring></argsstring>
        <name>__testlib_testset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4538" column="13" bodyfile="src/testlib.h" bodystart="4538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a28757a64bf4cec48f7a7e5d6187bb350" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string __testlib_group</definition>
        <argsstring></argsstring>
        <name>__testlib_group</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4544" column="13" bodyfile="src/testlib.h" bodystart="4544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c" prot="public" static="no" mutable="no">
        <type>class <ref refid="class_checker" kindref="compound">Checker</ref></type>
        <definition>class Checker checker</definition>
        <argsstring></argsstring>
        <name>checker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4810" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="testlib_8h_1ad093584ea7bc2579d8d49c05d4b95347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setTestCase</definition>
        <argsstring>(int testCase)</argsstring>
        <name>setTestCase</name>
        <param>
          <type>int</type>
          <declname>testCase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2878" column="6" bodyfile="src/testlib.h" bodystart="2878" bodyend="2895" declfile="src/testlib.h" declline="341" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a0fb214ced4215bfbfa6eba1ab4635721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unsetTestCase</definition>
        <argsstring>()</argsstring>
        <name>unsetTestCase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="343" column="6" bodyfile="src/testlib.h" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a1fada20a7ff5c7d6a6e149c53426175d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>static NORETURN void __testlib_fail</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>__testlib_fail</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4923" column="22" bodyfile="src/testlib.h" bodystart="4923" bodyend="4925" declfile="src/testlib.h" declline="348" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a90728a95b3a515f80dfc9ebafe4d1c7e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T __testlib_abs</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>__testlib_abs</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="354" column="17" bodyfile="src/testlib.h" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a67f33578717526ae6038be38128a9a57" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T __testlib_min</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>__testlib_min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="362" column="17" bodyfile="src/testlib.h" bodystart="362" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a97037168b84382ced465c10b64fb7f9b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T __testlib_max</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>__testlib_max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="370" column="17" bodyfile="src/testlib.h" bodystart="370" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a46dec2cf23c1940bb271eda40b2e6880" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T __testlib_crop</definition>
        <argsstring>(T value, T a, T b)</argsstring>
        <name>__testlib_crop</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="378" column="17" bodyfile="src/testlib.h" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a0518bd27a71e3de5d5044375675e3587" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double __testlib_crop</definition>
        <argsstring>(double value, double a, double b)</argsstring>
        <name>__testlib_crop</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="385" column="22" bodyfile="src/testlib.h" bodystart="385" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ae3152c870a70f39fc28f3b386b32f445" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool __testlib_prelimIsNaN</definition>
        <argsstring>(double r)</argsstring>
        <name>__testlib_prelimIsNaN</name>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="392" column="13" bodyfile="src/testlib.h" bodystart="392" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a1d41159c6a8953ca3c450f5ca607ccae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string removeDoubleTrailingZeroes</definition>
        <argsstring>(std::string value)</argsstring>
        <name>removeDoubleTrailingZeroes</name>
        <param>
          <type>std::string</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="404" column="20" bodyfile="src/testlib.h" bodystart="404" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a3e8b5e1528a28d4832cb11dff8ad5edb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string upperCase</definition>
        <argsstring>(std::string s)</argsstring>
        <name>upperCase</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="416" column="20" bodyfile="src/testlib.h" bodystart="416" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a2d0670a860a887c1de821de0550c0a32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lowerCase</definition>
        <argsstring>(std::string s)</argsstring>
        <name>lowerCase</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="426" column="20" bodyfile="src/testlib.h" bodystart="426" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string format</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>format</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="436" column="13" bodyfile="src/testlib.h" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a133d0fb6f1e08d9483f8aa9a8e3c6f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string format</definition>
        <argsstring>(const std::string fmt,...)</argsstring>
        <name>format</name>
        <param>
          <type>const std::string</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="441" column="13" bodyfile="src/testlib.h" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a6b4c0f2f62bb000014e66f22bc4a198c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string __testlib_part</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>__testlib_part</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3423" column="20" bodyfile="src/testlib.h" bodystart="3423" bodyend="3434" declfile="src/testlib.h" declline="449" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ae0323969dcc7f21f7145432ab3b64fb9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool __testlib_isNaN</definition>
        <argsstring>(double r)</argsstring>
        <name>__testlib_isNaN</name>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="451" column="13" bodyfile="src/testlib.h" bodystart="451" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ae930b85fae4cc75231abc305b9bdf04c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double __testlib_nan</definition>
        <argsstring>()</argsstring>
        <name>__testlib_nan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="462" column="15" bodyfile="src/testlib.h" bodystart="462" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ac91197d50cfcf6261342a3cd88dabf60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool __testlib_isInfinite</definition>
        <argsstring>(double r)</argsstring>
        <name>__testlib_isInfinite</name>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="474" column="13" bodyfile="src/testlib.h" bodystart="474" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1afe9a738a208c2ff953b27fea24007d20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool doubleCompare</definition>
        <argsstring>(double expected, double result, double MAX_DOUBLE_ERROR)</argsstring>
        <name>doubleCompare</name>
        <param>
          <type>double</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>double</type>
          <declname>result</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MAX_DOUBLE_ERROR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="482" column="13" bodyfile="src/testlib.h" bodystart="482" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double doubleDelta</definition>
        <argsstring>(double expected, double result)</argsstring>
        <name>doubleDelta</name>
        <param>
          <type>double</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>double</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="508" column="15" bodyfile="src/testlib.h" bodystart="508" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a4df11c8b08da6be32370cc56826eae41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __testlib_set_binary</definition>
        <argsstring>(std::FILE *file)</argsstring>
        <name>__testlib_set_binary</name>
        <param>
          <type>std::FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>It does nothing on non-windows and files differ from stdin/stdout/stderr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="519" column="13" bodyfile="src/testlib.h" bodystart="519" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a9a960fb3a1f07291b2315b25381feda9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string vtos</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>vtos</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="649" column="20" bodyfile="src/testlib.h" bodystart="649" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a4662bc4084bf18e03d56d532ccc0c63c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string toHumanReadableString</definition>
        <argsstring>(const T &amp;n)</argsstring>
        <name>toHumanReadableString</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="661" column="20" bodyfile="src/testlib.h" bodystart="661" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a036dd582097a7665abe63ef1167b106f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string toString</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>toString</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="667" column="20" bodyfile="src/testlib.h" bodystart="667" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a953ed67f2a3deb77eeffd75223f9e42f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool __pattern_isSlash</definition>
        <argsstring>(const std::string &amp;s, size_t pos)</argsstring>
        <name>__pattern_isSlash</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1298" column="13" bodyfile="src/testlib.h" bodystart="1298" bodyend="1300"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a259e1b50c06b52d8982910b091a1700c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool __pattern_isCommandChar</definition>
        <argsstring>(const std::string &amp;s, size_t pos, char value)</argsstring>
        <name>__pattern_isCommandChar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1305" column="13" bodyfile="src/testlib.h" bodystart="1305" bodyend="1316"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a4021805861c03518b76a6d37b99edf64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>static char __pattern_getChar</definition>
        <argsstring>(const std::string &amp;s, size_t &amp;pos)</argsstring>
        <name>__pattern_getChar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1318" column="13" bodyfile="src/testlib.h" bodystart="1318" bodyend="1325"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ac116c9755dc45c47ea226f01db94af0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int __pattern_greedyMatch</definition>
        <argsstring>(const std::string &amp;s, size_t pos, const std::vector&lt; char &gt; chars)</argsstring>
        <name>__pattern_greedyMatch</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt;</type>
          <declname>chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1330" column="12" bodyfile="src/testlib.h" bodystart="1330" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a6bbe47bbbb5286360d4e7b6b9abf7519" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __pattern_scanCounts</definition>
        <argsstring>(const std::string &amp;s, size_t &amp;pos, int &amp;from, int &amp;to)</argsstring>
        <name>__pattern_scanCounts</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1390" column="13" bodyfile="src/testlib.h" bodystart="1390" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ab142b444061e16a1b161e714d4211bbc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; char &gt;</type>
        <definition>static std::vector&lt; char &gt; __pattern_scanCharSet</definition>
        <argsstring>(const std::string &amp;s, size_t &amp;pos)</argsstring>
        <name>__pattern_scanCharSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1458" column="20" bodyfile="src/testlib.h" bodystart="1458" bodyend="1522"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool isEof</definition>
        <argsstring>(C c)</argsstring>
        <name>isEof</name>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1583" column="13" bodyfile="src/testlib.h" bodystart="1583" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a8da048ae3bc25fe4bb2dcfceb53a90fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool isEoln</definition>
        <argsstring>(C c)</argsstring>
        <name>isEoln</name>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1588" column="13" bodyfile="src/testlib.h" bodystart="1588" bodyend="1590"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool isBlanks</definition>
        <argsstring>(C c)</argsstring>
        <name>isBlanks</name>
        <param>
          <type>C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1593" column="13" bodyfile="src/testlib.h" bodystart="1593" bodyend="1595"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a1a32c4d3bd87256731e67936766c65ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string trim</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>trim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="1597" column="20" bodyfile="src/testlib.h" bodystart="1597" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a2c40237203009ff06974b25b65030d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void disableFinalizeGuard</definition>
        <argsstring>()</argsstring>
        <name>disableFinalizeGuard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2817" column="6" bodyfile="src/testlib.h" bodystart="2817" bodyend="2819"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ac237ec9b60cb9035a69ee70750d69141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int resultExitCode</definition>
        <argsstring>(TResult r)</argsstring>
        <name>resultExitCode</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2900" column="5" bodyfile="src/testlib.h" bodystart="2900" bodyend="2922"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a9282a723c3cb0d8eaf1d904e975a5897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void halt</definition>
        <argsstring>(int exitCode)</argsstring>
        <name>halt</name>
        <param>
          <type>int</type>
          <declname>exitCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2969" column="15" bodyfile="src/testlib.h" bodystart="2969" bodyend="2981"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a0f4909d9c119861a2b537de888a97dbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool __testlib_shouldCheckDirt</definition>
        <argsstring>(TResult result)</argsstring>
        <name>__testlib_shouldCheckDirt</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2983" column="13" bodyfile="src/testlib.h" bodystart="2983" bodyend="2985"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a9b81d18af26b07af73c141609170196e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string __testlib_appendMessage</definition>
        <argsstring>(const std::string &amp;message, const std::string &amp;extra)</argsstring>
        <name>__testlib_appendMessage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="2987" column="20" bodyfile="src/testlib.h" bodystart="2987" bodyend="3016"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ad929668473e53c4a1d8f5bdcc16c8606" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string __testlib_toPrintableMessage</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>__testlib_toPrintableMessage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3018" column="20" bodyfile="src/testlib.h" bodystart="3018" bodyend="3044"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1af07535e85c227ed321c21a5791eb3830" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool equals</definition>
        <argsstring>(long long integer, const char *s)</argsstring>
        <name>equals</name>
        <param>
          <type>long long</type>
          <declname>integer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3563" column="20" bodyfile="src/testlib.h" bodystart="3563" bodyend="3595"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1af87e3a84c343ea4ef4f18d70a67cb2b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool equals</definition>
        <argsstring>(unsigned long long integer, const char *s)</argsstring>
        <name>equals</name>
        <param>
          <type>unsigned long long</type>
          <declname>integer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3600" column="20" bodyfile="src/testlib.h" bodystart="3600" bodyend="3623"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a5ca8cde41f5d5630556ca4666486b8e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double stringToDouble</definition>
        <argsstring>(InStream &amp;in, const char *buffer)</argsstring>
        <name>stringToDouble</name>
        <param>
          <type><ref refid="struct_in_stream" kindref="compound">InStream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3625" column="22" bodyfile="src/testlib.h" bodystart="3625" bodyend="3670"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1af97fbb8cbdcee55426a55b6417d6736b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double stringToDouble</definition>
        <argsstring>(InStream &amp;in, const std::string &amp;buffer)</argsstring>
        <name>stringToDouble</name>
        <param>
          <type><ref refid="struct_in_stream" kindref="compound">InStream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3672" column="22" bodyfile="src/testlib.h" bodystart="3672" bodyend="3677"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a4091a2f622284551aa0a5d535daf5104" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double stringToStrictDouble</definition>
        <argsstring>(InStream &amp;in, const char *buffer, int minAfterPointDigitCount, int maxAfterPointDigitCount)</argsstring>
        <name>stringToStrictDouble</name>
        <param>
          <type><ref refid="struct_in_stream" kindref="compound">InStream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minAfterPointDigitCount</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxAfterPointDigitCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3679" column="22" bodyfile="src/testlib.h" bodystart="3679" bodyend="3749"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a55363596b3ef4dc7067e8d7b42d30114" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double stringToStrictDouble</definition>
        <argsstring>(InStream &amp;in, const std::string &amp;buffer, int minAfterPointDigitCount, int maxAfterPointDigitCount)</argsstring>
        <name>stringToStrictDouble</name>
        <param>
          <type><ref refid="struct_in_stream" kindref="compound">InStream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minAfterPointDigitCount</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxAfterPointDigitCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3751" column="22" bodyfile="src/testlib.h" bodystart="3751" bodyend="3757"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ae300cdb53eb26093cd46a74f0ef33fb2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long long</type>
        <definition>static long long stringToLongLong</definition>
        <argsstring>(InStream &amp;in, const char *buffer)</argsstring>
        <name>stringToLongLong</name>
        <param>
          <type><ref refid="struct_in_stream" kindref="compound">InStream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3759" column="25" bodyfile="src/testlib.h" bodystart="3759" bodyend="3791"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ae6996840abcc02ae76b444f1353a286b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long long</type>
        <definition>static long long stringToLongLong</definition>
        <argsstring>(InStream &amp;in, const std::string &amp;buffer)</argsstring>
        <name>stringToLongLong</name>
        <param>
          <type><ref refid="struct_in_stream" kindref="compound">InStream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3793" column="25" bodyfile="src/testlib.h" bodystart="3793" bodyend="3798"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a31fad1c7459da32a4762bb3d2a8937c9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>static unsigned long long stringToUnsignedLongLong</definition>
        <argsstring>(InStream &amp;in, const char *buffer)</argsstring>
        <name>stringToUnsignedLongLong</name>
        <param>
          <type><ref refid="struct_in_stream" kindref="compound">InStream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3800" column="34" bodyfile="src/testlib.h" bodystart="3800" bodyend="3823"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1adc657cf7200c357b3f283965f298419c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long long</type>
        <definition>static long long stringToUnsignedLongLong</definition>
        <argsstring>(InStream &amp;in, const std::string &amp;buffer)</argsstring>
        <name>stringToUnsignedLongLong</name>
        <param>
          <type><ref refid="struct_in_stream" kindref="compound">InStream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="3825" column="25" bodyfile="src/testlib.h" bodystart="3825" bodyend="3830"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void quit</definition>
        <argsstring>(TResult result, const std::string &amp;msg)</argsstring>
        <name>quit</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4411" column="15" bodyfile="src/testlib.h" bodystart="4411" bodyend="4413"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1aed77b9d710f29f434fee76944e94202a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void quit</definition>
        <argsstring>(TResult result, const char *msg)</argsstring>
        <name>quit</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4415" column="15" bodyfile="src/testlib.h" bodystart="4415" bodyend="4417"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void __testlib_quitp</definition>
        <argsstring>(double points, const char *message)</argsstring>
        <name>__testlib_quitp</name>
        <param>
          <type>double</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4419" column="15" bodyfile="src/testlib.h" bodystart="4419" bodyend="4430"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a3951a3cfdcfee60d55d47a3faca1510f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void __testlib_quitp</definition>
        <argsstring>(int points, const char *message)</argsstring>
        <name>__testlib_quitp</name>
        <param>
          <type>int</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4432" column="15" bodyfile="src/testlib.h" bodystart="4432" bodyend="4443"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a96b765d3745447a9518991edeab211c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void quitp</definition>
        <argsstring>(float points, const std::string &amp;message=&quot;&quot;)</argsstring>
        <name>quitp</name>
        <param>
          <type>float</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4445" column="15" bodyfile="src/testlib.h" bodystart="4445" bodyend="4447"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1abd20355062b85779c882dfb19f3d9380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void quitp</definition>
        <argsstring>(double points, const std::string &amp;message=&quot;&quot;)</argsstring>
        <name>quitp</name>
        <param>
          <type>double</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4449" column="15" bodyfile="src/testlib.h" bodystart="4449" bodyend="4451"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a4c8b51476405ff163cc57a9e0ec10aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void quitp</definition>
        <argsstring>(long double points, const std::string &amp;message=&quot;&quot;)</argsstring>
        <name>quitp</name>
        <param>
          <type>long double</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4453" column="15" bodyfile="src/testlib.h" bodystart="4453" bodyend="4455"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a7c6fc64b2f0640dd5dd4b1f52210d669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void quitp</definition>
        <argsstring>(int points, const std::string &amp;message=&quot;&quot;)</argsstring>
        <name>quitp</name>
        <param>
          <type>int</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4457" column="15" bodyfile="src/testlib.h" bodystart="4457" bodyend="4459"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a9e512424bd789067763542439fb1083b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void quitpi</definition>
        <argsstring>(const std::string &amp;points_info, const std::string &amp;message=&quot;&quot;)</argsstring>
        <name>quitpi</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>points_info</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4461" column="15" bodyfile="src/testlib.h" bodystart="4461" bodyend="4468"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a73dbf5feb8712147dfa04c19c9d6b01d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void quitp</definition>
        <argsstring>(F points, const char *format,...)</argsstring>
        <name>quitp</name>
        <param>
          <type>F</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4474" column="15" bodyfile="src/testlib.h" bodystart="4474" bodyend="4477"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void quitf</definition>
        <argsstring>(TResult result, const char *format,...)</argsstring>
        <name>quitf</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4482" column="15" bodyfile="src/testlib.h" bodystart="4482" bodyend="4485"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ad7e7f24ac09509dc94581cf3b0a5dced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quitif</definition>
        <argsstring>(bool condition, TResult result, const char *format,...)</argsstring>
        <name>quitif</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4490" column="6" bodyfile="src/testlib.h" bodystart="4490" bodyend="4495"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a694d06929cd60de7f337b6e265b2365b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void __testlib_help</definition>
        <argsstring>()</argsstring>
        <name>__testlib_help</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4497" column="15" bodyfile="src/testlib.h" bodystart="4497" bodyend="4516"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a7d2af7f1c1f9d3eef63ce8345623a3fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __testlib_ensuresPreconditions</definition>
        <argsstring>()</argsstring>
        <name>__testlib_ensuresPreconditions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4518" column="13" bodyfile="src/testlib.h" bodystart="4518" bodyend="4536"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a327d15f1f5e7c8377faf74e620514689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getTestset</definition>
        <argsstring>()</argsstring>
        <name>getTestset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4540" column="13" bodyfile="src/testlib.h" bodystart="4540" bodyend="4542"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ae7fe33b331a1689d31d7d43eb94b125a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getGroup</definition>
        <argsstring>()</argsstring>
        <name>getGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4546" column="13" bodyfile="src/testlib.h" bodystart="4546" bodyend="4548"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1afc1294cd4b2f19d0080d6aba766f5e5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __testlib_set_testset_and_group</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>__testlib_set_testset_and_group</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4550" column="13" bodyfile="src/testlib.h" bodystart="4550" bodyend="4564"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registerGen</definition>
        <argsstring>(int argc, char *argv[], int randomGeneratorVersion)</argsstring>
        <name>registerGen</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>randomGeneratorVersion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4566" column="6" bodyfile="src/testlib.h" bodystart="4566" bodyend="4581"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a1fbb926756e2060c6e46bae99de4a781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registerGen</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>registerGen</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4605" column="6" bodyfile="src/testlib.h" bodystart="4605" bodyend="4611"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1aa87c56b5c1a61e59f3484778120a5797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setAppesModeEncoding</definition>
        <argsstring>(std::string appesModeEncoding)</argsstring>
        <name>setAppesModeEncoding</name>
        <param>
          <type>std::string</type>
          <declname>appesModeEncoding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4614" column="6" bodyfile="src/testlib.h" bodystart="4614" bodyend="4636"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a01331bd5d26dd46c4bc7b9295a036aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registerInteraction</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>registerInteraction</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4638" column="6" bodyfile="src/testlib.h" bodystart="4638" bodyend="4689"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a92d612e581676b81e9162f70839e88ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registerValidation</definition>
        <argsstring>()</argsstring>
        <name>registerValidation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4691" column="6" bodyfile="src/testlib.h" bodystart="4691" bodyend="4703"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1af37a8d5160de18491abf562b60790dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registerValidation</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>registerValidation</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4705" column="6" bodyfile="src/testlib.h" bodystart="4705" bodyend="4763"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a988dc33cd922d2f4748e4305743d03d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addFeature</definition>
        <argsstring>(const std::string &amp;feature)</argsstring>
        <name>addFeature</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>feature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4765" column="6" bodyfile="src/testlib.h" bodystart="4765" bodyend="4769"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1aca975e2860357cde841db9a2eb501e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void feature</definition>
        <argsstring>(const std::string &amp;feature)</argsstring>
        <name>feature</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>feature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4771" column="6" bodyfile="src/testlib.h" bodystart="4771" bodyend="4775"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1aef178d6340fe04d5d616ee2da19488b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registerTestlibCmd</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>registerTestlibCmd</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4812" column="6" bodyfile="src/testlib.h" bodystart="4812" bodyend="4874"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a58c2e7a2e44f8466c34b4500023cac6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registerTestlib</definition>
        <argsstring>(int argc,...)</argsstring>
        <name>registerTestlib</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4876" column="6" bodyfile="src/testlib.h" bodystart="4876" bodyend="4893"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1aeff5805e994356f5178339834f055824" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void __testlib_ensure</definition>
        <argsstring>(bool cond, const std::string &amp;msg)</argsstring>
        <name>__testlib_ensure</name>
        <param>
          <type>bool</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4895" column="20" bodyfile="src/testlib.h" bodystart="4895" bodyend="4898"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ac1b3bbf669c24a6cd6695a23e682c153" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void __testlib_ensure</definition>
        <argsstring>(bool cond, const char *msg)</argsstring>
        <name>__testlib_ensure</name>
        <param>
          <type>bool</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4903" column="20" bodyfile="src/testlib.h" bodystart="4903" bodyend="4906"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ensuref</definition>
        <argsstring>(bool cond, const char *format,...)</argsstring>
        <name>ensuref</name>
        <param>
          <type>bool</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4916" column="13" bodyfile="src/testlib.h" bodystart="4916" bodyend="4921"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a14fb24cad2f7e3d532a76f41ba4ba15b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setName</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>setName</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4930" column="6" bodyfile="src/testlib.h" bodystart="4930" bodyend="4933"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a892cac7bffad68bec03005d0a771c3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _RandomAccessIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shuffle</definition>
        <argsstring>(_RandomAccessIter __first, _RandomAccessIter __last)</argsstring>
        <name>shuffle</name>
        <param>
          <type>_RandomAccessIter</type>
          <declname>__first</declname>
        </param>
        <param>
          <type>_RandomAccessIter</type>
          <declname>__last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4943" column="6" bodyfile="src/testlib.h" bodystart="4943" bodyend="4947"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a2474f90782a9f77e45d81ae18d7c1ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _RandomAccessIter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void random_shuffle</definition>
        <argsstring>(_RandomAccessIter, _RandomAccessIter)</argsstring>
        <name>random_shuffle</name>
        <param>
          <type>_RandomAccessIter</type>
        </param>
        <param>
          <type>_RandomAccessIter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4954" column="6" bodyfile="src/testlib.h" bodystart="4954" bodyend="4956"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a84b949a61c3fa63ca17fcf0b2f9ad4f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rand</definition>
        <argsstring>() RAND_THROW_STATEMENT</argsstring>
        <name>rand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4971" column="5" bodyfile="src/testlib.h" bodystart="4971" bodyend="4977"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a7e6ebe263f2a877015210e0ac28c3e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srand</definition>
        <argsstring>(unsigned int seed) RAND_THROW_STATEMENT</argsstring>
        <name>srand</name>
        <param>
          <type>unsigned int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4989" column="6" bodyfile="src/testlib.h" bodystart="4989" bodyend="4995"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a7b5d06041e39daeafd603dd998ce02c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void startTest</definition>
        <argsstring>(int test)</argsstring>
        <name>startTest</name>
        <param>
          <type>int</type>
          <declname>test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="4997" column="6" bodyfile="src/testlib.h" bodystart="4997" bodyend="5001"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string compress</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>compress</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5006" column="20" bodyfile="src/testlib.h" bodystart="5006" bodyend="5008"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a99a404dab8181e5e96eb0a675082f75d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string englishEnding</definition>
        <argsstring>(int x)</argsstring>
        <name>englishEnding</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5013" column="20" bodyfile="src/testlib.h" bodystart="5013" bodyend="5024"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a639102617cba0cd4773c91f5eb4a1755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _ForwardIterator</type>
          </param>
          <param>
            <type>typename _Separator</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string join</definition>
        <argsstring>(_ForwardIterator first, _ForwardIterator last, _Separator separator)</argsstring>
        <name>join</name>
        <param>
          <type>_ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>_ForwardIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>_Separator</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5030" column="13" bodyfile="src/testlib.h" bodystart="5030" bodyend="5041"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a4d11cf2b81aaccdb03807cff7c1bae28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string join</definition>
        <argsstring>(_ForwardIterator first, _ForwardIterator last)</argsstring>
        <name>join</name>
        <param>
          <type>_ForwardIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>_ForwardIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5047" column="13" bodyfile="src/testlib.h" bodystart="5047" bodyend="5049"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a8c0f114f708064c2c01b47ab82cdf028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Collection</type>
          </param>
          <param>
            <type>typename _Separator</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string join</definition>
        <argsstring>(const _Collection &amp;collection, _Separator separator)</argsstring>
        <name>join</name>
        <param>
          <type>const _Collection &amp;</type>
          <declname>collection</declname>
        </param>
        <param>
          <type>_Separator</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5055" column="13" bodyfile="src/testlib.h" bodystart="5055" bodyend="5057"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a31e919f2108a1f317e66d345a23c4923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Collection</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string join</definition>
        <argsstring>(const _Collection &amp;collection)</argsstring>
        <name>join</name>
        <param>
          <type>const _Collection &amp;</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5063" column="13" bodyfile="src/testlib.h" bodystart="5063" bodyend="5065"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ad85d51a1b33f2422e08f3ca02dbd3127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; split</definition>
        <argsstring>(const std::string &amp;s, char separator)</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splits string s by character separator returning exactly k+1 items, where k is the number of separator occurrences. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5074" column="13" bodyfile="src/testlib.h" bodystart="5074" bodyend="5085"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a955ec7cfff0acb85ba9695bda2609499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; split</definition>
        <argsstring>(const std::string &amp;s, const std::string &amp;separators)</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splits string s by character separators returning exactly k+1 items, where k is the number of separator occurrences. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5094" column="13" bodyfile="src/testlib.h" bodystart="5094" bodyend="5112"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1aab9e80a2f4e4203b27b11c5880850d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; tokenize</definition>
        <argsstring>(const std::string &amp;s, char separator)</argsstring>
        <name>tokenize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splits string s by character separator returning non-empty items. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5120" column="13" bodyfile="src/testlib.h" bodystart="5120" bodyend="5133"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1af67ac6c551dc21d30494892a51a7fbb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; tokenize</definition>
        <argsstring>(const std::string &amp;s, const std::string &amp;separators)</argsstring>
        <name>tokenize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splits string s by character separators returning non-empty items. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5141" column="13" bodyfile="src/testlib.h" bodystart="5141" bodyend="5163"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void __testlib_expectedButFound</definition>
        <argsstring>(TResult result, std::string expected, std::string found, const char *prepend)</argsstring>
        <name>__testlib_expectedButFound</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prepend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5165" column="15" bodyfile="src/testlib.h" bodystart="5165" bodyend="5174"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a4a02f43815b2ec1d3963a3d487234d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void __testlib_expectedButFound</definition>
        <argsstring>(TResult result, double expected, double found, const char *prepend)</argsstring>
        <name>__testlib_expectedButFound</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>double</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>double</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prepend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5176" column="15" bodyfile="src/testlib.h" bodystart="5176" bodyend="5180"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a3775e4b9dc20c18e8b0d509a145d5d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void expectedButFound</definition>
        <argsstring>(TResult result, T expected, T found, const char *prependFormat=&quot;&quot;,...)</argsstring>
        <name>expectedButFound</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>T</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>T</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prependFormat</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5186" column="15" bodyfile="src/testlib.h" bodystart="5186" bodyend="5191"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1ace65de365c59bd5b3c271f84cf884bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void expectedButFound&lt; std::string &gt;</definition>
        <argsstring>(TResult result, std::string expected, std::string found, const char *prependFormat,...)</argsstring>
        <name>expectedButFound&lt; std::string &gt;</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prependFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5197" column="10" bodyfile="src/testlib.h" bodystart="5198" bodyend="5201"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a3cc2bbe22675e2d0b0bfaf8f61d005a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void expectedButFound&lt; double &gt;</definition>
        <argsstring>(TResult result, double expected, double found, const char *prependFormat,...)</argsstring>
        <name>expectedButFound&lt; double &gt;</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>double</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>double</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prependFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5207" column="10" bodyfile="src/testlib.h" bodystart="5207" bodyend="5212"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a8c5e10df2297d4ebe22eb580285ae5de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void expectedButFound&lt; const char * &gt;</definition>
        <argsstring>(TResult result, const char *expected, const char *found, const char *prependFormat,...)</argsstring>
        <name>expectedButFound&lt; const char * &gt;</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prependFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5218" column="10" bodyfile="src/testlib.h" bodystart="5219" bodyend="5223"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a5f326691d44051de660eb6f3f25400f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void expectedButFound&lt; float &gt;</definition>
        <argsstring>(TResult result, float expected, float found, const char *prependFormat,...)</argsstring>
        <name>expectedButFound&lt; float &gt;</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>float</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>float</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prependFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5229" column="10" bodyfile="src/testlib.h" bodystart="5229" bodyend="5232"/>
      </memberdef>
      <memberdef kind="function" id="testlib_8h_1a1c7f66f9e3c4f693663ffc534807ea02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref> void</type>
        <definition>NORETURN void expectedButFound&lt; long double &gt;</definition>
        <argsstring>(TResult result, long double expected, long double found, const char *prependFormat,...)</argsstring>
        <name>expectedButFound&lt; long double &gt;</name>
        <param>
          <type><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prependFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/testlib.h" line="5238" column="10" bodyfile="src/testlib.h" bodystart="5239" bodyend="5242"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>strictly<sp/>recommended<sp/>to<sp/>include<sp/>&quot;testlib.h&quot;<sp/>before<sp/>any<sp/>other<sp/>include</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>in<sp/>your<sp/>code.<sp/>In<sp/>this<sp/>case<sp/>testlib<sp/>overrides<sp/>compiler<sp/>specific<sp/>&quot;random()&quot;.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>can&apos;t<sp/>compile<sp/>your<sp/>code<sp/>and<sp/>compiler<sp/>outputs<sp/>something<sp/>about</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>ambiguous<sp/>call<sp/>of<sp/>&quot;random_shuffle&quot;,<sp/>&quot;rand&quot;<sp/>or<sp/>&quot;srand&quot;<sp/>it<sp/>means<sp/>that</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>you<sp/>shouldn&apos;t<sp/>use<sp/>them.<sp/>Use<sp/>&quot;shuffle&quot;,<sp/>and<sp/>&quot;rnd.next()&quot;<sp/>instead<sp/>of<sp/>them</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>because<sp/>these<sp/>calls<sp/>produce<sp/>stable<sp/>result<sp/>for<sp/>any<sp/>C++<sp/>compiler.<sp/>Read</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>sample<sp/>generator<sp/>sources<sp/>for<sp/>clarification.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Please<sp/>read<sp/>the<sp/>documentation<sp/>for<sp/>class<sp/>&quot;random_t&quot;<sp/>and<sp/>use<sp/>&quot;rnd&quot;<sp/>instance<sp/>in</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>generators.<sp/>Probably,<sp/>these<sp/>sample<sp/>calls<sp/>will<sp/>be<sp/>useful<sp/>for<sp/>you:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rnd.next();<sp/>rnd.next(100);<sp/>rnd.next(1,<sp/>2);</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rnd.next(3.14);<sp/>rnd.next(&quot;[a-z]{1,100}&quot;).</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Also<sp/>read<sp/>about<sp/>wnext()<sp/>to<sp/>generate<sp/>off-center<sp/>random<sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>See<sp/>https://github.com/MikeMirzayanov/testlib/<sp/>to<sp/>get<sp/>latest<sp/>version<sp/>or<sp/>bug<sp/>tracker.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_TESTLIB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_TESTLIB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2005-2024</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="testlib_8h_1a1c6d5de492ac61ad29aec7aa9a436bbf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERSION<sp/>&quot;0.9.42-SNAPSHOT&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>Mike<sp/>Mirzayanov</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>This<sp/>material<sp/>is<sp/>provided<sp/>&quot;as<sp/>is&quot;,<sp/>with<sp/>absolutely<sp/>no<sp/>warranty<sp/>expressed</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>or<sp/>implied.<sp/>Any<sp/>use<sp/>is<sp/>at<sp/>your<sp/>own<sp/>risk.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>use<sp/>or<sp/>copy<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose<sp/>is<sp/>hereby<sp/>granted</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>without<sp/>fee,<sp/>provided<sp/>the<sp/>above<sp/>notices<sp/>are<sp/>retained<sp/>on<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>modify<sp/>the<sp/>code<sp/>and<sp/>to<sp/>distribute<sp/>modified<sp/>code<sp/>is<sp/>granted,</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>provided<sp/>the<sp/>above<sp/>notices<sp/>are<sp/>retained,<sp/>and<sp/>a<sp/>notice<sp/>that<sp/>the<sp/>code<sp/>was</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>modified<sp/>is<sp/>included<sp/>with<sp/>the<sp/>above<sp/>copyright<sp/>notice.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>This<sp/>file<sp/>contains<sp/>testlib<sp/>library<sp/>for<sp/>C++.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Check,<sp/>using<sp/>testlib<sp/>running<sp/>format:</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>check.exe<sp/>&lt;Input_File&gt;<sp/>&lt;Output_File&gt;<sp/>&lt;Answer_File&gt;<sp/>[&lt;Result_File&gt;<sp/>[-appes]],</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/>If<sp/>result<sp/>file<sp/>is<sp/>specified<sp/>it<sp/>will<sp/>contain<sp/>results.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Validator,<sp/>using<sp/>testlib<sp/>running<sp/>format:</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>validator.exe<sp/>&lt;<sp/>input.txt,</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/>It<sp/>will<sp/>return<sp/>non-zero<sp/>exit<sp/>code<sp/>and<sp/>writes<sp/>message<sp/>to<sp/>standard<sp/>output.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Generator,<sp/>using<sp/>testlib<sp/>running<sp/>format:</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>gen.exe<sp/>[parameter-1]<sp/>[parameter-2]<sp/>[...<sp/>paramerter-n]</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>can<sp/>write<sp/>generated<sp/>test(s)<sp/>into<sp/>standard<sp/>output<sp/>or<sp/>into<sp/>the<sp/>file(s).</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Interactor,<sp/>using<sp/>testlib<sp/>running<sp/>format:</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>interactor.exe<sp/>&lt;Input_File&gt;<sp/>&lt;Output_File&gt;<sp/>[&lt;Answer_File&gt;<sp/>[&lt;Result_File&gt;<sp/>[-appes]]],</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Reads<sp/>test<sp/>from<sp/>inf<sp/>(mapped<sp/>to<sp/>args[1]),<sp/>writes<sp/>result<sp/>to<sp/>tout<sp/>(mapped<sp/>to<sp/>argv[2],</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/>can<sp/>be<sp/>judged<sp/>by<sp/>checker<sp/>later),<sp/>reads<sp/>program<sp/>output<sp/>from<sp/>ouf<sp/>(mapped<sp/>to<sp/>stdin),</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/>writes<sp/>output<sp/>to<sp/>program<sp/>via<sp/>stdout<sp/>(use<sp/>cout,<sp/>printf,<sp/>etc).</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="testlib_8h_1aca3ccf9230a0e9c7f28e21d77f26e74f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="testlib_8h_1aca3ccf9230a0e9c7f28e21d77f26e74f" kindref="member">latestFeatures</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>ConstantBoundsLog,<sp/>VariablesLog<sp/>to<sp/>validator<sp/>testOverviewLogFile&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>setAppesModeEncoding<sp/>to<sp/>change<sp/>xml<sp/>encoding<sp/>from<sp/>windows-1251<sp/>to<sp/>other&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rnd.any/wany<sp/>use<sp/>distance/advance<sp/>instead<sp/>of<sp/>-/+:<sp/>now<sp/>they<sp/>support<sp/>sets/multisets&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>syntax<sp/>`int<sp/>t<sp/>=<sp/>inf.readInt(1,<sp/>3,<sp/>\&quot;~t\&quot;);`<sp/>to<sp/>skip<sp/>the<sp/>lower<sp/>bound<sp/>check.<sp/>Tildes<sp/>can<sp/>be<sp/>used<sp/>on<sp/>either<sp/>side<sp/>or<sp/>both:<sp/>~t,<sp/>t~,<sp/>~t~&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Supported<sp/>EJUDGE<sp/>support<sp/>in<sp/>registerTestlibCmd&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Supported<sp/>&apos;--testMarkupFileName<sp/>fn&apos;<sp/>and<sp/>&apos;--testCase<sp/>tc/--testCaseFileName<sp/>fn&apos;<sp/>for<sp/>validators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>opt<sp/>defaults<sp/>via<sp/>opt&lt;T&gt;(key/index,<sp/>default_val);<sp/>check<sp/>unused<sp/>opts<sp/>when<sp/>using<sp/>has_opt<sp/>or<sp/>default<sp/>opt<sp/>(turn<sp/>off<sp/>this<sp/>check<sp/>with<sp/>suppressEnsureNoUnusedOpt()).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;For<sp/>checker<sp/>added<sp/>--group<sp/>and<sp/>--testset<sp/>command<sp/>line<sp/>params<sp/>(like<sp/>for<sp/>validator),<sp/>use<sp/>checker.group()<sp/>or<sp/>checker.testset()<sp/>to<sp/>get<sp/>values&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>quitpi(points_info,<sp/>message)<sp/>function<sp/>to<sp/>return<sp/>with<sp/>_points<sp/>exit<sp/>code<sp/>7<sp/>and<sp/>given<sp/>points_info&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rnd.partition(size,<sp/>sum[,<sp/>min_part=1])<sp/>returns<sp/>random<sp/>(unsorted)<sp/>partition<sp/>which<sp/>is<sp/>a<sp/>representation<sp/>of<sp/>the<sp/>given<sp/>`sum`<sp/>as<sp/>a<sp/>sum<sp/>of<sp/>`size`<sp/>positive<sp/>integers<sp/>(or<sp/>&gt;=min_part<sp/>if<sp/>specified)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rnd.distinct(size,<sp/>n)<sp/>and<sp/>rnd.distinct(size,<sp/>from,<sp/>to)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;opt&lt;bool&gt;(\&quot;some_missing_key\&quot;)<sp/>returns<sp/>false<sp/>now&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;has_opt(key)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Abort<sp/>validator<sp/>on<sp/>validator.testset()/validator.group()<sp/>if<sp/>registered<sp/>without<sp/>using<sp/>command<sp/>line&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Print<sp/>integer<sp/>range<sp/>violations<sp/>in<sp/>a<sp/>human<sp/>readable<sp/>way<sp/>like<sp/>`violates<sp/>the<sp/>range<sp/>[1,<sp/>10^9]`&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Opts<sp/>supported:<sp/>use<sp/>them<sp/>like<sp/>n<sp/>=<sp/>opt&lt;int&gt;(\&quot;n\&quot;),<sp/>in<sp/>a<sp/>command<sp/>line<sp/>you<sp/>can<sp/>use<sp/>an<sp/>exponential<sp/>notation&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Reformatted&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>setTestCase(i)<sp/>or<sp/>unsetTestCase()<sp/>to<sp/>support<sp/>test<sp/>cases<sp/>(you<sp/>can<sp/>use<sp/>it<sp/>in<sp/>any<sp/>type<sp/>of<sp/>program:<sp/>generator,<sp/>interactor,<sp/>validator<sp/>or<sp/>checker)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>issue<sp/>#87:<sp/>readStrictDouble<sp/>accepts<sp/>\&quot;-0.00\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>issue<sp/>#83:<sp/>added<sp/>InStream::quitif(condition,<sp/>...)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>issue<sp/>#79:<sp/>fixed<sp/>missed<sp/>guard<sp/>against<sp/>repeated<sp/>header<sp/>include&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>issue<sp/>#80:<sp/>fixed<sp/>UB<sp/>in<sp/>case<sp/>of<sp/>huge<sp/>quitf<sp/>message&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>issue<sp/>#84:<sp/>added<sp/>readXs(size,<sp/>indexBase<sp/>=<sp/>1)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>stringstream<sp/>repeated<sp/>usage<sp/>issue&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>compilation<sp/>in<sp/>g++<sp/>(for<sp/>std=c++03)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Batch<sp/>of<sp/>println<sp/>functions<sp/>(support<sp/>collections,<sp/>iterator<sp/>ranges)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>rnd.perm(size,<sp/>first<sp/>=<sp/>0)<sp/>to<sp/>generate<sp/>a<sp/>`first`-indexed<sp/>permutation&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Allow<sp/>any<sp/>whitespace<sp/>in<sp/>readInts-like<sp/>functions<sp/>for<sp/>non-validators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ignore<sp/>4+<sp/>command<sp/>line<sp/>arguments<sp/>ifdef<sp/>EJUDGE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Speed<sp/>up<sp/>of<sp/>vtos&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Show<sp/>line<sp/>number<sp/>in<sp/>validators<sp/>in<sp/>case<sp/>of<sp/>incorrect<sp/>format&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Truncate<sp/>huge<sp/>checker/validator/interactor<sp/>message&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>issue<sp/>with<sp/>readTokenTo<sp/>of<sp/>very<sp/>long<sp/>tokens,<sp/>now<sp/>aborts<sp/>with<sp/>_pe/_fail<sp/>depending<sp/>of<sp/>a<sp/>stream<sp/>type&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>InStream::ensure/ensuref<sp/>checking<sp/>a<sp/>condition,<sp/>returns<sp/>wa/fail<sp/>depending<sp/>of<sp/>a<sp/>stream<sp/>type&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>compilation<sp/>in<sp/>VS<sp/>2015+&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>space-separated<sp/>read<sp/>functions:<sp/>readWords/readTokens,<sp/>multilines<sp/>read<sp/>functions:<sp/>readStrings/readLines&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>space-separated<sp/>read<sp/>functions:<sp/>readInts/readIntegers/readLongs/readUnsignedLongs/readDoubles/readReals/readStrictDoubles/readStrictReals&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>split/tokenize<sp/>functions<sp/>to<sp/>separate<sp/>string<sp/>by<sp/>given<sp/>char&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>InStream::readUnsignedLong<sp/>and<sp/>InStream::readLong<sp/>with<sp/>unsigned<sp/>long<sp/>long<sp/>parameters&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Supported<sp/>--testOverviewLogFileName<sp/>for<sp/>validator:<sp/>bounds<sp/>hits<sp/>+<sp/>features&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>UB<sp/>(sequence<sp/>points)<sp/>in<sp/>random_t&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;POINTS_EXIT_CODE<sp/>returned<sp/>back<sp/>to<sp/>7<sp/>(instead<sp/>of<sp/>0)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Removed<sp/>disable<sp/>buffers<sp/>for<sp/>interactive<sp/>problems,<sp/>because<sp/>it<sp/>works<sp/>unexpectedly<sp/>in<sp/>wine&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;InStream<sp/>over<sp/>string:<sp/>constructor<sp/>of<sp/>InStream<sp/>from<sp/>base<sp/>InStream<sp/>to<sp/>inherit<sp/>policies<sp/>and<sp/>std::string&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>expectedButFound<sp/>quit<sp/>function,<sp/>examples:<sp/>expectedButFound(_wa,<sp/>10,<sp/>20),<sp/>expectedButFound(_fail,<sp/>ja,<sp/>pa,<sp/>\&quot;[n=%d,m=%d]\&quot;,<sp/>n,<sp/>m)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>incorrect<sp/>interval<sp/>parsing<sp/>in<sp/>patterns&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>registerGen(argc,<sp/>argv,<sp/>1)<sp/>to<sp/>develop<sp/>new<sp/>generator,<sp/>use<sp/>registerGen(argc,<sp/>argv,<sp/>0)<sp/>to<sp/>compile<sp/>old<sp/>generators<sp/>(originally<sp/>created<sp/>for<sp/>testlib<sp/>under<sp/>0.8.7)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>disableFinalizeGuard()<sp/>to<sp/>switch<sp/>off<sp/>finalization<sp/>checkings&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>join()<sp/>functions<sp/>to<sp/>format<sp/>a<sp/>range<sp/>of<sp/>items<sp/>as<sp/>a<sp/>single<sp/>string<sp/>(separated<sp/>by<sp/>spaces<sp/>or<sp/>other<sp/>separators)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>-DENABLE_UNEXPECTED_EOF<sp/>to<sp/>enable<sp/>special<sp/>exit<sp/>code<sp/>(by<sp/>default,<sp/>8)<sp/>in<sp/>case<sp/>of<sp/>unexpected<sp/>eof.<sp/>It<sp/>is<sp/>good<sp/>idea<sp/>to<sp/>use<sp/>it<sp/>in<sp/>interactors&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>-DUSE_RND_AS_BEFORE_087<sp/>to<sp/>compile<sp/>in<sp/>compatibility<sp/>mode<sp/>with<sp/>random<sp/>behavior<sp/>of<sp/>versions<sp/>before<sp/>0.8.7&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>bug<sp/>with<sp/>nan<sp/>in<sp/>stringToDouble&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>issue<sp/>around<sp/>overloads<sp/>for<sp/>size_t<sp/>on<sp/>x64&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>attribute<sp/>&apos;points&apos;<sp/>to<sp/>the<sp/>XML<sp/>output<sp/>in<sp/>case<sp/>of<sp/>result=_points&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Exit<sp/>codes<sp/>can<sp/>be<sp/>customized<sp/>via<sp/>macros,<sp/>e.g.<sp/>-DPE_EXIT_CODE=14&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>InStream<sp/>function<sp/>readWordTo/readTokenTo/readStringTo/readLineTo<sp/>for<sp/>faster<sp/>reading&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>global<sp/>functions:<sp/>format(),<sp/>englishEnding(),<sp/>upperCase(),<sp/>lowerCase(),<sp/>compress()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Manual<sp/>buffer<sp/>in<sp/>InStreams,<sp/>some<sp/>IO<sp/>speed<sp/>improvements&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>quitif(bool,<sp/>const<sp/>char*<sp/>pattern,<sp/>...)<sp/>which<sp/>delegates<sp/>to<sp/>quitf()<sp/>in<sp/>case<sp/>of<sp/>first<sp/>argument<sp/>is<sp/>true&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Introduced<sp/>guard<sp/>against<sp/>missed<sp/>quitf()<sp/>in<sp/>checker<sp/>or<sp/>readEof()<sp/>in<sp/>validators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Supported<sp/>readStrictReal/readStrictDouble<sp/>-<sp/>to<sp/>use<sp/>in<sp/>validators<sp/>to<sp/>check<sp/>strictly<sp/>float<sp/>numbers&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Supported<sp/>registerInteraction(argc,<sp/>argv)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Print<sp/>checker<sp/>message<sp/>to<sp/>the<sp/>stderr<sp/>instead<sp/>of<sp/>stdout&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Supported<sp/>TResult<sp/>_points<sp/>to<sp/>output<sp/>calculated<sp/>score,<sp/>use<sp/>quitp(...)<sp/>functions&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>to<sp/>be<sp/>compilable<sp/>on<sp/>Mac&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PC_BASE_EXIT_CODE=50<sp/>in<sp/>case<sp/>of<sp/>defined<sp/>TESTSYS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>issues<sp/>19-21,<sp/>added<sp/>__attribute__<sp/>format<sp/>printf&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Some<sp/>bug<sp/>fixes&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ouf.readInt(1,<sp/>100)<sp/>and<sp/>similar<sp/>calls<sp/>return<sp/>WA&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Modified<sp/>random_t<sp/>to<sp/>avoid<sp/>integer<sp/>overflow&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Truncated<sp/>checker<sp/>output<sp/>[patch<sp/>by<sp/>Stepan<sp/>Gatilov]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Renamed<sp/>class<sp/>random<sp/>-&gt;<sp/>class<sp/>random_t&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Supported<sp/>name<sp/>parameter<sp/>for<sp/>read-and-validation<sp/>methods,<sp/>like<sp/>readInt(1,<sp/>2,<sp/>\&quot;n\&quot;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>bug<sp/>in<sp/>readDouble()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Improved<sp/>ensuref(),<sp/>fixed<sp/>nextLine<sp/>to<sp/>work<sp/>in<sp/>case<sp/>of<sp/>EOF,<sp/>added<sp/>startTest()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Supported<sp/>\&quot;partially<sp/>correct\&quot;,<sp/>example:<sp/>quitf(_pc(13),<sp/>\&quot;result=%d\&quot;,<sp/>result)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>shuffle(begin,<sp/>end),<sp/>use<sp/>it<sp/>instead<sp/>of<sp/>random_shuffle(begin,<sp/>end)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>readLine(const<sp/>string&amp;<sp/>ptrn),<sp/>fixed<sp/>the<sp/>logic<sp/>of<sp/>readLine()<sp/>in<sp/>the<sp/>validation<sp/>mode&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Package<sp/>extended<sp/>with<sp/>samples<sp/>of<sp/>generators<sp/>and<sp/>validators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Written<sp/>the<sp/>documentation<sp/>for<sp/>classes<sp/>and<sp/>public<sp/>methods<sp/>in<sp/>testlib.h&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Implemented<sp/>random<sp/>routine<sp/>to<sp/>support<sp/>generators,<sp/>use<sp/>registerGen()<sp/>to<sp/>switch<sp/>it<sp/>on&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Implemented<sp/>strict<sp/>mode<sp/>to<sp/>validate<sp/>tests,<sp/>use<sp/>registerValidation()<sp/>to<sp/>switch<sp/>it<sp/>on&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Now<sp/>ncmp.cpp<sp/>and<sp/>wcmp.cpp<sp/>are<sp/>return<sp/>WA<sp/>if<sp/>answer<sp/>is<sp/>suffix<sp/>or<sp/>prefix<sp/>of<sp/>the<sp/>output&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>InStream::readLong()<sp/>and<sp/>removed<sp/>InStream::readLongint()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Now<sp/>no<sp/>footer<sp/>added<sp/>to<sp/>each<sp/>report<sp/>by<sp/>default<sp/>(use<sp/>directive<sp/>FOOTER<sp/>to<sp/>switch<sp/>on)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Now<sp/>every<sp/>checker<sp/>has<sp/>a<sp/>name,<sp/>use<sp/>setName(const<sp/>char*<sp/>format,<sp/>...)<sp/>to<sp/>set<sp/>it&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Now<sp/>it<sp/>is<sp/>compatible<sp/>with<sp/>TTS<sp/>(by<sp/>Kittens<sp/>Computing)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>\&apos;ensure(condition,<sp/>message<sp/>=<sp/>\&quot;\&quot;)\&apos;<sp/>feature,<sp/>it<sp/>works<sp/>like<sp/>assert()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fixed<sp/>compatibility<sp/>with<sp/>MS<sp/>C++<sp/>7.1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>footer<sp/>with<sp/>exit<sp/>code<sp/>information&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>compatibility<sp/>with<sp/>EJUDGE<sp/>(compile<sp/>with<sp/>EJUDGE<sp/>directive)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>compatibility<sp/>with<sp/>Contester<sp/>(compile<sp/>with<sp/>CONTESTER<sp/>directive)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_SECURE_NO_DEPRECATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_NO_VA_START_VALIDATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Overrides<sp/>random()<sp/>for<sp/>Borland<sp/>C++.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="testlib_8h_1aaac7e8b42546e8a2fd07b71fd5b12ba0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>random<sp/>__random_deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TESTLIB_THROW_EXIT_EXCEPTION_INSTEAD_OF_EXIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(_WIN32<sp/>||<sp/>__WIN32__<sp/>||<sp/>__WIN32<sp/>||<sp/>_WIN64<sp/>||<sp/>__WIN64__<sp/>||<sp/>__WIN64<sp/>||<sp/>WINNT<sp/>||<sp/>__WINNT<sp/>||<sp/>__WINNT__<sp/>||<sp/>__CYGWIN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>!defined(_MSC_VER)<sp/>||<sp/>_MSC_VER<sp/>&gt;<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>NOMINMAX<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>WORD<sp/>unsigned<sp/>short</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ON_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4127<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4146<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4458<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>WORD<sp/>unsigned<sp/>short</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(FOR_WINDOWS)<sp/>&amp;&amp;<sp/>defined(FOR_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>Only<sp/>one<sp/>target<sp/>system<sp/>is<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LLONG_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="testlib_8h_1af17a13b2ae0e9c24c020ac1f044f30c2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LLONG_MIN<sp/><sp/><sp/>(-9223372036854775807LL<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ULLONG_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="testlib_8h_1aa1dd7166a75b73ad62b111ae6fc17c59" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ULLONG_MAX<sp/><sp/><sp/>(18446744073709551615)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LF<sp/>((char)10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="testlib_8h_1a876ce77f3c672c7162658151e648389e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR<sp/>((char)13)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="testlib_8h_1ad58a1fbfc85c7e4790fc55e654f50221" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TAB<sp/>((char)9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="testlib_8h_1a5ff6e798033f03e74730e99f01936f84" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPACE<sp/>((char)&apos;<sp/>&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EOFC<sp/>(255)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OK_EXIT_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>CONTESTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>OK_EXIT_CODE<sp/>0xAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="testlib_8h_1a809c8f4d2bf12a53a01098f336b97598" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>OK_EXIT_CODE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WA_EXIT_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>EJUDGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>WA_EXIT_CODE<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>elif<sp/>defined(CONTESTER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>WA_EXIT_CODE<sp/>0xAB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="testlib_8h_1a9407aadd1d7b6a24b40a94be0e1b5e6c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>WA_EXIT_CODE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PE_EXIT_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>EJUDGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PE_EXIT_CODE<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>elif<sp/>defined(CONTESTER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PE_EXIT_CODE<sp/>0xAA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="testlib_8h_1acd99fac8764b4f8513d0d78aa80878a5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PE_EXIT_CODE<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FAIL_EXIT_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>EJUDGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>FAIL_EXIT_CODE<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>elif<sp/>defined(CONTESTER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>FAIL_EXIT_CODE<sp/>0xA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="testlib_8h_1afac612f10342c3ccbfc7f30ae563184b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>FAIL_EXIT_CODE<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DIRT_EXIT_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>EJUDGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>DIRT_EXIT_CODE<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="testlib_8h_1ac9085792031f49686fd06d9560164d3b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>DIRT_EXIT_CODE<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>POINTS_EXIT_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="testlib_8h_1a58429ce36ac0b67fb7889455174c7e8a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>POINTS_EXIT_CODE<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UNEXPECTED_EOF_EXIT_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="testlib_8h_1a30fb6330f5fcaf65c9347f50df26222d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>UNEXPECTED_EOF_EXIT_CODE<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PC_BASE_EXIT_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>TESTSYS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PC_BASE_EXIT_CODE<sp/>50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="testlib_8h_1ac0c3e3c9771bdfbbcbd70392bd74c03a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PC_BASE_EXIT_CODE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>__TESTLIB_STATIC_ASSERT(condition)<sp/>typedef<sp/>void*<sp/>__testlib_static_assert_type[(condition)<sp/>?<sp/>1<sp/>:<sp/>-1]<sp/>__attribute__((unused))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="testlib_8h_1a67a1b89efefde69b271ec10086a493fc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>__TESTLIB_STATIC_ASSERT(condition)<sp/>typedef<sp/>void*<sp/>__testlib_static_assert_type[(condition)<sp/>?<sp/>1<sp/>:<sp/>-1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ON_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I64<sp/>&quot;%I64d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>U64<sp/>&quot;%I64u&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="testlib_8h_1a29ae4e28b586fcb6dcd1a4a0a69b9a49" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I64<sp/>&quot;%lld&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="testlib_8h_1a24c42244bf61006967bf37001c14d2bf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>U64<sp/>&quot;%llu&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>NORETURN<sp/>__declspec(noreturn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>NORETURN<sp/>__attribute__<sp/>((noreturn))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>NORETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__testlib_format_buffer[16777216];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__testlib_format_buffer_usage_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_TO_RESULT(fmt,<sp/>cstr,<sp/>result)<sp/><sp/>std::string<sp/>result;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__testlib_format_buffer_usage_count<sp/>!=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(&quot;FMT_TO_RESULT::__testlib_format_buffer_usage_count<sp/>!=<sp/>0&quot;);<sp/>\</highlight></codeline>
<codeline lineno="324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_format_buffer_usage_count++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>ap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(ap,<sp/>fmt);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsnprintf(__testlib_format_buffer,<sp/>sizeof(__testlib_format_buffer),<sp/>cstr,<sp/>ap);<sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(ap);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_format_buffer[sizeof(__testlib_format_buffer)<sp/>-<sp/>1]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>std::string(__testlib_format_buffer);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_format_buffer_usage_count--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf" kindref="member">__TESTLIB_LONGLONG_MAX</ref><sp/>=<sp/>9223372036854775807LL;</highlight></codeline>
<codeline lineno="334" refid="testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0" kindref="member">__TESTLIB_MAX_TEST_CASE</ref><sp/>=<sp/>1073741823;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f" kindref="member">__testlib_exitCode</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307" kindref="member">__testlib_hasTestCase</ref>;</highlight></codeline>
<codeline lineno="339" refid="testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426" kindref="member">__testlib_testCase</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ad093584ea7bc2579d8d49c05d4b95347" kindref="member">setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testCase);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="testlib_8h_1a0fb214ced4215bfbfa6eba1ab4635721" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a0fb214ced4215bfbfa6eba1ab4635721" kindref="member">unsetTestCase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307" kindref="member">__testlib_hasTestCase</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426" kindref="member">__testlib_testCase</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__testlib_fail(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>__testlib_abs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;<sp/>0<sp/>?<sp/>x<sp/>:<sp/>-x;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>__testlib_min(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&lt;<sp/>b<sp/>?<sp/>a<sp/>:<sp/>b;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>__testlib_max(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&gt;<sp/>b<sp/>?<sp/>a<sp/>:<sp/>b;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>__testlib_crop(T<sp/>value,<sp/>T<sp/>a,<sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_min(__testlib_max(value,<sp/>a),<sp/>--b);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>__testlib_crop(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>__testlib_min(__testlib_max(value,<sp/>a),<sp/>b);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;=<sp/>b)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>std::nexttoward(b,<sp/>a);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__testlib_prelimIsNaN(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ra<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((ra<sp/>!=<sp/>ra)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>((ra<sp/>==<sp/>ra)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>((1.0<sp/>&gt;<sp/>ra)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>((1.0<sp/>&lt;<sp/>ra)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::_isnan(ra);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>removeDoubleTrailingZeroes(std::string<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!value.empty()<sp/>&amp;&amp;<sp/>value[value.length()<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>value.find(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>value.substr(0,<sp/>value.length()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value.empty()<sp/>&amp;&amp;<sp/>value[value.length()<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>+<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="testlib_8h_1a3e8b5e1528a28d4832cb11dff8ad5edb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="testlib_8h_1a3e8b5e1528a28d4832cb11dff8ad5edb" kindref="member">upperCase</ref>(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>s[i]<sp/>&amp;&amp;<sp/>s[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>char(s[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="testlib_8h_1a2d0670a860a887c1de821de0550c0a32" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="testlib_8h_1a2d0670a860a887c1de821de0550c0a32" kindref="member">lowerCase</ref>(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>s[i]<sp/>&amp;&amp;<sp/>s[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>char(s[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>1,<sp/>2)))</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(fmt,<sp/>fmt,<sp/>result);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="testlib_8h_1a133d0fb6f1e08d9483f8aa9a8e3c6f38" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(fmt,<sp/>fmt.c_str(),<sp/>result);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>__testlib_part(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__testlib_isNaN(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a67a1b89efefde69b271ec10086a493fc" kindref="member">__TESTLIB_STATIC_ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ra<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>llr1,<sp/>llr2;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>&amp;llr1,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>&amp;ra,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>-ra;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>&amp;llr2,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>&amp;ra,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>llnan<sp/>=<sp/>0xFFF8000000000000LL;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_prelimIsNaN(r)<sp/>||<sp/>llnan<sp/>==<sp/>llr1<sp/>||<sp/>llnan<sp/>==<sp/>llr2;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>__testlib_nan()<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a67a1b89efefde69b271ec10086a493fc" kindref="member">__TESTLIB_STATIC_ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>llnan<sp/>=<sp/>0xFFF8000000000000LL;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nan;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(&amp;nan,<sp/>&amp;llnan,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NAN;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__testlib_isInfinite(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ra<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ra<sp/>&gt;<sp/>1E300<sp/>||<sp/>ra<sp/>&lt;<sp/>-1E300);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="testlib_8h_1afe9a738a208c2ff953b27fea24007d20" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1afe9a738a208c2ff953b27fea24007d20" kindref="member">doubleCompare</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MAX_DOUBLE_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>MAX_DOUBLE_ERROR<sp/>+=<sp/>1E-15;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__testlib_isNaN(expected))<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_isNaN(result);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__testlib_isInfinite(expected))<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>__testlib_isInfinite(result);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>__testlib_isInfinite(result);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__testlib_isNaN(result)<sp/>||<sp/>__testlib_isInfinite(result))<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__testlib_abs(result<sp/>-<sp/>expected)<sp/>&lt;=<sp/>MAX_DOUBLE_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv<sp/>=<sp/>__testlib_min(expected<sp/>*<sp/>(1.0<sp/>-<sp/>MAX_DOUBLE_ERROR),</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>*<sp/>(1.0<sp/>+<sp/>MAX_DOUBLE_ERROR));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv<sp/>=<sp/>__testlib_max(expected<sp/>*<sp/>(1.0<sp/>-<sp/>MAX_DOUBLE_ERROR),</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>*<sp/>(1.0<sp/>+<sp/>MAX_DOUBLE_ERROR));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>&gt;=<sp/>minv<sp/>&amp;&amp;<sp/>result<sp/>&lt;=<sp/>maxv;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82" kindref="member">doubleDelta</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>absolute<sp/>=<sp/>__testlib_abs(result<sp/>-<sp/>expected);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__testlib_abs(expected)<sp/>&gt;<sp/>1E-9)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>relative<sp/>=<sp/>__testlib_abs(absolute<sp/>/<sp/>expected);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_min(absolute,<sp/>relative);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absolute;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__testlib_set_binary(std::FILE<sp/>*file)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ON_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_O_BINARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stdin<sp/>==<sp/>file)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>STDIN_FILENO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(_setmode(STDIN_FILENO,<sp/>_O_BINARY));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(_setmode(_fileno(stdin),<sp/>_O_BINARY));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stdout<sp/>==<sp/>file)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>STDOUT_FILENO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(_setmode(STDOUT_FILENO,<sp/>_O_BINARY));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(_setmode(_fileno(stdout),<sp/>_O_BINARY));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stderr<sp/>==<sp/>file)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>STDERR_FILENO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(_setmode(STDERR_FILENO,<sp/>_O_BINARY));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(_setmode(_fileno(stderr),<sp/>_O_BINARY));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>elif<sp/>O_BINARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stdin<sp/>==<sp/>file)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>STDIN_FILENO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(setmode(STDIN_FILENO,<sp/>O_BINARY));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(setmode(fileno(stdin),<sp/>O_BINARY));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stdout<sp/>==<sp/>file)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>STDOUT_FILENO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(setmode(STDOUT_FILENO,<sp/>O_BINARY));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(setmode(fileno(stdout),<sp/>O_BINARY));</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stderr<sp/>==<sp/>file)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>STDERR_FILENO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(setmode(STDERR_FILENO,<sp/>O_BINARY));</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>void(setmode(fileno(stderr),<sp/>O_BINARY));</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>199711L<sp/>||<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>vtos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t,<sp/>std::true_type)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>(t);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negative<sp/>=<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>digit<sp/>=<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>%<sp/>10;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(digit<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>-digit;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>char(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse(s.begin(),<sp/>s.end());</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>negative<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>:<sp/>s;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>vtos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t,<sp/>std::false_type)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str(std::string());</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.clear();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>s;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>vtos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtos(t,<sp/>std::is_integral&lt;T&gt;());</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>signed<sp/>case.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>toHumanReadableString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/>std::false_type)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtos(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trailingZeroCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>n_<sp/>=<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n_<sp/>%<sp/>10<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_<sp/>/=<sp/>10,<sp/>trailingZeroCount++;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trailingZeroCount<sp/>&gt;=<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;10^&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(trailingZeroCount);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;-10^&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(trailingZeroCount);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtos(n_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;*10^&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(trailingZeroCount);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtos(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>unsigned<sp/>case.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>toHumanReadableString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/>std::true_type)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtos(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trailingZeroCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>n_<sp/>=<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n_<sp/>%<sp/>10<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_<sp/>/=<sp/>10,<sp/>trailingZeroCount++;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trailingZeroCount<sp/>&gt;=<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;10^&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(trailingZeroCount);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtos(n_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;*10^&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(trailingZeroCount);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtos(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>toHumanReadableString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toHumanReadableString(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/>std::is_unsigned&lt;T&gt;());</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>vtos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str(std::string());</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.clear();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>s;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>toHumanReadableString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtos(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtos(t);</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>199711L<sp/>||<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>opts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareOpts(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/>Very<sp/>simple<sp/>regex-like<sp/>pattern.</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*<sp/>It<sp/>used<sp/>for<sp/>two<sp/>purposes:<sp/>validation<sp/>and<sp/>generation.</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*<sp/>For<sp/>example,<sp/>pattern(&quot;[a-z]{1,5}&quot;).next(rnd)<sp/>will<sp/>return</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/>random<sp/>string<sp/>from<sp/>lowercase<sp/>latin<sp/>letters<sp/>with<sp/>length</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*<sp/>from<sp/>1<sp/>to<sp/>5.<sp/>It<sp/>is<sp/>easier<sp/>to<sp/>call<sp/>rnd.next(&quot;[a-z]{1,5}&quot;)</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>same<sp/>effect.</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/>Another<sp/>samples:</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*<sp/>&quot;mike|john&quot;<sp/>will<sp/>generate<sp/>(match)<sp/>&quot;mike&quot;<sp/>or<sp/>&quot;john&quot;;</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*<sp/>&quot;-?[1-9][0-9]{0,3}&quot;<sp/>will<sp/>generate<sp/>(match)<sp/>non-zero<sp/>integers<sp/>from<sp/>-9999<sp/>to<sp/>9999;</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/>*<sp/>&quot;id-([ac]|b{2})&quot;<sp/>will<sp/>generate<sp/>(match)<sp/>&quot;id-a&quot;,<sp/>&quot;id-bb&quot;,<sp/>&quot;id-c&quot;;</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*<sp/>&quot;[^0-9]*&quot;<sp/>will<sp/>match<sp/>sequences<sp/>(empty<sp/>or<sp/>non-empty)<sp/>without<sp/>digits,<sp/>you<sp/>can&apos;t</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/>*<sp/>use<sp/>it<sp/>for<sp/>generations.</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/>*<sp/>You<sp/>can&apos;t<sp/>use<sp/>pattern<sp/>for<sp/>generation<sp/>if<sp/>it<sp/>contains<sp/>meta-symbol<sp/>&apos;*&apos;.<sp/>Also<sp/>it</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>is<sp/>not<sp/>recommended<sp/>to<sp/>use<sp/>it<sp/>for<sp/>char-sets<sp/>with<sp/>meta-symbol<sp/>&apos;^&apos;<sp/>like<sp/>[^a-z].</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>For<sp/>matching<sp/>very<sp/>simple<sp/>greedy<sp/>algorithm<sp/>is<sp/>used.<sp/>For<sp/>example,<sp/>pattern</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/>&quot;[0-9]?1&quot;<sp/>will<sp/>not<sp/>match<sp/>&quot;1&quot;,<sp/>because<sp/>of<sp/>greedy<sp/>nature<sp/>of<sp/>matching.</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>Alternations<sp/>(meta-symbols<sp/>&quot;|&quot;)<sp/>are<sp/>processed<sp/>with<sp/>brute-force<sp/>algorithm,<sp/>so</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/>do<sp/>not<sp/>use<sp/>many<sp/>alternations<sp/>in<sp/>one<sp/>expression.</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>want<sp/>to<sp/>use<sp/>one<sp/>expression<sp/>many<sp/>times<sp/>it<sp/>is<sp/>better<sp/>to<sp/>compile<sp/>it<sp/>into</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/>a<sp/>single<sp/>pattern<sp/>like<sp/>&quot;pattern<sp/>p(&quot;[a-z]+&quot;)&quot;.<sp/>Later<sp/>you<sp/>can<sp/>use</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*<sp/>&quot;p.matches(std::string<sp/>s)&quot;<sp/>or<sp/>&quot;p.next(random_t&amp;<sp/>rd)&quot;<sp/>to<sp/>check<sp/>matching<sp/>or<sp/>generate</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*<sp/>new<sp/>string<sp/>by<sp/>pattern.</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>Simpler<sp/>way<sp/>to<sp/>read<sp/>token<sp/>and<sp/>check<sp/>it<sp/>for<sp/>pattern<sp/>matching<sp/>is<sp/>&quot;inf.readToken(&quot;[a-z]+&quot;)&quot;.</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>All<sp/>spaces<sp/>are<sp/>ignored<sp/>in<sp/>regex,<sp/>unless<sp/>escaped<sp/>with<sp/>\.<sp/>For<sp/>example,<sp/>ouf.readLine(&quot;NO<sp/>SOLUTION&quot;)</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>will<sp/>expect<sp/>&quot;NOSOLUTION&quot;,<sp/>the<sp/>correct<sp/>call<sp/>should<sp/>be<sp/>ouf.readLine(&quot;NO\\<sp/>SOLUTION&quot;)<sp/>or</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*<sp/>ouf.readLine(R&quot;(NO\<sp/>SOLUTION)&quot;)<sp/>if<sp/>you<sp/>prefer<sp/>raw<sp/>string<sp/>literals<sp/>from<sp/>C++11.</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classrandom__t" kindref="compound">random_t</ref>;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="classpattern" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpattern" kindref="compound">pattern</ref><sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>pattern<sp/>instance<sp/>by<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpattern_1a40258f871a5d68827191054e3e845ccf" kindref="member">pattern</ref>(std::string<sp/>s);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>new<sp/>string<sp/>by<sp/>pattern<sp/>and<sp/>given<sp/>random_t.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpattern_1afc240d1630f47a451af22aff8dbf073d" kindref="member">next</ref>(<ref refid="classrandom__t" kindref="compound">random_t</ref><sp/>&amp;<ref refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" kindref="member">rnd</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>if<sp/>given<sp/>string<sp/>match<sp/>the<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" kindref="member">matches</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>source<sp/>string<sp/>of<sp/>the<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" kindref="member">matches</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;pattern&gt;<sp/>children;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>chars;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">};</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>Use<sp/>random_t<sp/>instances<sp/>to<sp/>generate<sp/>random<sp/>values.<sp/>It<sp/>is<sp/>preferred</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/>way<sp/>to<sp/>use<sp/>randoms<sp/>instead<sp/>of<sp/>rand()<sp/>function<sp/>or<sp/>self-written</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/>randoms.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>Testlib<sp/>defines<sp/>global<sp/>variable<sp/>&quot;rnd&quot;<sp/>of<sp/>random_t<sp/>class.</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>Use<sp/>registerGen(argc,<sp/>argv,<sp/>1)<sp/>to<sp/>setup<sp/>random_t<sp/>seed<sp/>be<sp/>command</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*<sp/>line<sp/>(to<sp/>use<sp/>latest<sp/>random<sp/>generator<sp/>version).</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/>Random<sp/>generates<sp/>uniformly<sp/>distributed<sp/>values<sp/>if<sp/>another<sp/>strategy<sp/>is</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/>not<sp/>specified<sp/>explicitly.</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="classrandom__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classrandom__t" kindref="compound">random_t</ref><sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>multiplier;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>addend;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mask;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lim;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nextBits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>&lt;=<sp/>48)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>(seed<sp/>*<sp/>multiplier<sp/>+<sp/>addend)<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(seed<sp/>&gt;&gt;<sp/>(48<sp/>-<sp/>bits));</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>&gt;<sp/>63)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::nextBits(int<sp/>bits):<sp/>n<sp/>must<sp/>be<sp/>less<sp/>than<sp/>64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lowerBitCount<sp/>=<sp/>(<ref refid="classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868" kindref="member">random_t::version</ref><sp/>==<sp/>0<sp/>?<sp/>31<sp/>:<sp/>32);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>(nextBits(31)<sp/>&lt;&lt;<sp/>32);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>nextBits(lowerBitCount);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left<sp/>^<sp/>right;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="775" refid="classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868" kindref="member">version</ref>;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>New<sp/>random_t<sp/>with<sp/>fixed<sp/>seed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="classrandom__t_1a200954ff6ef69dbe691a1d9bc6f73543" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrandom__t_1a200954ff6ef69dbe691a1d9bc6f73543" kindref="member">random_t</ref>()</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>seed(3905348978240129619LL)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sets<sp/>seed<sp/>by<sp/>command<sp/>line.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783" refid="classrandom__t_1a091210e52bff54e02afeda4d343e081d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a091210e52bff54e02afeda4d343e081d" kindref="member">setSeed</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrandom__t" kindref="compound">random_t</ref><sp/>p;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>3905348978240129619LL;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>le<sp/>=<sp/>std::strlen(argv[i]);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>le;<sp/>j++)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>seed<sp/>*<sp/>multiplier<sp/>+<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(argv[i][j])<sp/>+<sp/>addend;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>+=<sp/>multiplier<sp/>/<sp/>addend;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>seed<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sets<sp/>seed<sp/>by<sp/>given<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798" refid="classrandom__t_1a5a4c52c8814df1402bd4451a54c62596" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a5a4c52c8814df1402bd4451a54c62596" kindref="member">setSeed</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>_seed)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long)<sp/>_seed;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>(seed<sp/>^<sp/>multiplier)<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>string<sp/>value<sp/>by<sp/>given<sp/>pattern<sp/>(see<sp/>pattern<sp/>documentation).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806" refid="classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6" kindref="member">next</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>p(ptrn);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.<ref refid="classpattern_1afc240d1630f47a451af22aff8dbf073d" kindref="member">next</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>string<sp/>value<sp/>by<sp/>given<sp/>pattern<sp/>(see<sp/>pattern<sp/>documentation).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(std::string<sp/>ptrn)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>p(ptrn);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.next(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>value<sp/>in<sp/>range<sp/>[0,<sp/>n-1].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821" refid="classrandom__t_1a6a2a9da34c281767ff0d2eba26ab10aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a6a2a9da34c281767ff0d2eba26ab10aa" kindref="member">next</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::next(int<sp/>n):<sp/>n<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&amp;<sp/>-<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>==<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/><sp/></highlight><highlight class="comment">//<sp/>n<sp/>is<sp/>a<sp/>power<sp/>of<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>((<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>*<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long)<sp/>nextBits(31))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/>INT_MAX<sp/>/<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>*<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bits;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>nextBits(31);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bits<sp/>&gt;=<sp/>limit);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(bits<sp/>%<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>value<sp/>in<sp/>range<sp/>[0,<sp/>n-1].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839" refid="classrandom__t_1a1a80c042ba815ff52c119c52771170b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a1a80c042ba815ff52c119c52771170b7" kindref="member">next</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&gt;=<sp/>INT_MAX)</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::next(unsigned<sp/>int<sp/>n):<sp/>n<sp/>must<sp/>be<sp/>less<sp/>INT_MAX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>value<sp/>in<sp/>range<sp/>[0,<sp/>n-1].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846" refid="classrandom__t_1a45c008fa70962b5f24cd3b964fe4685a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a45c008fa70962b5f24cd3b964fe4685a" kindref="member">next</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::next(long<sp/>long<sp/>n):<sp/>n<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/><ref refid="testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf" kindref="member">__TESTLIB_LONGLONG_MAX</ref><sp/>/<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>*<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bits;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>nextBits(63);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bits<sp/>&gt;=<sp/>limit);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bits<sp/>%<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>value<sp/>in<sp/>range<sp/>[0,<sp/>n-1].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861" refid="classrandom__t_1a67074aceedb1cc4e0e632d766bdecb64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a67074aceedb1cc4e0e632d766bdecb64" kindref="member">next</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(<ref refid="testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf" kindref="member">__TESTLIB_LONGLONG_MAX</ref>))</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::next(unsigned<sp/>long<sp/>long<sp/>n):<sp/>n<sp/>must<sp/>be<sp/>less<sp/>LONGLONG_MAX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>));</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>value<sp/>in<sp/>range<sp/>[0,<sp/>n-1].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868" refid="classrandom__t_1abfb4c6c332de59554b9ff536f739f6f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1abfb4c6c332de59554b9ff536f739f6f6" kindref="member">next</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>));</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>value<sp/>in<sp/>range<sp/>[0,<sp/>n-1].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="classrandom__t_1a92799ea85fc3b92554ca5d1c0696a48f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a92799ea85fc3b92554ca5d1c0696a48f" kindref="member">next</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(LONG_MAX))</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::next(unsigned<sp/>long<sp/>n):<sp/>n<sp/>must<sp/>be<sp/>less<sp/>LONG_MAX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880" refid="classrandom__t_1a02e0d6d3acf4dc0348b7e6893a9db59a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a02e0d6d3acf4dc0348b7e6893a9db59a" kindref="member">next</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>to<sp/>-<sp/>from<sp/>+<sp/>1)<sp/>+<sp/>from);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885" refid="classrandom__t_1a96576e50564fa3380dcd950a8ae708b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a96576e50564fa3380dcd950a8ae708b2" kindref="member">next</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>to<sp/>-<sp/>from<sp/>+<sp/>1)<sp/>+<sp/>from);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="classrandom__t_1ac8efd50ad04ad63205279f8ad9f5cfd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1ac8efd50ad04ad63205279f8ad9f5cfd8" kindref="member">next</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895" refid="classrandom__t_1af906bf4a0d3f94dce8362e6ad91b73c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af906bf4a0d3f94dce8362e6ad91b73c1" kindref="member">next</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::next(unsigned<sp/>long<sp/>long<sp/>from,<sp/>unsigned<sp/>long<sp/>long<sp/>to):<sp/>from<sp/>can&apos;t<sp/>not<sp/>exceed<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902" refid="classrandom__t_1a94266e882ca443601604c27215b5b4b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a94266e882ca443601604c27215b5b4b6" kindref="member">next</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907" refid="classrandom__t_1a4d087e798a7882b0e06ea23bffee99b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a4d087e798a7882b0e06ea23bffee99b6" kindref="member">next</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::next(unsigned<sp/>long<sp/>from,<sp/>unsigned<sp/>long<sp/>to):<sp/>from<sp/>can&apos;t<sp/>not<sp/>exceed<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>double<sp/>value<sp/>in<sp/>range<sp/>[0,<sp/>1).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914" refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>()<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long)<sp/>(nextBits(26))<sp/>&lt;&lt;<sp/>27);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>nextBits(27);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_crop((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(left<sp/>+<sp/>right)<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(1LL<sp/>&lt;&lt;<sp/>53),<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>double<sp/>value<sp/>in<sp/>range<sp/>[0,<sp/>n).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921" refid="classrandom__t_1a025fe558e59c74de018660fcc106afa1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a025fe558e59c74de018660fcc106afa1" kindref="member">next</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&lt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::next(double):<sp/>n<sp/>should<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_crop(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>*<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(),<sp/>0.0,<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>double<sp/>value<sp/>in<sp/>range<sp/>[from,<sp/>to).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928" refid="classrandom__t_1a8066c6224478692f9df72ab92268cee9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a8066c6224478692f9df72ab92268cee9" kindref="member">next</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;=<sp/>to)</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::next(double<sp/>from,<sp/>double<sp/>to):<sp/>from<sp/>should<sp/>be<sp/>strictly<sp/>less<sp/>than<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(to<sp/>-<sp/>from)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>element<sp/>from<sp/>container.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="936" refid="classrandom__t_1a6ad67430ee6f8a5ba04d716239ad0001" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type<sp/><ref refid="classrandom__t_1a6ad67430ee6f8a5ba04d716239ad0001" kindref="member">any</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container<sp/>&amp;c)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>int(c.size());</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::any(const<sp/>Container&amp;<sp/>c):<sp/>c.size()<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::const_iterator<sp/>it<sp/>=<sp/>c.begin();</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::advance(it,<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(size));</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>element<sp/>from<sp/>iterator<sp/>range.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="947" refid="classrandom__t_1a56614b8ab0529e6fe2b17d50f9188184" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter::value_type<sp/><ref refid="classrandom__t_1a56614b8ab0529e6fe2b17d50f9188184" kindref="member">any</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iter<sp/>&amp;begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iter<sp/>&amp;end)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::distance(begin,<sp/>end));</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::any(const<sp/>Iter&amp;<sp/>begin,<sp/>const<sp/>Iter&amp;<sp/>end):<sp/>range<sp/>must<sp/>have<sp/>positive<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter<sp/>it<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::advance(it,<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(size));</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Random<sp/>string<sp/>value<sp/>by<sp/>given<sp/>pattern<sp/>(see<sp/>pattern<sp/>documentation).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>2,<sp/>3)))</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960" refid="classrandom__t_1aacdef5e80fbdb890878a20d22bf819fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classrandom__t_1aacdef5e80fbdb890878a20d22bf819fd" kindref="member">next</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>ptrn);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(ptrn);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Weighted<sp/>next.<sp/>If<sp/>type<sp/>==<sp/>0<sp/>than<sp/>it<sp/>is<sp/>usual<sp/>&quot;next()&quot;.</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>type<sp/>=<sp/>1,<sp/>than<sp/>it<sp/>returns<sp/>&quot;max(next(),<sp/>next())&quot;</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(the<sp/>number<sp/>of<sp/>&quot;max&quot;<sp/>functions<sp/>equals<sp/>to<sp/>&quot;type&quot;).</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>type<sp/>&lt;<sp/>0,<sp/>than<sp/>&quot;max&quot;<sp/>function<sp/>replaces<sp/>with<sp/>&quot;min&quot;.</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973" refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(int<sp/>n,<sp/>int<sp/>type):<sp/>n<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(type)<sp/>&lt;<sp/>random_t::lim)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>+type;<sp/>i++)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__testlib_max(result,<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>));</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>-type;<sp/>i++)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__testlib_min(result,<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>));</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>std::pow(<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>()<sp/>+<sp/>0.0,<sp/>1.0<sp/>/<sp/>(type<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1<sp/>-<sp/>std::pow(<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>()<sp/>+<sp/>0.0,<sp/>1.0<sp/>/<sp/>(-type<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_crop((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>*<sp/>p),<sp/>0,<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>wnext(int,<sp/>int).<sp/>It<sp/>uses<sp/>the<sp/>same<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000" refid="classrandom__t_1a0ee4b3d21fe3f8e765cdb55593f6b698" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a0ee4b3d21fe3f8e765cdb55593f6b698" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(long<sp/>long<sp/>n,<sp/>int<sp/>type):<sp/>n<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(type)<sp/>&lt;<sp/>random_t::lim)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>+type;<sp/>i++)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__testlib_max(result,<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>));</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>-type;<sp/>i++)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__testlib_min(result,<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>std::pow(<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>()<sp/>+<sp/>0.0,<sp/>1.0<sp/>/<sp/>(type<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1<sp/>-<sp/>std::pow(<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>()<sp/>+<sp/>0.0,<sp/>1.0<sp/>/<sp/>(-type<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_crop((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>*<sp/>p),<sp/>0LL,<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>value<sp/>in<sp/>[0,<sp/>n).<sp/>See<sp/>wnext(int,<sp/>int).<sp/>It<sp/>uses<sp/>the<sp/>same<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027" refid="classrandom__t_1a45f6cc6e3ecc6677b66e5c756fe4bfe4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a45f6cc6e3ecc6677b66e5c756fe4bfe4" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(double<sp/>n,<sp/>int<sp/>type):<sp/>n<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(type)<sp/>&lt;<sp/>random_t::lim)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>+type;<sp/>i++)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__testlib_max(result,<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>());</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>-type;<sp/>i++)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__testlib_min(result,<sp/><ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>());</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>*<sp/>result;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>std::pow(<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>()<sp/>+<sp/>0.0,<sp/>1.0<sp/>/<sp/>(type<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1<sp/>-<sp/>std::pow(<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>()<sp/>+<sp/>0.0,<sp/>1.0<sp/>/<sp/>(-type<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_crop(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>*<sp/>p,<sp/>0.0,<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>value<sp/>in<sp/>[0,<sp/>1).<sp/>See<sp/>wnext(int,<sp/>int).<sp/>It<sp/>uses<sp/>the<sp/>same<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054" refid="classrandom__t_1a040834a196ac9423950b70444fa9e815" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a040834a196ac9423950b70444fa9e815" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(1.0,<sp/>type);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>wnext(int,<sp/>int).<sp/>It<sp/>uses<sp/>the<sp/>same<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059" refid="classrandom__t_1a25bd3838df67822270e9b357ed99753b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a25bd3838df67822270e9b357ed99753b" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&gt;=<sp/>INT_MAX)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(unsigned<sp/>int<sp/>n,<sp/>int<sp/>type):<sp/>n<sp/>must<sp/>be<sp/>less<sp/>INT_MAX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>),<sp/>type);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>wnext(int,<sp/>int).<sp/>It<sp/>uses<sp/>the<sp/>same<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066" refid="classrandom__t_1adc03869fcf6b80381e36e196d324a792" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1adc03869fcf6b80381e36e196d324a792" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(<ref refid="testlib_8h_1ac2e4a8f83549c96237919d8335d3cdcf" kindref="member">__TESTLIB_LONGLONG_MAX</ref>))</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(unsigned<sp/>long<sp/>long<sp/>n,<sp/>int<sp/>type):<sp/>n<sp/>must<sp/>be<sp/>less<sp/>LONGLONG_MAX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>),<sp/>type);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>wnext(int,<sp/>int).<sp/>It<sp/>uses<sp/>the<sp/>same<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074" refid="classrandom__t_1a78d4e3af24a4d2dc4330d5cbcce6504a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a78d4e3af24a4d2dc4330d5cbcce6504a" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>),<sp/>type);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>wnext(int,<sp/>int).<sp/>It<sp/>uses<sp/>the<sp/>same<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079" refid="classrandom__t_1a02872a7a16d8e5012c679b84b79a3c9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a02872a7a16d8e5012c679b84b79a3c9f" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(LONG_MAX))</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(unsigned<sp/>long<sp/>n,<sp/>int<sp/>type):<sp/>n<sp/>must<sp/>be<sp/>less<sp/>LONG_MAX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>),<sp/>type);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>weighted<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,<sp/>to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087" refid="classrandom__t_1aa72f4c64829957376aad6cc9103d4201" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1aa72f4c64829957376aad6cc9103d4201" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(int<sp/>from,<sp/>int<sp/>to,<sp/>int<sp/>type):<sp/>from<sp/>can&apos;t<sp/>not<sp/>exceed<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1,<sp/>type)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>weighted<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,<sp/>to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094" refid="classrandom__t_1a1b4c0bf6ead1bb3d8fe4dc2175dacdf4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a1b4c0bf6ead1bb3d8fe4dc2175dacdf4" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(unsigned<sp/>int<sp/>from,<sp/>unsigned<sp/>int<sp/>to,<sp/>int<sp/>type):<sp/>from<sp/>can&apos;t<sp/>not<sp/>exceed<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(<ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1,<sp/>type)<sp/>+<sp/>from);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>weighted<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,<sp/>to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101" refid="classrandom__t_1a5257c1a948d7ef92d664980e9a435fa5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a5257c1a948d7ef92d664980e9a435fa5" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(long<sp/>long<sp/>from,<sp/>long<sp/>long<sp/>to,<sp/>int<sp/>type):<sp/>from<sp/>can&apos;t<sp/>not<sp/>exceed<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1,<sp/>type)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>weighted<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,<sp/>to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108" refid="classrandom__t_1abd0776ec850dcd8f057699f03cd54d49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1abd0776ec850dcd8f057699f03cd54d49" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;random_t::wnext(unsigned<sp/>long<sp/>long<sp/>from,<sp/>unsigned<sp/>long<sp/>long<sp/>to,<sp/>int<sp/>type):<sp/>from<sp/>can&apos;t<sp/>not<sp/>exceed<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1,<sp/>type)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>weighted<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,<sp/>to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116" refid="classrandom__t_1a501082f1d8f8ca94d9a952c822d7c992" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a501082f1d8f8ca94d9a952c822d7c992" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(long<sp/>from,<sp/>long<sp/>to,<sp/>int<sp/>type):<sp/>from<sp/>can&apos;t<sp/>not<sp/>exceed<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1,<sp/>type)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>weighted<sp/>random<sp/>value<sp/>in<sp/>range<sp/>[from,<sp/>to].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123" refid="classrandom__t_1a652d3dac50de94daaef2e69cc3ab8ede" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a652d3dac50de94daaef2e69cc3ab8ede" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(unsigned<sp/>long<sp/>from,<sp/>unsigned<sp/>long<sp/>to,<sp/>int<sp/>type):<sp/>from<sp/>can&apos;t<sp/>not<sp/>exceed<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1,<sp/>type)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>weighted<sp/>random<sp/>double<sp/>value<sp/>in<sp/>range<sp/>[from,<sp/>to).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130" refid="classrandom__t_1a90cf6b1677f5c6f875f8c88a5933ea40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a90cf6b1677f5c6f875f8c88a5933ea40" kindref="member">wnext</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;=<sp/>to)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wnext(double<sp/>from,<sp/>double<sp/>to,<sp/>int<sp/>type):<sp/>from<sp/>should<sp/>be<sp/>strictly<sp/>less<sp/>than<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(to<sp/>-<sp/>from,<sp/>type)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>weighted<sp/>random<sp/>element<sp/>from<sp/>container.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="1138" refid="classrandom__t_1a9f733f388bbb553a9afabcbbfc68888d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type<sp/><ref refid="classrandom__t_1a9f733f388bbb553a9afabcbbfc68888d" kindref="member">wany</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container<sp/>&amp;c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>int(c.size());</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::wany(const<sp/>Container&amp;<sp/>c,<sp/>int<sp/>type):<sp/>c.size()<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::const_iterator<sp/>it<sp/>=<sp/>c.begin();</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::advance(it,<sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(size,<sp/>type));</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>weighted<sp/>random<sp/>element<sp/>from<sp/>iterator<sp/>range.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="1149" refid="classrandom__t_1aa988d6e195c81a659985aa9714ee5607" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter::value_type<sp/><ref refid="classrandom__t_1aa988d6e195c81a659985aa9714ee5607" kindref="member">wany</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iter<sp/>&amp;begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iter<sp/>&amp;end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::distance(begin,<sp/>end));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;random_t::any(const<sp/>Iter&amp;<sp/>begin,<sp/>const<sp/>Iter&amp;<sp/>end,<sp/>int<sp/>type):<sp/>range<sp/>must<sp/>have<sp/>positive<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter<sp/>it<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::advance(it,<sp/><ref refid="classrandom__t_1af706ad8761d232b9a0fb0ab7ab4939c9" kindref="member">wnext</ref>(size,<sp/>type));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>permutation<sp/>of<sp/>the<sp/>given<sp/>size<sp/>(values<sp/>are<sp/>between<sp/>`first`<sp/>and<sp/>`first`+size-1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="1161" refid="classrandom__t_1a8307bf13307e17694c4d38f76e1457e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;E&gt;<sp/><ref refid="classrandom__t_1a8307bf13307e17694c4d38f76e1457e0" kindref="member">perm</ref>(T<sp/>size,<sp/>E<sp/>first)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::perm(T<sp/>size,<sp/>E<sp/>first<sp/>=<sp/>0):<sp/>size<sp/>must<sp/>non-negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;E&gt;();</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;E&gt;<sp/>p(size);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>current<sp/>=<sp/>first;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>current++;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(p[i],<sp/>p[<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(i<sp/>+<sp/>1)]);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>permutation<sp/>of<sp/>the<sp/>given<sp/>size<sp/>(values<sp/>are<sp/>between<sp/>0<sp/>and<sp/>size-1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1178" refid="classrandom__t_1ae7d1ae42c9e6f534a871b0e38a6b5743" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrandom__t_1ae7d1ae42c9e6f534a871b0e38a6b5743" kindref="member">perm</ref>(T<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a8307bf13307e17694c4d38f76e1457e0" kindref="member">perm</ref>(size,<sp/>T(0));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>`size`<sp/>unordered<sp/>(unsorted)<sp/>distinct<sp/>numbers<sp/>between<sp/>`from`<sp/>and<sp/>`to`.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1184" refid="classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5" kindref="member">distinct</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>T<sp/>from,<sp/>T<sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>result;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::distinct<sp/>expected<sp/>from<sp/>&lt;=<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::distinct<sp/>expected<sp/>size<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>=<sp/>to<sp/>-<sp/>from<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uint64_t(size)<sp/>&gt;<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::distinct<sp/>expected<sp/>size<sp/>&lt;=<sp/>to<sp/>-<sp/>from<sp/>+<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>+=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>)<sp/>/<sp/>double(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>-<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected<sp/>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;T&gt;<sp/>vals;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(vals.size())<sp/>&lt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>x<sp/>=<sp/>T(<ref refid="classrandom__t_1af18b3616494fc94e3953b3c09fdf4c26" kindref="member">next</ref>(from,<sp/>to));</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vals.insert(x).second)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(x);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>&gt;<sp/>1000000000)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::distinct<sp/>here<sp/>expected<sp/>to<sp/>-<sp/>from<sp/>+<sp/>1<sp/>&lt;=<sp/>1000000000&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>p(<ref refid="classrandom__t_1a8307bf13307e17694c4d38f76e1457e0" kindref="member">perm</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>),<sp/>from));</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.insert(result.end(),<sp/>p.begin(),<sp/>p.begin()<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>`size`<sp/>unordered<sp/>(unsorted)<sp/>distinct<sp/>numbers<sp/>between<sp/>`0`<sp/>and<sp/>`upper`-1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1222" refid="classrandom__t_1a1333938e6448e31ea379d246a7f007cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrandom__t_1a1333938e6448e31ea379d246a7f007cb" kindref="member">distinct</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>T<sp/>upper)<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::distinct<sp/>expected<sp/>size<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;();</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upper<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::distinct<sp/>expected<sp/>upper<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>upper)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::distinct<sp/>expected<sp/>size<sp/>&lt;=<sp/>upper&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5" kindref="member">distinct</ref>(size,<sp/>T(0),<sp/>upper<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>(unsorted)<sp/>partition<sp/>which<sp/>is<sp/>a<sp/>representation<sp/>of<sp/>sum<sp/>as<sp/>a<sp/>sum<sp/>of<sp/>integers<sp/>not<sp/>less<sp/>than<sp/>min_part.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1238" refid="classrandom__t_1a7aa0ff6ea67a8e4e8f13caa5ab74f445" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrandom__t_1a7aa0ff6ea67a8e4e8f13caa5ab74f445" kindref="member">partition</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>T<sp/>sum,<sp/>T<sp/>min_part)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::partition:<sp/>size<sp/>&lt;<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>sum<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::partition:<sp/>size<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>sum<sp/>!=<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_part<sp/>*<sp/>size<sp/>&gt;<sp/>sum)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::partition:<sp/>min_part<sp/>*<sp/>size<sp/>&gt;<sp/>sum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>sum<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;();</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>sum_<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>min_part<sp/>*<sp/>size;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>septums(size);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>d<sp/>=<sp/><ref refid="classrandom__t_1a025458a94bf9aa69b265ba6df283f3f5" kindref="member">distinct</ref>(size<sp/>-<sp/>1,<sp/>T(1),<sp/>T(sum<sp/>+<sp/>size<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>septums[i<sp/>+<sp/>1]<sp/>=<sp/>d[i];</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(septums.begin(),<sp/>septums.end());</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>result(size);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>septums[i<sp/>+<sp/>1]<sp/>-<sp/>septums[i]<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[size<sp/>-<sp/>1]<sp/>=<sp/>sum<sp/>+<sp/>size<sp/>-<sp/>1<sp/>-<sp/>septums.back();</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>+=<sp/>min_part;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>result_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_sum<sp/>+=<sp/>result[i];</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result_sum<sp/>!=<sp/>sum_)</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::partition:<sp/>partition<sp/>sum<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>the<sp/>given<sp/>sum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*std::min_element(result.begin(),<sp/>result.end())<sp/>&lt;<sp/>min_part)</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::partition:<sp/>partition<sp/>min<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>no<sp/>less<sp/>than<sp/>the<sp/>given<sp/>min_part&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(result.size())<sp/>!=<sp/>size<sp/>||<sp/>result.size()<sp/>!=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>size)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;random_t::partition:<sp/>partition<sp/>size<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>given<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>random<sp/>(unsorted)<sp/>partition<sp/>which<sp/>is<sp/>a<sp/>representation<sp/>of<sp/>sum<sp/>as<sp/>a<sp/>sum<sp/>of<sp/>positive<sp/>integers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1282" refid="classrandom__t_1a2a9ceb1c9f011f481d967f162f16d53a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classrandom__t_1a2a9ceb1c9f011f481d967f162f16d53a" kindref="member">partition</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>T<sp/>sum)<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1a7aa0ff6ea67a8e4e8f13caa5ab74f445" kindref="member">partition</ref>(size,<sp/>sum,<sp/>T(1));</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>random_t::lim<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>random_t::multiplier<sp/>=<sp/>0x5DEECE66DLL;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>random_t::addend<sp/>=<sp/>0xBLL;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>random_t::mask<sp/>=<sp/>(1LL<sp/>&lt;&lt;<sp/>48)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868" kindref="member">random_t::version</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pattern<sp/>implementation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294" refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" kindref="member">pattern::matches</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" kindref="member">matches</ref>(s,<sp/>0);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__pattern_isSlash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s[pos]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal">__attribute__((pure))</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__pattern_isCommandChar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>s.length())</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slashes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>before<sp/>=<sp/>int(pos)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(before<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>s[before]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before--,<sp/>slashes++;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slashes<sp/>%<sp/>2<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>s[pos]<sp/>==<sp/>value;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pattern_getChar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;pos)<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isSlash(s,<sp/>pos))</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s[pos<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal">__attribute__((pure))</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pattern_greedyMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;char&gt;<sp/>chars)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>s.length())<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>s[pos++];</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::binary_search(chars.begin(),<sp/>chars.end(),<sp/>c))</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result++;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344" refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">pattern::src</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" kindref="member">pattern::matches</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>__pattern_greedyMatch(s,<sp/>pos,<sp/>chars);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>from)</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>to;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(children.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>child<sp/>=<sp/>0;<sp/>child<sp/>&lt;<sp/>children.size();<sp/>child++)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(children[child].<ref refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" kindref="member">matches</ref>(s,<sp/>pos))</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos<sp/>==<sp/>s.length();</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369" refid="classpattern_1afc240d1630f47a451af22aff8dbf073d" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classpattern_1afc240d1630f47a451af22aff8dbf073d" kindref="member">pattern::next</ref>(<ref refid="classrandom__t" kindref="compound">random_t</ref><sp/>&amp;<ref refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" kindref="member">rnd</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>result.reserve(20);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to<sp/>==<sp/>INT_MAX)</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern::next(random_t&amp;<sp/>rnd):<sp/>can&apos;t<sp/>process<sp/>character<sp/>&apos;*&apos;<sp/>for<sp/>generation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/><ref refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" kindref="member">rnd</ref>.<ref refid="classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6" kindref="member">next</ref>(to<sp/>-<sp/>from<sp/>+<sp/>1)<sp/>+<sp/>from;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>chars[<ref refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" kindref="member">rnd</ref>.<ref refid="classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6" kindref="member">next</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(chars.size()))];</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(children.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>child<sp/>=<sp/><ref refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" kindref="member">rnd</ref>.<ref refid="classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6" kindref="member">next</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(children.size()));</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>children[child].next(<ref refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" kindref="member">rnd</ref>);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__pattern_scanCounts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;from,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;to)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>s.length())<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>to<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>part;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>s.length()<sp/>&amp;&amp;<sp/>!__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts.push_back(part),<sp/>part<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>pos++;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part<sp/>+=<sp/>__pattern_getChar(s,<sp/>pos);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(part<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts.push_back(part);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parts.size()<sp/>&lt;<sp/>1<sp/>||<sp/>parts.size()<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>numbers;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>parts.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parts[i].length()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::sscanf(parts[i].c_str(),<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;number)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numbers.push_back(number);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numbers.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>to<sp/>=<sp/>numbers[0];</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>numbers[0],<sp/>to<sp/>=<sp/>numbers[1];</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&gt;<sp/>to)</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>0,<sp/>to<sp/>=<sp/>1,<sp/>pos++;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>0,<sp/>to<sp/>=<sp/>INT_MAX,<sp/>pos++;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>1,<sp/>to<sp/>=<sp/>INT_MAX,<sp/>pos++;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>to<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;char&gt;<sp/>__pattern_scanCharSet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;pos)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>s.length())</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>result;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negative<sp/>=<sp/>__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(negative)</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>prev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>s.length()<sp/>&amp;&amp;<sp/>!__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>prev<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>+<sp/>1<sp/>==<sp/>s.length()<sp/>||<sp/>__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(prev);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>next<sp/>=<sp/>__pattern_getChar(s,<sp/>pos);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>&gt;<sp/>next)</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>prev;<sp/>c<sp/>!=<sp/>next;<sp/>c++)</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(c);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(next);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(prev);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>__pattern_getChar(s,<sp/>pos);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(prev);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__pattern_isCommandChar(s,<sp/>pos,<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(negative)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(result.begin(),<sp/>result.end());</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>actuals;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code<sp/>=<sp/>0;<sp/>code<sp/>&lt;<sp/>255;<sp/>code++)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>char(code);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::binary_search(result.begin(),<sp/>result.end(),<sp/>c))</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actuals.push_back(c);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>actuals;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(result.begin(),<sp/>result.end());</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(__pattern_getChar(s,<sp/>pos));</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524" refid="classpattern_1a40258f871a5d68827191054e3e845ccf" refkind="member"><highlight class="normal"><ref refid="classpattern_1a40258f871a5d68827191054e3e845ccf" kindref="member">pattern::pattern</ref>(std::string<sp/>s)<sp/>:<sp/>s(s),<sp/>from(0),<sp/>to(0)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>t;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__pattern_isCommandChar(s,<sp/>i,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opened<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstClose<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>seps;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>i,<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opened++;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>i,<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opened--;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opened<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>firstClose<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstClose<sp/>=<sp/>int(i);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opened<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pattern_isCommandChar(s,<sp/>i,<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>opened<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seps.push_back(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(i));</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opened<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;pattern:<sp/>Illegal<sp/>pattern<sp/>(or<sp/>part)<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seps.size()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>firstClose<sp/>+<sp/>1<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>s.length()</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>__pattern_isCommandChar(s,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>__pattern_isCommandChar(s,<sp/>s.length()<sp/>-<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children.push_back(<ref refid="classpattern_1a40258f871a5d68827191054e3e845ccf" kindref="member">pattern</ref>(s.substr(1,<sp/>s.length()<sp/>-<sp/>2)));</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seps.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seps.push_back(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(s.length()));</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>seps.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children.push_back(<ref refid="classpattern_1a40258f871a5d68827191054e3e845ccf" kindref="member">pattern</ref>(s.substr(last,<sp/>seps[i]<sp/>-<sp/>last)));</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>seps[i]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chars<sp/>=<sp/>__pattern_scanCharSet(s,<sp/>pos);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pattern_scanCounts(s,<sp/>pos,<sp/>from,<sp/>to);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>s.length())</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children.push_back(<ref refid="classpattern_1a40258f871a5d68827191054e3e845ccf" kindref="member">pattern</ref>(s.substr(pos)));</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>pattern<sp/>implementation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="1583" refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref>(C<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="1588" refid="testlib_8h_1a8da048ae3bc25fe4bb2dcfceb53a90fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a8da048ae3bc25fe4bb2dcfceb53a90fc" kindref="member">isEoln</ref>(C<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref><sp/>||<sp/>c<sp/>==<sp/><ref refid="testlib_8h_1a876ce77f3c672c7162658151e648389e" kindref="member">CR</ref>);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="1593" refid="testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c" kindref="member">isBlanks</ref>(C<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref><sp/>||<sp/>c<sp/>==<sp/><ref refid="testlib_8h_1a876ce77f3c672c7162658151e648389e" kindref="member">CR</ref><sp/>||<sp/>c<sp/>==<sp/><ref refid="testlib_8h_1a5ff6e798033f03e74730e99f01936f84" kindref="member">SPACE</ref><sp/>||<sp/>c<sp/>==<sp/><ref refid="testlib_8h_1ad58a1fbfc85c7e4790fc55e654f50221" kindref="member">TAB</ref>);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597" refid="testlib_8h_1a1a32c4d3bd87256731e67936766c65ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="testlib_8h_1a1a32c4d3bd87256731e67936766c65ca" kindref="member">trim</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.empty())</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left<sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(s.length())<sp/>&amp;&amp;<sp/><ref refid="testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c" kindref="member">isBlanks</ref>(s[left]))</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left++;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(s.length()))</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>int(s.length())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(right<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c" kindref="member">isBlanks</ref>(s[right]))</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right--;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(right<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.substr(left,<sp/>right<sp/>-<sp/>left<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616" refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddb" kindref="member">TMode</ref><sp/>{</highlight></codeline>
<codeline lineno="1617" refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" kindref="member">_input</ref>,<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6" kindref="member">_output</ref>,<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61" kindref="member">_answer</ref></highlight></codeline>
<codeline lineno="1618" refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Outcomes<sp/>6-15<sp/>are<sp/>reserved<sp/>for<sp/>future<sp/>use.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621" refid="testlib_8h_1aca738f43134375f0a18077d633f14578" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>{</highlight></codeline>
<codeline lineno="1622" refid="testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77" kindref="member">_ok</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1623" refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1624" refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="1625" refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="1626" refid="testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43" kindref="member">_dirt</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="1627" refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" kindref="member">_points</ref><sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="1628" refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" kindref="member">_partially</ref><sp/>=<sp/>16</highlight></codeline>
<codeline lineno="1630" refid="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632" refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158f" kindref="member">TTestlibMode</ref><sp/>{</highlight></codeline>
<codeline lineno="1633" refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fad23f42b9c6d23ab5679d79151c4585ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa344a85f02f1ac239f9f648738a856eb6" kindref="member">_unknown</ref>,<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fad23f42b9c6d23ab5679d79151c4585ff" kindref="member">_checker</ref>,<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" kindref="member">_validator</ref>,<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa5311ad9bde7f5dbdc28c1f8264456fd5" kindref="member">_generator</ref>,<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fadaea9b0ac8f600ff71b0f7616869deac" kindref="member">_interactor</ref>,<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa" kindref="member">_scorer</ref></highlight></codeline>
<codeline lineno="1634" refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636" refid="testlib_8h_1a1e8859af5c334b6c4bebb434505b9ae4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_pc(exitCode)<sp/>(TResult(_partially<sp/>+<sp/>(exitCode)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Outcomes<sp/>6-15<sp/>are<sp/>reserved<sp/>for<sp/>future<sp/>use.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639" refid="testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59" kindref="member">outcomes</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;accepted&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrong-answer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;presentation-error&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fail&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fail&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PCMS2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;points&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;relative-scoring&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reserved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reserved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unexpected-eof&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reserved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reserved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reserved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reserved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reserved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reserved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reserved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;partially-correct&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663" refid="class_input_stream_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_input_stream_reader" kindref="compound">InputStreamReader</ref><sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1665" refid="class_input_stream_reader_1a06ef5f907b494fa52a75b2644dea6d7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader_1a06ef5f907b494fa52a75b2644dea6d7b" kindref="member">setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testCase)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667" refid="class_input_stream_reader_1a382091a8b54e0f77ae1d2e59bfa34814" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><ref refid="class_input_stream_reader_1a382091a8b54e0f77ae1d2e59bfa34814" kindref="member">getReadChars</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1669" refid="class_input_stream_reader_1a80448788833a59a503853b4a45a96137" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader_1a80448788833a59a503853b4a45a96137" kindref="member">curChar</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671" refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673" refid="class_input_stream_reader_1ad01b8b4dd307c70472afb7dae417401a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader_1ad01b8b4dd307c70472afb7dae417401a" kindref="member">skipChar</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675" refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677" refid="class_input_stream_reader_1a583d351a74f37fdabfe2e262e35760a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="class_input_stream_reader_1a583d351a74f37fdabfe2e262e35760a7" kindref="member">getName</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679" refid="class_input_stream_reader_1a90d0f46a473a2ff2f6224614b7af0ab3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader_1a90d0f46a473a2ff2f6224614b7af0ab3" kindref="member">eof</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681" refid="class_input_stream_reader_1aa145a0fcdb6b0a73cc3b91b22e5183cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader_1aa145a0fcdb6b0a73cc3b91b22e5183cb" kindref="member">close</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683" refid="class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881" kindref="member">getLine</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader_1a9df7ac536f2c9367abb461d203099a4d" kindref="member">~InputStreamReader</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688" refid="class_input_stream_reader_1a9df7ac536f2c9367abb461d203099a4d" refkind="member"><highlight class="normal"><ref refid="class_input_stream_reader_1a9df7ac536f2c9367abb461d203099a4d" kindref="member">InputStreamReader::~InputStreamReader</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692" refid="class_string_input_stream_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_string_input_stream_reader" kindref="compound">StringInputStreamReader</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader" kindref="compound">InputStreamReader</ref><sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1698" refid="class_string_input_stream_reader_1a1282a084cf2b5894390e20fac07068ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_string_input_stream_reader_1a1282a084cf2b5894390e20fac07068ff" kindref="member">StringInputStreamReader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;content)<sp/>:<sp/>s(content),<sp/>pos(0)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702" refid="class_string_input_stream_reader_1af5b847200799d3549c883228103bd961" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_input_stream_reader_1af5b847200799d3549c883228103bd961" kindref="member">setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;setTestCase<sp/>not<sp/>implemented<sp/>in<sp/>StringInputStreamReader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706" refid="class_string_input_stream_reader_1a104e77d9ed74af3095c70d207540b2d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="class_string_input_stream_reader_1a104e77d9ed74af3095c70d207540b2d5" kindref="member">getReadChars</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;getReadChars<sp/>not<sp/>implemented<sp/>in<sp/>StringInputStreamReader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1710" refid="class_string_input_stream_reader_1aa5cf9b35451b06d2b158d558e8d1bf01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_string_input_stream_reader_1aa5cf9b35451b06d2b158d558e8d1bf01" kindref="member">curChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>s.length())</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s[pos];</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717" refid="class_string_input_stream_reader_1a554fbedcf4b908fd940299e753ff009d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_string_input_stream_reader_1a554fbedcf4b908fd940299e753ff009d" kindref="member">nextChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>s.length())<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s[pos++];</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725" refid="class_string_input_stream_reader_1a6d3d26f8ceb666e4017edd2e4239e30e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_input_stream_reader_1a6d3d26f8ceb666e4017edd2e4239e30e" kindref="member">skipChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729" refid="class_string_input_stream_reader_1a193b5942839c98ed3b79e8260858dd00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_input_stream_reader_1a193b5942839c98ed3b79e8260858dd00" kindref="member">unreadChar</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;StringInputStreamReader::unreadChar(int):<sp/>pos<sp/>==<sp/>0.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos--;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>s.length())</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[pos]<sp/>=<sp/>char(c);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737" refid="class_string_input_stream_reader_1a874513b4124401f7874e524fc17b1aa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_string_input_stream_reader_1a874513b4124401f7874e524fc17b1aa6" kindref="member">getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_part(s);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741" refid="class_string_input_stream_reader_1a50a1cc8ef204cb6c84430b4d99c41fa1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_string_input_stream_reader_1a50a1cc8ef204cb6c84430b4d99c41fa1" kindref="member">getLine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745" refid="class_string_input_stream_reader_1a130c48a7af5de77562a4ebea4d4299c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_string_input_stream_reader_1a130c48a7af5de77562a4ebea4d4299c5" kindref="member">eof</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos<sp/>&gt;=<sp/>s.length();</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749" refid="class_string_input_stream_reader_1a91362e7b8706d208cda988cf136fe4c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_input_stream_reader_1a91362e7b8706d208cda988cf136fe4c4" kindref="member">close</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754" refid="class_file_input_stream_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_file_input_stream_reader" kindref="compound">FileInputStreamReader</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader" kindref="compound">InputStreamReader</ref><sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>std::FILE<sp/>*file;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>undoChars;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>readChars;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>undoReadChars;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>postprocessGetc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getcResult)<sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getcResult<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getcResult;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getc(FILE<sp/>*file)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(undoChars.empty())<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>rc<sp/>=<sp/>::getc(file);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>undoChars.back();</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undoChars.pop_back();</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>undoReadChars.back();</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undoReadChars.pop_back();</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref>)</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line++;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readChars.push_back(rc);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ungetc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c</highlight><highlight class="comment">/*,<sp/>FILE*<sp/>file*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readChars.empty())<sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undoReadChars.push_back(readChars.back());</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readChars.pop_back();</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref>)</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line--;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undoChars.push_back(c);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1802" refid="class_file_input_stream_reader_1a6dcc254451d2f6f0ee1a027c011de529" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_input_stream_reader_1a6dcc254451d2f6f0ee1a027c011de529" kindref="member">FileInputStreamReader</ref>(std::FILE<sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)<sp/>:<sp/>file(file),<sp/>name(name),<sp/>line(1)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806" refid="class_file_input_stream_reader_1ae9cca5f0fb8c409348a3ef86561d9c1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_input_stream_reader_1ae9cca5f0fb8c409348a3ef86561d9c1b" kindref="member">setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testCase)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testCase<sp/>&lt;<sp/>0<sp/>||<sp/>testCase<sp/>&gt;<sp/><ref refid="testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0" kindref="member">__TESTLIB_MAX_TEST_CASE</ref>)</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;testCase<sp/>expected<sp/>fit<sp/>in<sp/>[1,%d],<sp/>but<sp/>%d<sp/>doesn&apos;t&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0" kindref="member">__TESTLIB_MAX_TEST_CASE</ref>,<sp/>testCase));</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readChars.push_back(testCase<sp/>+<sp/>256);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812" refid="class_file_input_stream_reader_1ac14b525a2cda436c7442fd681e3f1bf4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="class_file_input_stream_reader_1ac14b525a2cda436c7442fd681e3f1bf4" kindref="member">getReadChars</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readChars;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816" refid="class_file_input_stream_reader_1a5c7894d247d016ae7e2223f7ee1c2787" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_file_input_stream_reader_1a5c7894d247d016ae7e2223f7ee1c2787" kindref="member">curChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(feof(file))</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>getc(file);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ungetc(c</highlight><highlight class="comment">/*,<sp/>file*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>postprocessGetc(c);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826" refid="class_file_input_stream_reader_1af0ad18bf18442da1c4fa2c1b89dd3c7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_file_input_stream_reader_1af0ad18bf18442da1c4fa2c1b89dd3c7a" kindref="member">nextChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(feof(file))</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>postprocessGetc(getc(file));</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833" refid="class_file_input_stream_reader_1a728b65f5513f16b3b889e40737b0fb9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_input_stream_reader_1a728b65f5513f16b3b889e40737b0fb9e" kindref="member">skipChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getc(file);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837" refid="class_file_input_stream_reader_1ae84ce16cd265dfbc8699eaefc3b8a8af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_input_stream_reader_1ae84ce16cd265dfbc8699eaefc3b8a8af" kindref="member">unreadChar</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ungetc(c</highlight><highlight class="comment">/*,<sp/>file*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841" refid="class_file_input_stream_reader_1a0d97d880a07804664631517d90bb1382" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_file_input_stream_reader_1a0d97d880a07804664631517d90bb1382" kindref="member">getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845" refid="class_file_input_stream_reader_1afeeeb04cb0c27f089aec013886fadf67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_file_input_stream_reader_1afeeeb04cb0c27f089aec013886fadf67" kindref="member">getLine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849" refid="class_file_input_stream_reader_1afe85545ef0381d65f1b2215af45d7b78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_file_input_stream_reader_1afe85545ef0381d65f1b2215af45d7b78" kindref="member">eof</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>file<sp/>||<sp/>feof(file))</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/><ref refid="class_file_input_stream_reader_1af0ad18bf18442da1c4fa2c1b89dd3c7a" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref><sp/>||<sp/>(c<sp/>==<sp/>EOF<sp/>&amp;&amp;<sp/>feof(file)))</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_input_stream_reader_1ae84ce16cd265dfbc8699eaefc3b8a8af" kindref="member">unreadChar</ref>(c);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861" refid="class_file_input_stream_reader_1a853f9cd15904383ab72f4763d48c2f42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_input_stream_reader_1a853f9cd15904383ab72f4763d48c2f42" kindref="member">close</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869" refid="class_buffered_file_input_stream_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_buffered_file_input_stream_reader" kindref="compound">BufferedFileInputStreamReader</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_input_stream_reader" kindref="compound">InputStreamReader</ref><sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BUFFER_SIZE;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MAX_UNREAD_COUNT;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>std::FILE<sp/>*file;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*isEof;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufferPos;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferSize;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>refill()<sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>file)</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;BufferedFileInputStreamReader:<sp/>file<sp/>==<sp/>NULL<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_buffered_file_input_stream_reader_1aaf1c31412eaee82b8b07c8f5df6f5370" kindref="member">getName</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufferPos<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(bufferSize))<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>readSize<sp/>=<sp/>fread(</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+<sp/>MAX_UNREAD_COUNT,</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUFFER_SIZE<sp/>-<sp/>MAX_UNREAD_COUNT,</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(readSize<sp/>&lt;<sp/>BUFFER_SIZE<sp/>-<sp/>MAX_UNREAD_COUNT</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>ferror(file))</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;BufferedFileInputStreamReader:<sp/>unable<sp/>to<sp/>read<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_buffered_file_input_stream_reader_1aaf1c31412eaee82b8b07c8f5df6f5370" kindref="member">getName</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferSize<sp/>=<sp/>MAX_UNREAD_COUNT<sp/>+<sp/>readSize;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferPos<sp/>=<sp/>int(MAX_UNREAD_COUNT);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memset(<ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref><sp/>+<sp/>MAX_UNREAD_COUNT,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref>[0])<sp/>*<sp/>readSize);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readSize<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>increment()<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>buffer[bufferPos++])<sp/>==<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref>)</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line++;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1916" refid="class_buffered_file_input_stream_reader_1a6461df3ebed7aab0634aa91faba73791" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_buffered_file_input_stream_reader_1a6461df3ebed7aab0634aa91faba73791" kindref="member">BufferedFileInputStreamReader</ref>(std::FILE<sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)<sp/>:<sp/>file(file),<sp/>name(name),<sp/>line(1)<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[BUFFER_SIZE];</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[BUFFER_SIZE];</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferSize<sp/>=<sp/>MAX_UNREAD_COUNT;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferPos<sp/>=<sp/>int(MAX_UNREAD_COUNT);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923" refid="class_buffered_file_input_stream_reader_1aaccbc87abb38906895c921b96ec35f0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_buffered_file_input_stream_reader_1aaccbc87abb38906895c921b96ec35f0b" kindref="member">~BufferedFileInputStreamReader</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>buffer;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/><ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref>;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934" refid="class_buffered_file_input_stream_reader_1a9cb09f53b2ce90a3fab93d40dde3a044" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_buffered_file_input_stream_reader_1a9cb09f53b2ce90a3fab93d40dde3a044" kindref="member">setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;setTestCase<sp/>not<sp/>implemented<sp/>in<sp/>BufferedFileInputStreamReader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1938" refid="class_buffered_file_input_stream_reader_1ab0ca30e956ff85c10b82e9c424b0c53e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="class_buffered_file_input_stream_reader_1ab0ca30e956ff85c10b82e9c424b0c53e" kindref="member">getReadChars</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;getReadChars<sp/>not<sp/>implemented<sp/>in<sp/>BufferedFileInputStreamReader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1942" refid="class_buffered_file_input_stream_reader_1a468df465bd263e44be6b38df8a18cf07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_buffered_file_input_stream_reader_1a468df465bd263e44be6b38df8a18cf07" kindref="member">curChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!refill())</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref>[bufferPos]<sp/>?<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref><sp/>:<sp/>buffer[bufferPos];</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949" refid="class_buffered_file_input_stream_reader_1a8bac4ef540ddce255c39c6024ca7530b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_buffered_file_input_stream_reader_1a8bac4ef540ddce255c39c6024ca7530b" kindref="member">nextChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!refill())</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref>[bufferPos]<sp/>?<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref><sp/>:<sp/>increment();</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956" refid="class_buffered_file_input_stream_reader_1af6982815e72b0689f11c7798b63a8c11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_buffered_file_input_stream_reader_1af6982815e72b0689f11c7798b63a8c11" kindref="member">skipChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment();</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960" refid="class_buffered_file_input_stream_reader_1aceeb77345c539a488be643c0d8152837" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_buffered_file_input_stream_reader_1aceeb77345c539a488be643c0d8152837" kindref="member">unreadChar</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferPos--;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufferPos<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;BufferedFileInputStreamReader::unreadChar(int):<sp/>bufferPos<sp/>&lt;<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a8be64904de021941ee6d1aa96ee4da14" kindref="member">isEof</ref>[bufferPos]<sp/>=<sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[bufferPos]<sp/>=<sp/>char(c);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref>)</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line--;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970" refid="class_buffered_file_input_stream_reader_1aaf1c31412eaee82b8b07c8f5df6f5370" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_buffered_file_input_stream_reader_1aaf1c31412eaee82b8b07c8f5df6f5370" kindref="member">getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974" refid="class_buffered_file_input_stream_reader_1a005e2082f57977cde391ceafb220e728" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_buffered_file_input_stream_reader_1a005e2082f57977cde391ceafb220e728" kindref="member">getLine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978" refid="class_buffered_file_input_stream_reader_1a395d51259e292bcc9db8180b0941382c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_buffered_file_input_stream_reader_1a395d51259e292bcc9db8180b0941382c" kindref="member">eof</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!refill()<sp/>||<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref><sp/>==<sp/><ref refid="class_buffered_file_input_stream_reader_1a468df465bd263e44be6b38df8a18cf07" kindref="member">curChar</ref>();</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982" refid="class_buffered_file_input_stream_reader_1ab5c370f1b5e43ae4c9e1947e00dbfafd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_buffered_file_input_stream_reader_1ab5c370f1b5e43ae4c9e1947e00dbfafd" kindref="member">close</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1988"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BufferedFileInputStreamReader::BUFFER_SIZE<sp/>=<sp/>2000000;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BufferedFileInputStreamReader::MAX_UNREAD_COUNT<sp/>=<sp/>BufferedFileInputStreamReader::BUFFER_SIZE<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1994"><highlight class="comment"><sp/>*<sp/>Streams<sp/>to<sp/>be<sp/>used<sp/>for<sp/>reading<sp/>data<sp/>in<sp/>checkers<sp/>or<sp/>validators.</highlight></codeline>
<codeline lineno="1995"><highlight class="comment"><sp/>*<sp/>Each<sp/>read*()<sp/>method<sp/>moves<sp/>pointer<sp/>to<sp/>the<sp/>next<sp/>character<sp/>after<sp/>the</highlight></codeline>
<codeline lineno="1996"><highlight class="comment"><sp/>*<sp/>read<sp/>value.</highlight></codeline>
<codeline lineno="1997"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998" refid="struct_in_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>use<sp/>them.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd" kindref="member">InStream</ref>();</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab75c26c4747d2a23388735cdfebbe4fa" kindref="member">~InStream</ref>();</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wrap<sp/>std::string<sp/>with<sp/>InStream.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd" kindref="member">InStream</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;baseStream,<sp/>std::string<sp/>content);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007" refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_input_stream_reader" kindref="compound">InputStreamReader</ref><sp/>*<ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>;</highlight></codeline>
<codeline lineno="2008" refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref>;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2010" refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="2011" refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddb" kindref="member">TMode</ref><sp/><ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref>;</highlight></codeline>
<codeline lineno="2012" refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref>;</highlight></codeline>
<codeline lineno="2013" refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref>;</highlight></codeline>
<codeline lineno="2014" refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref>;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016" refid="struct_in_stream_1a8afeeed49266480bd239d832415fb85b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a8afeeed49266480bd239d832415fb85b" kindref="member">wordReserveSize</ref>;</highlight></codeline>
<codeline lineno="2017" refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019" refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>;</highlight></codeline>
<codeline lineno="2020" refid="struct_in_stream_1a14e6d7455706cea771265a7ab8407918" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a14e6d7455706cea771265a7ab8407918" kindref="member">maxFileSize</ref>;</highlight></codeline>
<codeline lineno="2021" refid="struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26" kindref="member">maxTokenLength</ref>;</highlight></codeline>
<codeline lineno="2022" refid="struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a" kindref="member">maxMessageLength</ref>;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(std::string<sp/>fileName,<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddb" kindref="member">TMode</ref><sp/><ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref>);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(std::FILE<sp/>*f,<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddb" kindref="member">TMode</ref><sp/><ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref>);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a7e9ee69fe14cc6c19b059b384eebed5c" kindref="member">setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testCase);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd" kindref="member">getReadChars</ref>();</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Moves<sp/>stream<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>non-white-space<sp/>character<sp/>or<sp/>EOF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3caea7dc5003207a13b690e1e6523759" kindref="member">skipBlanks</ref>();</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>current<sp/>character<sp/>in<sp/>the<sp/>stream.<sp/>Doesn&apos;t<sp/>remove<sp/>it<sp/>from<sp/>stream.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af208d97fa6484d10b88d611012fce578" kindref="member">curChar</ref>();</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Moves<sp/>stream<sp/>pointer<sp/>one<sp/>character<sp/>forward.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a15dbd488971ba0da79085f7bd980f1f1" kindref="member">skipChar</ref>();</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>current<sp/>character<sp/>and<sp/>moves<sp/>pointer<sp/>one<sp/>character<sp/>forward.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af46102c51b215e59e3b9e993ac999fe5" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>current<sp/>character<sp/>and<sp/>moves<sp/>pointer<sp/>one<sp/>character<sp/>forward.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205" kindref="member">readChar</ref>();</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>&quot;readChar()&quot;<sp/>but<sp/>ensures<sp/>that<sp/>the<sp/>result<sp/>is<sp/>equal<sp/>to<sp/>given<sp/>parameter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205" kindref="member">readChar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>&quot;readChar()&quot;<sp/>but<sp/>ensures<sp/>that<sp/>the<sp/>result<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>space<sp/>(code=32).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a012e968b18b359b82897db805faeb0f6" kindref="member">readSpace</ref>();</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Puts<sp/>back<sp/>the<sp/>character<sp/>into<sp/>the<sp/>stream.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a8c656e9ae7175e852033fbdffe41550b" kindref="member">unreadChar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reopens<sp/>stream,<sp/>you<sp/>should<sp/>not<sp/>use<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0daf92605da53c68648ad78572965ca3" kindref="member">reset</ref>(std::FILE<sp/>*file<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checks<sp/>that<sp/>current<sp/>position<sp/>is<sp/>EOF.<sp/>If<sp/>not<sp/>it<sp/>doesn&apos;t<sp/>move<sp/>stream<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4" kindref="member">eof</ref>();</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Moves<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>non-white-space<sp/>character<sp/>and<sp/>calls<sp/>&quot;eof()&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b" kindref="member">seekEof</ref>();</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2065"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Checks<sp/>that<sp/>current<sp/>position<sp/>contains<sp/>EOLN.</highlight></codeline>
<codeline lineno="2066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>not<sp/>it<sp/>doesn&apos;t<sp/>move<sp/>stream<sp/>pointer.</highlight></codeline>
<codeline lineno="2067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>strict<sp/>mode<sp/>expects<sp/>&quot;#13#10&quot;<sp/>for<sp/>windows<sp/>or<sp/>&quot;#10&quot;<sp/>for<sp/>other<sp/>platforms.</highlight></codeline>
<codeline lineno="2068"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd" kindref="member">eoln</ref>();</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Moves<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>non-space<sp/>and<sp/>non-tab<sp/>character<sp/>and<sp/>calls<sp/>&quot;eoln()&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a106d09bbdd844ca246bfbf2c6409f4b6" kindref="member">seekEoln</ref>();</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Moves<sp/>stream<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>character<sp/>of<sp/>the<sp/>next<sp/>line<sp/>(if<sp/>exists).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a86e63a6bb9bc47cae9f58f0591ecc53f" kindref="member">nextLine</ref>();</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Reads<sp/>new<sp/>token.<sp/>Ignores<sp/>white-spaces<sp/>into<sp/>the<sp/>non-strict<sp/>mode</highlight></codeline>
<codeline lineno="2079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(strict<sp/>mode<sp/>is<sp/>used<sp/>in<sp/>validators<sp/>usually).</highlight></codeline>
<codeline lineno="2080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>();</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readWord()&quot;,<sp/>it<sp/>is<sp/>preferred<sp/>to<sp/>use<sp/>&quot;readToken()&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1aab5bf73477536435d39efd209bf672d0" kindref="member">readToken</ref>();</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readWord()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>token<sp/>matches<sp/>to<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" kindref="member">readWords</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" kindref="member">readWords</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" kindref="member">readWords</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readToken()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>token<sp/>matches<sp/>to<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1aab5bf73477536435d39efd209bf672d0" kindref="member">readToken</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1aab5bf73477536435d39efd209bf672d0" kindref="member">readToken</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" kindref="member">readTokens</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" kindref="member">readTokens</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" kindref="member">readTokens</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(std::string<sp/>&amp;result);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72" kindref="member">readTokenTo</ref>(std::string<sp/>&amp;result);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72" kindref="member">readTokenTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72" kindref="member">readTokenTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Reads<sp/>new<sp/>long<sp/>long<sp/>value.<sp/>Ignores<sp/>white-spaces<sp/>into<sp/>the<sp/>non-strict<sp/>mode</highlight></codeline>
<codeline lineno="2126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(strict<sp/>mode<sp/>is<sp/>used<sp/>in<sp/>validators<sp/>usually).</highlight></codeline>
<codeline lineno="2127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" kindref="member">readLong</ref>();</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a473c29087621184bb71998a12957e822" kindref="member">readUnsignedLong</ref>();</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Reads<sp/>new<sp/>int.<sp/>Ignores<sp/>white-spaces<sp/>into<sp/>the<sp/>non-strict<sp/>mode</highlight></codeline>
<codeline lineno="2134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(strict<sp/>mode<sp/>is<sp/>used<sp/>in<sp/>validators<sp/>usually).</highlight></codeline>
<codeline lineno="2135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08" kindref="member">readInteger</ref>();</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Reads<sp/>new<sp/>int.<sp/>Ignores<sp/>white-spaces<sp/>into<sp/>the<sp/>non-strict<sp/>mode</highlight></codeline>
<codeline lineno="2140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(strict<sp/>mode<sp/>is<sp/>used<sp/>in<sp/>validators<sp/>usually).</highlight></codeline>
<codeline lineno="2141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">readInt</ref>();</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>&quot;readLong()&quot;<sp/>but<sp/>ensures<sp/>that<sp/>value<sp/>in<sp/>the<sp/>range<sp/>[minv,maxv].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" kindref="member">readLong</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reads<sp/>space-separated<sp/>sequence<sp/>of<sp/>long<sp/>longs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long<sp/>long&gt;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a469d95f96c09746781621480b74c5c83" kindref="member">readLongs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reads<sp/>space-separated<sp/>sequence<sp/>of<sp/>long<sp/>longs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long<sp/>long&gt;<sp/><ref refid="struct_in_stream_1a469d95f96c09746781621480b74c5c83" kindref="member">readLongs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a473c29087621184bb71998a12957e822" kindref="member">readUnsignedLong</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>long<sp/>long&gt;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a" kindref="member">readUnsignedLongs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>long<sp/>long&gt;<sp/><ref refid="struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a" kindref="member">readUnsignedLongs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" kindref="member">readLong</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>long<sp/>long&gt;</highlight></codeline>
<codeline lineno="2166" refid="struct_in_stream_1a9bd7a7d10db6d24401dfd3b421ed6045" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a9bd7a7d10db6d24401dfd3b421ed6045" kindref="member">readLongs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>&quot;readInteger()&quot;<sp/>but<sp/>ensures<sp/>that<sp/>value<sp/>in<sp/>the<sp/>range<sp/>[minv,maxv].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08" kindref="member">readInteger</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>&quot;readInt()&quot;<sp/>but<sp/>ensures<sp/>that<sp/>value<sp/>in<sp/>the<sp/>range<sp/>[minv,maxv].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">readInt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reads<sp/>space-separated<sp/>sequence<sp/>of<sp/>integers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea" kindref="member">readIntegers</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reads<sp/>space-separated<sp/>sequence<sp/>of<sp/>integers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea" kindref="member">readIntegers</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reads<sp/>space-separated<sp/>sequence<sp/>of<sp/>integers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="struct_in_stream_1afe94166e208381f17f49906ee5d50ae1" kindref="member">readInts</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reads<sp/>space-separated<sp/>sequence<sp/>of<sp/>integers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="struct_in_stream_1afe94166e208381f17f49906ee5d50ae1" kindref="member">readInts</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Reads<sp/>new<sp/>double.<sp/>Ignores<sp/>white-spaces<sp/>into<sp/>the<sp/>non-strict<sp/>mode</highlight></codeline>
<codeline lineno="2190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(strict<sp/>mode<sp/>is<sp/>used<sp/>in<sp/>validators<sp/>usually).</highlight></codeline>
<codeline lineno="2191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" kindref="member">readReal</ref>();</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Reads<sp/>new<sp/>double.<sp/>Ignores<sp/>white-spaces<sp/>into<sp/>the<sp/>non-strict<sp/>mode</highlight></codeline>
<codeline lineno="2196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(strict<sp/>mode<sp/>is<sp/>used<sp/>in<sp/>validators<sp/>usually).</highlight></codeline>
<codeline lineno="2197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a7409a09698273a264eaa9069ecf90abf" kindref="member">readDouble</ref>();</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>&quot;readReal()&quot;<sp/>but<sp/>ensures<sp/>that<sp/>value<sp/>in<sp/>the<sp/>range<sp/>[minv,maxv].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" kindref="member">readReal</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b" kindref="member">readReals</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b" kindref="member">readReals</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>&quot;readDouble()&quot;<sp/>but<sp/>ensures<sp/>that<sp/>value<sp/>in<sp/>the<sp/>range<sp/>[minv,maxv].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a7409a09698273a264eaa9069ecf90abf" kindref="member">readDouble</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e" kindref="member">readDoubles</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e" kindref="member">readDoubles</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>As<sp/>&quot;readReal()&quot;<sp/>but<sp/>ensures<sp/>that<sp/>value<sp/>in<sp/>the<sp/>range<sp/>[minv,maxv]<sp/>and</highlight></codeline>
<codeline lineno="2218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>number<sp/>of<sp/>digit<sp/>after<sp/>the<sp/>decimal<sp/>point<sp/>is<sp/>in<sp/>range<sp/>[minAfterPointDigitCount,maxAfterPointDigitCount]</highlight></codeline>
<codeline lineno="2219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>number<sp/>is<sp/>in<sp/>the<sp/>form<sp/>&quot;[-]digit(s)[.digit(s)]&quot;.</highlight></codeline>
<codeline lineno="2220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af4a862c387cf199c075896c046b3038b" kindref="member">readStrictReal</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount,</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="struct_in_stream_1a05d7a1183338770dd288298e6f4378c7" kindref="member">readStrictReals</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount,</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>As<sp/>&quot;readDouble()&quot;<sp/>but<sp/>ensures<sp/>that<sp/>value<sp/>in<sp/>the<sp/>range<sp/>[minv,maxv]<sp/>and</highlight></codeline>
<codeline lineno="2231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>number<sp/>of<sp/>digit<sp/>after<sp/>the<sp/>decimal<sp/>point<sp/>is<sp/>in<sp/>range<sp/>[minAfterPointDigitCount,maxAfterPointDigitCount]</highlight></codeline>
<codeline lineno="2232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>number<sp/>is<sp/>in<sp/>the<sp/>form<sp/>&quot;[-]digit(s)[.digit(s)]&quot;.</highlight></codeline>
<codeline lineno="2233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1aaecf640ad9de7cf1873b2bc216e32b47" kindref="member">readStrictDouble</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount,</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="struct_in_stream_1af2689fbf7c65b80728826fcb4230163f" kindref="member">readStrictDoubles</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount,</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>readLine().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>();</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>many<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" kindref="member">readStrings</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>readLine().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(std::string<sp/>&amp;result);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readLine()/readString()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>line<sp/>matches<sp/>to<sp/>the<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readLine()/readString()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>line<sp/>matches<sp/>to<sp/>the<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>many<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" kindref="member">readStrings</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>many<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" kindref="member">readStrings</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readLine()/readString()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>line<sp/>matches<sp/>to<sp/>the<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readLine()/readString()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>line<sp/>matches<sp/>to<sp/>the<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Reads<sp/>line<sp/>from<sp/>the<sp/>current<sp/>position<sp/>to<sp/>EOLN<sp/>or<sp/>EOF.<sp/>Moves<sp/>stream<sp/>pointer<sp/>to</highlight></codeline>
<codeline lineno="2273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>first<sp/>character<sp/>of<sp/>the<sp/>new<sp/>line<sp/>(if<sp/>possible).</highlight></codeline>
<codeline lineno="2274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683" kindref="member">readLine</ref>();</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>many<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" kindref="member">readLines</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>readLine().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447" kindref="member">readLineTo</ref>(std::string<sp/>&amp;result);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readLine()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>line<sp/>matches<sp/>to<sp/>the<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683" kindref="member">readLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readLine()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>line<sp/>matches<sp/>to<sp/>the<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683" kindref="member">readLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>many<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" kindref="member">readLines</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>many<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" kindref="member">readLines</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readLine()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>line<sp/>matches<sp/>to<sp/>the<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447" kindref="member">readLineTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>same<sp/>as<sp/>&quot;readLine()&quot;,<sp/>but<sp/>ensures<sp/>that<sp/>line<sp/>matches<sp/>to<sp/>the<sp/>given<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447" kindref="member">readLineTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reads<sp/>EOLN<sp/>or<sp/>fails.<sp/>Use<sp/>it<sp/>in<sp/>validators.<sp/>Calls<sp/>&quot;eoln()&quot;<sp/>method<sp/>internally.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a034c0ee97269f7bbd1e73ccc85b13f54" kindref="member">readEoln</ref>();</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reads<sp/>EOF<sp/>or<sp/>fails.<sp/>Use<sp/>it<sp/>in<sp/>validators.<sp/>Calls<sp/>&quot;eof()&quot;<sp/>method<sp/>internally.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a80e53f1d7a022f34f8d88839de43d6b5" kindref="member">readEof</ref>();</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2310"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Quit-functions<sp/>aborts<sp/>program<sp/>with<sp/>&lt;result&gt;<sp/>and<sp/>&lt;message&gt;:</highlight></codeline>
<codeline lineno="2311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>input/answer<sp/>streams<sp/>replace<sp/>any<sp/>result<sp/>to<sp/>FAIL.</highlight></codeline>
<codeline lineno="2312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Quit-functions<sp/>aborts<sp/>program<sp/>with<sp/>&lt;result&gt;<sp/>and<sp/>&lt;message&gt;:</highlight></codeline>
<codeline lineno="2316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>input/answer<sp/>streams<sp/>replace<sp/>any<sp/>result<sp/>to<sp/>FAIL.</highlight></codeline>
<codeline lineno="2317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5" kindref="member">quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>...);</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Quit-functions<sp/>aborts<sp/>program<sp/>with<sp/>&lt;result&gt;<sp/>and<sp/>&lt;message&gt;:</highlight></codeline>
<codeline lineno="2322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>input/answer<sp/>streams<sp/>replace<sp/>any<sp/>result<sp/>to<sp/>FAIL.</highlight></codeline>
<codeline lineno="2323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0c969f83376d50af370615d44186647d" kindref="member">quitif</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition,<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>...);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Quit-functions<sp/>aborts<sp/>program<sp/>with<sp/>&lt;result&gt;<sp/>and<sp/>&lt;message&gt;:</highlight></codeline>
<codeline lineno="2327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>input/answer<sp/>streams<sp/>replace<sp/>any<sp/>result<sp/>to<sp/>FAIL.</highlight></codeline>
<codeline lineno="2328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95" kindref="member">quits</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/>std::string<sp/>msg);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Checks<sp/>condition<sp/>and<sp/>aborts<sp/>a<sp/>program<sp/>if<sp/>condition<sp/>is<sp/>false.</highlight></codeline>
<codeline lineno="2333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>_wa<sp/>for<sp/>ouf<sp/>and<sp/>_fail<sp/>on<sp/>any<sp/>other<sp/>streams.</highlight></codeline>
<codeline lineno="2334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>3,<sp/>4)))</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a44a5027f6d7000c62ef27c6719f225ef" kindref="member">ensuref</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>...);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ad961f49275f9e4d97b3ab6691f4b3d07" kindref="member">__testlib_ensure</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>std::string<sp/>message);</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344" refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref><sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="2345" refid="struct_in_stream_1a582ee4c10e2543041466180e6134865a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a582ee4c10e2543041466180e6134865a" kindref="member">OPEN_BRACKET</ref><sp/>=<sp/>char(11);</highlight></codeline>
<codeline lineno="2346" refid="struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8" kindref="member">CLOSE_BRACKET</ref><sp/>=<sp/>char(17);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348" refid="struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/><ref refid="struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836" kindref="member">LightGray</ref><sp/>=<sp/>0x07;</highlight></codeline>
<codeline lineno="2349" refid="struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/><ref refid="struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c" kindref="member">LightRed</ref><sp/>=<sp/>0x0c;</highlight></codeline>
<codeline lineno="2350" refid="struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/><ref refid="struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4" kindref="member">LightCyan</ref><sp/>=<sp/>0x0b;</highlight></codeline>
<codeline lineno="2351" refid="struct_in_stream_1a088a42a5a342bf630b6288c308d276e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/><ref refid="struct_in_stream_1a088a42a5a342bf630b6288c308d276e3" kindref="member">LightGreen</ref><sp/>=<sp/>0x0a;</highlight></codeline>
<codeline lineno="2352" refid="struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/><ref refid="struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad" kindref="member">LightYellow</ref><sp/>=<sp/>0x0e;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" kindref="member">textColor</ref>(<ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/>color);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb" kindref="member">quitscr</ref>(<ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/>color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">quitscrS</ref>(<ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/>color,<sp/>std::string<sp/>msg);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a7920954e072895d70f2127ccc7af789d" kindref="member">xmlSafeWrite</ref>(std::FILE<sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skips<sp/>UTF-8<sp/>Byte<sp/>Order<sp/>Mark.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a1ee5c101df11ec9fe00867379bf3937f" kindref="member">skipBom</ref>();</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd" kindref="member">InStream</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371" refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" refkind="member"><highlight class="normal"><ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>;</highlight></codeline>
<codeline lineno="2372" refid="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" refkind="member"><highlight class="normal"><ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/><ref refid="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" kindref="member">ouf</ref>;</highlight></codeline>
<codeline lineno="2373" refid="testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac" refkind="member"><highlight class="normal"><ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/><ref refid="testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac" kindref="member">ans</ref>;</highlight></codeline>
<codeline lineno="2374" refid="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" kindref="member">appesMode</ref>;</highlight></codeline>
<codeline lineno="2375" refid="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" kindref="member">appesModeEncoding</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;windows-1251&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2376" refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref>;</highlight></codeline>
<codeline lineno="2377" refid="testlib_8h_1a00f5e960957827ed8846cf705f810473" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a00f5e960957827ed8846cf705f810473" kindref="member">checkerName</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;untitled<sp/>checker&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2378" refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" refkind="member"><highlight class="normal"><ref refid="classrandom__t" kindref="compound">random_t</ref><sp/><ref refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" kindref="member">rnd</ref>;</highlight></codeline>
<codeline lineno="2379" refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158f" kindref="member">TTestlibMode</ref><sp/><ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa344a85f02f1ac239f9f648738a856eb6" kindref="member">_unknown</ref>;</highlight></codeline>
<codeline lineno="2380" refid="testlib_8h_1acb5280d0779ed8499169e3537ab20fd2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1acb5280d0779ed8499169e3537ab20fd2" kindref="member">__testlib_points</ref><sp/>=<sp/>std::numeric_limits&lt;float&gt;::infinity();</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382" refid="testlib_8h_1ad2806158bb273bfbae710825328a0887" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ad2806158bb273bfbae710825328a0887" kindref="member">VALIDATOR_MAX_VARIABLE_COUNT</ref><sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384" refid="struct_validator_bounds_hit" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_validator_bounds_hit" kindref="compound">ValidatorBoundsHit</ref><sp/>{</highlight></codeline>
<codeline lineno="2385" refid="struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128" kindref="member">EPS</ref>;</highlight></codeline>
<codeline lineno="2386" refid="struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59" kindref="member">minHit</ref>;</highlight></codeline>
<codeline lineno="2387" refid="struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c" kindref="member">maxHit</ref>;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389" refid="struct_validator_bounds_hit_1a9795fcb90f8ec3f0f069cb659e587281" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_validator_bounds_hit_1a9795fcb90f8ec3f0f069cb659e587281" kindref="member">ValidatorBoundsHit</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59" kindref="member">minHit</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c" kindref="member">maxHit</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/><ref refid="struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59" kindref="member">minHit</ref>(<ref refid="struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59" kindref="member">minHit</ref>),<sp/><ref refid="struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c" kindref="member">maxHit</ref>(<ref refid="struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c" kindref="member">maxHit</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392" refid="struct_validator_bounds_hit_1ac8444da34d710fac080ec0d30e49874a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_validator_bounds_hit" kindref="compound">ValidatorBoundsHit</ref><sp/><ref refid="struct_validator_bounds_hit_1ac8444da34d710fac080ec0d30e49874a" kindref="member">merge</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_validator_bounds_hit" kindref="compound">ValidatorBoundsHit</ref><sp/>&amp;validatorBoundsHit,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoreMinBound,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoreMaxBound)<sp/>{</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_validator_bounds_hit_1a9795fcb90f8ec3f0f069cb659e587281" kindref="member">ValidatorBoundsHit</ref>(</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_max(<ref refid="struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59" kindref="member">minHit</ref>,<sp/>validatorBoundsHit.<ref refid="struct_validator_bounds_hit_1a450ae2118accb6096ac01a9f1bc62f59" kindref="member">minHit</ref>)<sp/>||<sp/>ignoreMinBound,</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_max(<ref refid="struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c" kindref="member">maxHit</ref>,<sp/>validatorBoundsHit.<ref refid="struct_validator_bounds_hit_1af47cea308d23bf8c74eb43d99c373f4c" kindref="member">maxHit</ref>)<sp/>||<sp/>ignoreMaxBound</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2398"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight></codeline>
<codeline lineno="2400" refid="struct_constant_bound" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_constant_bound" kindref="compound">ConstantBound</ref><sp/>{</highlight></codeline>
<codeline lineno="2401" refid="struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="2402" refid="struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce" kindref="member">broken</ref>;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2405" refid="struct_constant_bound_1a3d4ab449600fba6a75ad6c5f3584bade" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_constant_bound_1a3d4ab449600fba6a75ad6c5f3584bade" kindref="member">adjust</ref>(T<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>t_string<sp/>=<sp/>std::to_string(t);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t_string.length()<sp/>&gt;=<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce" kindref="member">broken</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a" kindref="member">value</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce" kindref="member">broken</ref><sp/>&amp;&amp;<sp/><ref refid="struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a" kindref="member">value</ref>.empty())</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a" kindref="member">value</ref><sp/>=<sp/>t_string;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce" kindref="member">broken</ref><sp/>&amp;&amp;<sp/><ref refid="struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a" kindref="member">value</ref><sp/>!=<sp/>t_string)<sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce" kindref="member">broken</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a" kindref="member">value</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420" refid="struct_constant_bound_1a6e761d07b67ec9dcf0ca867e261f1997" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_constant_bound_1a6e761d07b67ec9dcf0ca867e261f1997" kindref="member">has_value</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a" kindref="member">value</ref>.empty()<sp/>&amp;&amp;<sp/>!<ref refid="struct_constant_bound_1ab23ab3aaa958191925daabfaed1872ce" kindref="member">broken</ref><sp/>&amp;&amp;<sp/><ref refid="struct_constant_bound_1a37ce6882c4711965f38109dd1e06f72a" kindref="member">value</ref>.length()<sp/>&lt;<sp/>32;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425" refid="struct_constant_bounds" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_constant_bounds" kindref="compound">ConstantBounds</ref><sp/>{</highlight></codeline>
<codeline lineno="2426" refid="struct_constant_bounds_1a643edcd332e4e6a14c0bcc23353a6cb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_constant_bound" kindref="compound">ConstantBound</ref><sp/><ref refid="struct_constant_bounds_1a643edcd332e4e6a14c0bcc23353a6cb8" kindref="member">lowerBound</ref>;</highlight></codeline>
<codeline lineno="2427" refid="struct_constant_bounds_1a33be60e2711bde6355bc4de05be2cb77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_constant_bound" kindref="compound">ConstantBound</ref><sp/><ref refid="struct_constant_bounds_1a33be60e2711bde6355bc4de05be2cb77" kindref="member">upperBound</ref>;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128" kindref="member">ValidatorBoundsHit::EPS</ref><sp/>=<sp/>1E-12;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432" refid="class_validator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>TEST_MARKUP_HEADER;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>TEST_CASE_OPEN_TAG;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>TEST_CASE_CLOSE_TAG;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_initialized;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_testset;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_group;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_testOverviewLogFileName;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_testMarkupFileName;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_testCase<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_testCaseFileName;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>ValidatorBoundsHit&gt;<sp/>_boundsHitByVariableName;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>ConstantBounds&gt;<sp/>_constantBoundsByVariableName;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>_features;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>_hitFeatures;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>_variables;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isVariableNameBoundsAnalyzable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.length();<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>||<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFeatureNameAnalyzable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">featureName</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">featureName</ref>.length();<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">featureName</ref>[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2468" refid="class_validator_1a5059febd30a909b60107c591fe72eaca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_validator_1a5059febd30a909b60107c591fe72eaca" kindref="member">Validator</ref>()<sp/>:<sp/>_initialized(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">false</ref>),<sp/>_testset(</highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">),<sp/>_group()<sp/>{</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight></codeline>
<codeline lineno="2471" refid="class_validator_1aeb0b49097c1087062e53aac935028b47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1aeb0b49097c1087062e53aac935028b47" kindref="member">initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475" refid="class_validator_1a302f9e1dada936024fbb9ba1df4584fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a302f9e1dada936024fbb9ba1df4584fa" kindref="member">testset</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_initialized)</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Validator<sp/>should<sp/>be<sp/>initialized<sp/>with<sp/>registerValidation(argc,<sp/>argv)<sp/>instead<sp/>of<sp/>registerValidation()<sp/>to<sp/>support<sp/>validator.testset()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_testset;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481" refid="class_validator_1a6e369a966da7b21efa5a9f43c05c0bc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a6e369a966da7b21efa5a9f43c05c0bc4" kindref="member">group</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_initialized)</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Validator<sp/>should<sp/>be<sp/>initialized<sp/>with<sp/>registerValidation(argc,<sp/>argv)<sp/>instead<sp/>of<sp/>registerValidation()<sp/>to<sp/>support<sp/>validator.group()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_group;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487" refid="class_validator_1a487fd29bc4d2e64ad3dfe1d02cde353b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a487fd29bc4d2e64ad3dfe1d02cde353b" kindref="member">testOverviewLogFileName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_testOverviewLogFileName;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491" refid="class_validator_1a381a78834499e48587efca2376747ce8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a381a78834499e48587efca2376747ce8" kindref="member">testMarkupFileName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_testMarkupFileName;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495" refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCase</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_testCase;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight></codeline>
<codeline lineno="2499" refid="class_validator_1a5968d80e9fb476b8cd4315a51318e3c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a5968d80e9fb476b8cd4315a51318e3c4" kindref="member">testCaseFileName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_testCaseFileName;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503" refid="class_validator_1a98abe366b29d8445a77b0a8467dceb41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a98abe366b29d8445a77b0a8467dceb41" kindref="member">setTestset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a302f9e1dada936024fbb9ba1df4584fa" kindref="member">testset</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testset<sp/>=<sp/><ref refid="class_validator_1a302f9e1dada936024fbb9ba1df4584fa" kindref="member">testset</ref>;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight></codeline>
<codeline lineno="2507" refid="class_validator_1aad2457aadd48a75837e2770aa6c380bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1aad2457aadd48a75837e2770aa6c380bb" kindref="member">setGroup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a6e369a966da7b21efa5a9f43c05c0bc4" kindref="member">group</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_group<sp/>=<sp/><ref refid="class_validator_1a6e369a966da7b21efa5a9f43c05c0bc4" kindref="member">group</ref>;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511" refid="class_validator_1a759723fc94643a78cc0b14da68b0107e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a759723fc94643a78cc0b14da68b0107e" kindref="member">setTestOverviewLogFileName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a487fd29bc4d2e64ad3dfe1d02cde353b" kindref="member">testOverviewLogFileName</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testOverviewLogFileName<sp/>=<sp/><ref refid="class_validator_1a487fd29bc4d2e64ad3dfe1d02cde353b" kindref="member">testOverviewLogFileName</ref>;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515" refid="class_validator_1a82a648685268dc91e9bf48f1c4fb8d57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a82a648685268dc91e9bf48f1c4fb8d57" kindref="member">setTestMarkupFileName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a381a78834499e48587efca2376747ce8" kindref="member">testMarkupFileName</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testMarkupFileName<sp/>=<sp/><ref refid="class_validator_1a381a78834499e48587efca2376747ce8" kindref="member">testMarkupFileName</ref>;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight></codeline>
<codeline lineno="2519" refid="class_validator_1ab4fd3b0dbe4e35310a9c7b0b7c2a411d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1ab4fd3b0dbe4e35310a9c7b0b7c2a411d" kindref="member">setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCase</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testCase<sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCase</ref>;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523" refid="class_validator_1abe2f949d8c9bff6fe61e0f9fab6e68e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1abe2f949d8c9bff6fe61e0f9fab6e68e4" kindref="member">setTestCaseFileName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a5968d80e9fb476b8cd4315a51318e3c4" kindref="member">testCaseFileName</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testCaseFileName<sp/>=<sp/><ref refid="class_validator_1a5968d80e9fb476b8cd4315a51318e3c4" kindref="member">testCaseFileName</ref>;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527" refid="class_validator_1af116e261ded245f21c249bccd6db5628" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1af116e261ded245f21c249bccd6db5628" kindref="member">prepVariableName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.length()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;~~&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.back()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.substr(1);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.substr(0,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.length()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.substr(1,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.length()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539" refid="class_validator_1aac12f8f1d2ce11e029f6d370d4706373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_validator_1aac12f8f1d2ce11e029f6d370d4706373" kindref="member">ignoreMinBound</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.length()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;~~&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543" refid="class_validator_1ad076fd6410b4468890720fb73ae7045a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_validator_1ad076fd6410b4468890720fb73ae7045a" kindref="member">ignoreMaxBound</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.length()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;~~&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight></codeline>
<codeline lineno="2547" refid="class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd" kindref="member">addBoundsHit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>,<sp/><ref refid="struct_validator_bounds_hit" kindref="compound">ValidatorBoundsHit</ref><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">boundsHit</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isVariableNameBoundsAnalyzable(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>)</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>_boundsHitByVariableName.size()<sp/>&lt;<sp/><ref refid="testlib_8h_1ad2806158bb273bfbae710825328a0887" kindref="member">VALIDATOR_MAX_VARIABLE_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">preparedVariableName</ref><sp/>=<sp/><ref refid="class_validator_1af116e261ded245f21c249bccd6db5628" kindref="member">prepVariableName</ref>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_boundsHitByVariableName[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">preparedVariableName</ref>]<sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">boundsHit</ref>.merge(_boundsHitByVariableName[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">preparedVariableName</ref>],</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1aac12f8f1d2ce11e029f6d370d4706373" kindref="member">ignoreMinBound</ref>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>),<sp/><ref refid="class_validator_1ad076fd6410b4468890720fb73ae7045a" kindref="member">ignoreMaxBound</ref>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>));</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556" refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isVariableNameBoundsAnalyzable(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>)</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>_variables.size()<sp/>&lt;<sp/><ref refid="testlib_8h_1ad2806158bb273bfbae710825328a0887" kindref="member">VALIDATOR_MAX_VARIABLE_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">preparedVariableName</ref><sp/>=<sp/><ref refid="class_validator_1af116e261ded245f21c249bccd6db5628" kindref="member">prepVariableName</ref>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_variables.insert(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">preparedVariableName</ref>);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564" refid="class_validator_1a40810a5c5baf5da95aa391f858a9e9a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a40810a5c5baf5da95aa391f858a9e9a6" kindref="member">getVariablesLog</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>:<sp/>_variables)</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;variable<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2572" refid="class_validator_1aaf48c6b401e8417c3da493f28ca65061" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1aaf48c6b401e8417c3da493f28ca65061" kindref="member">adjustConstantBounds</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">T</ref><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">lower</ref>,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">T</ref><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">upper</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isVariableNameBoundsAnalyzable(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>)</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>_constantBoundsByVariableName.size()<sp/>&lt;<sp/><ref refid="testlib_8h_1ad2806158bb273bfbae710825328a0887" kindref="member">VALIDATOR_MAX_VARIABLE_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">preparedVariableName</ref><sp/>=<sp/><ref refid="class_validator_1af116e261ded245f21c249bccd6db5628" kindref="member">prepVariableName</ref>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">variableName</ref>);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_constantBoundsByVariableName[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">preparedVariableName</ref>].lowerBound.adjust(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">lower</ref>);</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_constantBoundsByVariableName[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">preparedVariableName</ref>].upperBound.adjust(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">upper</ref>);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581" refid="class_validator_1a2c32c475bb31fb5ca96ed0ac3921417d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a2c32c475bb31fb5ca96ed0ac3921417d" kindref="member">getBoundsHitLog</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;std::string,<sp/>ValidatorBoundsHit&gt;::iterator<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>=<sp/>_boundsHitByVariableName.begin();</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>!=<sp/>_boundsHitByVariableName.end();</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;first<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;second.minHit)</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>min-value-hit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;second.maxHit)</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>max-value-hit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596" refid="class_validator_1a71f5bf142881342a9967da8671c35676" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a71f5bf142881342a9967da8671c35676" kindref="member">getConstantBoundsLog</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;std::string,<sp/>ConstantBounds&gt;::iterator<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>=<sp/>_constantBoundsByVariableName.begin();</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>!=<sp/>_constantBoundsByVariableName.end();</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;second.lowerBound.has_value()<sp/>||<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;second.upperBound.has_value())<sp/>{</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;constant-bounds<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;first<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;second.lowerBound.has_value())</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;second.lowerBound.value;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;second.upperBound.has_value())</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>-&gt;second.upperBound.value;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617" refid="class_validator_1ab8c173d330b6ead6d5f51587213cfe7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1ab8c173d330b6ead6d5f51587213cfe7b" kindref="member">getFeaturesLog</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;std::string&gt;::iterator<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>=<sp/>_features.begin();</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>!=<sp/>_features.end();</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;feature<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>*<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_hitFeatures.count(*<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>))</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>hit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight></codeline>
<codeline lineno="2630" refid="class_validator_1ac71a3aab99085ef6da45357db1d0fd5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1ac71a3aab99085ef6da45357db1d0fd5a" kindref="member">writeTestOverviewLog</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_testOverviewLogFileName.empty())<sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fileName</ref>(_testOverviewLogFileName);</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testOverviewLogFileName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">FILE</ref>*<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fileName</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;stdout&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">stdout</ref>,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fileName</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;stderr&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">stderr</ref>,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fopen</ref>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fileName</ref>.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">NULL</ref><sp/>==<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Validator::writeTestOverviewLog:<sp/>can&apos;t<sp/>write<sp/>test<sp/>overview<sp/>log<sp/>to<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fileName</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fprintf</ref>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s%s%s%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a2c32c475bb31fb5ca96ed0ac3921417d" kindref="member">getBoundsHitLog</ref>().<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c_str</ref>(),</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1ab8c173d330b6ead6d5f51587213cfe7b" kindref="member">getFeaturesLog</ref>().<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c_str</ref>(),</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a71f5bf142881342a9967da8671c35676" kindref="member">getConstantBoundsLog</ref>().<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c_str</ref>(),</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a40810a5c5baf5da95aa391f858a9e9a6" kindref="member">getVariablesLog</ref>().<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c_str</ref>());</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fflush(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref>)</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fclose(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>))</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Validator::writeTestOverviewLog:<sp/>can&apos;t<sp/>close<sp/>test<sp/>overview<sp/>log<sp/>file<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fileName</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658" refid="class_validator_1aca38cbb740f48b16c3d5efa5a2c9fc0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1aca38cbb740f48b16c3d5efa5a2c9fc0b" kindref="member">writeTestMarkup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_testMarkupFileName.empty())<sp/>{</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>readChars<sp/>=<sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd" kindref="member">getReadChars</ref>();</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readChars.empty())<sp/>{</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">markup</ref>(TEST_MARKUP_HEADER);</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>&lt;<sp/>readChars.size();<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref><sp/>=<sp/>readChars[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>+<sp/>1<sp/>==<sp/>readChars.size()<sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref><sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref><sp/>&lt;=<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">cc</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">char</ref>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">cc</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">cc</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">markup</ref><sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">markup</ref><sp/>+=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">cc</ref>;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">markup</ref><sp/>+=<sp/>TEST_CASE_OPEN_TAG;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">markup</ref><sp/>+=<sp/>toString(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref><sp/>-<sp/>256);</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">markup</ref><sp/>+=<sp/>TEST_CASE_CLOSE_TAG;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">FILE</ref>*<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_testMarkupFileName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;stdout&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">stdout</ref>,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_testMarkupFileName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;stderr&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">stderr</ref>,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fopen</ref>(_testMarkupFileName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">NULL</ref><sp/>==<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Validator::writeTestMarkup:<sp/>can&apos;t<sp/>write<sp/>test<sp/>markup<sp/>to<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>_testMarkupFileName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">markup</ref>.c_str());</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fflush(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref>)</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fclose(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>))</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Validator::writeTestMarkup:<sp/>can&apos;t<sp/>close<sp/>test<sp/>markup<sp/>file<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>_testCaseFileName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698" refid="class_validator_1ac0567612d6c3449a42bccd3930cda249" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1ac0567612d6c3449a42bccd3930cda249" kindref="member">writeTestCase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_testCase<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>readChars<sp/>=<sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd" kindref="member">getReadChars</ref>();</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readChars.empty())<sp/>{</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">content</ref>,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCaseContent</ref>;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">matchedTestCase</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>&lt;<sp/>readChars.size();<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref><sp/>=<sp/>readChars[<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">i</ref><sp/>+<sp/>1<sp/>==<sp/>readChars.size()<sp/>&amp;&amp;<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref><sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref><sp/>&lt;=<sp/>256)</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">content</ref><sp/>+=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">char</ref>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">matchedTestCase</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCaseContent</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">content</ref>;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">matchedTestCase</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">content</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCase</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">c</ref><sp/>-<sp/>256;</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCase</ref><sp/>==<sp/>_testCase)</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">matchedTestCase</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">matchedTestCase</ref>)</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCaseContent</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">content</ref>;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCaseContent</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">FILE</ref>*<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_testCaseFileName.empty()<sp/>||<sp/>_testCaseFileName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;stdout&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">stdout</ref>,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_testCaseFileName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;stderr&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">stderr</ref>,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref><sp/>=<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">fopen</ref>(_testCaseFileName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">NULL</ref><sp/>==<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Validator::writeTestCase:<sp/>can&apos;t<sp/>write<sp/>test<sp/>case<sp/>to<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>_testCaseFileName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">testCaseContent</ref>.c_str());</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fflush(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">standard_file</ref>)</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fclose(<ref refid="class_validator_1a9e106664d07fbf5f535cd66d27ab0e7c" kindref="member">f</ref>))</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Validator::writeTestCase:<sp/>can&apos;t<sp/>close<sp/>test<sp/>case<sp/>file<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>_testCaseFileName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746" refid="class_validator_1ad584b1395f153ccfedf884750ff10f70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1ad584b1395f153ccfedf884750ff10f70" kindref="member">addFeature</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_features.count(<ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>))</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Feature<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>registered<sp/>twice.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isFeatureNameAnalyzable(<ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>))</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Feature<sp/>name<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>contains<sp/>restricted<sp/>characters.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_features.insert(<ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2755" refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isFeatureNameAnalyzable(<ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>))</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Feature<sp/>name<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>contains<sp/>restricted<sp/>characters.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_features.count(<ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>))</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Feature<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>didn&apos;t<sp/>registered<sp/>via<sp/>addFeature(feature).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_hitFeatures.insert(<ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>);</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2764" refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" refkind="member"><highlight class="normal">}<sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Validator::TEST_MARKUP_HEADER<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MU\xF3\x01&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Validator::TEST_CASE_OPEN_TAG<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;!c&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Validator::TEST_CASE_CLOSE_TAG<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight></codeline>
<codeline lineno="2770" refid="struct_testlib_finalize_guard" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_testlib_finalize_guard" kindref="compound">TestlibFinalizeGuard</ref><sp/>{</highlight></codeline>
<codeline lineno="2771" refid="struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00" kindref="member">alive</ref>;</highlight></codeline>
<codeline lineno="2772" refid="struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1" kindref="member">registered</ref>;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight></codeline>
<codeline lineno="2774" refid="struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186" kindref="member">quitCount</ref>,<sp/><ref refid="struct_testlib_finalize_guard_1af46c17590b5a5f22927cf208e00cb704" kindref="member">readEofCount</ref>;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776" refid="struct_testlib_finalize_guard_1ae2ec335476d755ccc7ef9d6b546d7aaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_testlib_finalize_guard_1ae2ec335476d755ccc7ef9d6b546d7aaa" kindref="member">TestlibFinalizeGuard</ref>()<sp/>:<sp/><ref refid="struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186" kindref="member">quitCount</ref>(0),<sp/><ref refid="struct_testlib_finalize_guard_1af46c17590b5a5f22927cf208e00cb704" kindref="member">readEofCount</ref>(0)<sp/>{</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780" refid="struct_testlib_finalize_guard_1a45a3464e297663a49405ec2218a81565" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_testlib_finalize_guard_1a45a3464e297663a49405ec2218a81565" kindref="member">~TestlibFinalizeGuard</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_alive<sp/>=<sp/><ref refid="struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00" kindref="member">alive</ref>;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00" kindref="member">alive</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_alive)<sp/>{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>==<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fad23f42b9c6d23ab5679d79151c4585ff" kindref="member">_checker</ref><sp/>&amp;&amp;<sp/><ref refid="struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186" kindref="member">quitCount</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Checker<sp/>must<sp/>end<sp/>with<sp/>quit<sp/>or<sp/>quitf<sp/>call.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>==<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" kindref="member">_validator</ref><sp/>&amp;&amp;<sp/><ref refid="struct_testlib_finalize_guard_1af46c17590b5a5f22927cf208e00cb704" kindref="member">readEofCount</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186" kindref="member">quitCount</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Validator<sp/>must<sp/>end<sp/>with<sp/>readEof<sp/>call.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>opts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>autoEnsureNoUnusedOpts();</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1" kindref="member">registered</ref>)</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Call<sp/>register-function<sp/>in<sp/>the<sp/>first<sp/>line<sp/>of<sp/>the<sp/>main<sp/>(registerTestlibCmd<sp/>or<sp/>other<sp/>similar)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f" kindref="member">__testlib_exitCode</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac71a3aab99085ef6da45357db1d0fd5a" kindref="member">writeTestOverviewLog</ref>();</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1aca38cbb740f48b16c3d5efa5a2c9fc0b" kindref="member">writeTestMarkup</ref>();</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac0567612d6c3449a42bccd3930cda249" kindref="member">writeTestCase</ref>();</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>opts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>autoEnsureNoUnusedOpts();</highlight></codeline>
<codeline lineno="2808"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00" kindref="member">TestlibFinalizeGuard::alive</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1" kindref="member">TestlibFinalizeGuard::registered</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_testlib_finalize_guard" kindref="compound">TestlibFinalizeGuard</ref><sp/><ref refid="testlib_8h_1a576c1be9a11f2136d2bfa955394d4575" kindref="member">testlibFinalizeGuard</ref>;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2815"><highlight class="comment"><sp/>*<sp/>Call<sp/>it<sp/>to<sp/>disable<sp/>checks<sp/>on<sp/>finalization.</highlight></codeline>
<codeline lineno="2816"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817" refid="testlib_8h_1a2c40237203009ff06974b25b65030d68" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a2c40237203009ff06974b25b65030d68" kindref="member">disableFinalizeGuard</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00" kindref="member">TestlibFinalizeGuard::alive</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Interactor<sp/>streams.</highlight></codeline>
<codeline lineno="2822"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2823" refid="testlib_8h_1a675e9c0cb400805c69d94e7cdded4494" refkind="member"><highlight class="normal">std::fstream<sp/><ref refid="testlib_8h_1a675e9c0cb400805c69d94e7cdded4494" kindref="member">tout</ref>;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>implementation</highlight></codeline>
<codeline lineno="2826"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight></codeline>
<codeline lineno="2828" refid="struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd" kindref="member">InStream::InStream</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref><sp/>=<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" kindref="member">_input</ref>;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a8afeeed49266480bd239d832415fb85b" kindref="member">wordReserveSize</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref><sp/>=<sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref>;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a14e6d7455706cea771265a7ab8407918" kindref="member">maxFileSize</ref><sp/>=<sp/>128<sp/>*<sp/>1024<sp/>*<sp/>1024;<sp/></highlight><highlight class="comment">//<sp/>128MB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26" kindref="member">maxTokenLength</ref><sp/>=<sp/>32<sp/>*<sp/>1024<sp/>*<sp/>1024;<sp/></highlight><highlight class="comment">//<sp/>32MB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a" kindref="member">maxMessageLength</ref><sp/>=<sp/>32000;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843" refid="struct_in_stream_1a6f82f3399cf052c8b55d500feec79bd2" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a6682d5e68cdbb92c667e6fc8e5e3c6dd" kindref="member">InStream::InStream</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;baseStream,<sp/>std::string<sp/>content)<sp/>{</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_string_input_stream_reader" kindref="compound">StringInputStreamReader</ref>(content);</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>=<sp/>baseStream.<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref>;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref><sp/>=<sp/>baseStream.<ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref>;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;based<sp/>on<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>baseStream.<ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref><sp/>=<sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref>;</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a14e6d7455706cea771265a7ab8407918" kindref="member">maxFileSize</ref><sp/>=<sp/>128<sp/>*<sp/>1024<sp/>*<sp/>1024;<sp/></highlight><highlight class="comment">//<sp/>128MB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26" kindref="member">maxTokenLength</ref><sp/>=<sp/>32<sp/>*<sp/>1024<sp/>*<sp/>1024;<sp/></highlight><highlight class="comment">//<sp/>32MB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a" kindref="member">maxMessageLength</ref><sp/>=<sp/>32000;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight></codeline>
<codeline lineno="2857" refid="struct_in_stream_1ab75c26c4747d2a23388735cdfebbe4fa" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1ab75c26c4747d2a23388735cdfebbe4fa" kindref="member">InStream::~InStream</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1aa145a0fcdb6b0a73cc3b91b22e5183cb" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865" refid="struct_in_stream_1a7e9ee69fe14cc6c19b059b384eebed5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a7e9ee69fe14cc6c19b059b384eebed5c" kindref="member">InStream::setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testCase)<sp/>{</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>!=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" kindref="member">_validator</ref><sp/>||<sp/><ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref><sp/>!=<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" kindref="member">_input</ref><sp/>||<sp/>!<ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref><sp/>||<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;<ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>)</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;InStream::setTestCase<sp/>can<sp/>be<sp/>used<sp/>only<sp/>for<sp/>inf<sp/>in<sp/>validator-mode.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Actually,<sp/>prefer<sp/>setTestCase<sp/>function<sp/>instead<sp/>of<sp/>InStream<sp/>member&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a06ef5f907b494fa52a75b2644dea6d7b" kindref="member">setTestCase</ref>(testCase);</highlight></codeline>
<codeline lineno="2870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight></codeline>
<codeline lineno="2872" refid="struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd" kindref="member">InStream::getReadChars</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>!=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" kindref="member">_validator</ref><sp/>||<sp/><ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref><sp/>!=<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" kindref="member">_input</ref><sp/>||<sp/>!<ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref><sp/>||<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;<ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>)</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;InStream::getReadChars<sp/>can<sp/>be<sp/>used<sp/>only<sp/>for<sp/>inf<sp/>in<sp/>validator-mode.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref><sp/>==<sp/>NULL<sp/>?<sp/>std::vector&lt;int&gt;()<sp/>:<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a382091a8b54e0f77ae1d2e59bfa34814" kindref="member">getReadChars</ref>();</highlight></codeline>
<codeline lineno="2876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight></codeline>
<codeline lineno="2878" refid="testlib_8h_1ad093584ea7bc2579d8d49c05d4b95347" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ad093584ea7bc2579d8d49c05d4b95347" kindref="member">setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testCase)<sp/>{</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_run<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>zero_based<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_run<sp/>&amp;&amp;<sp/>testCase<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_based<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zero_based)</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCase++;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307" kindref="member">__testlib_hasTestCase</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426" kindref="member">__testlib_testCase</ref><sp/>=<sp/>testCase;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>==<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" kindref="member">_validator</ref>)</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a7e9ee69fe14cc6c19b059b384eebed5c" kindref="member">setTestCase</ref>(testCase);</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/>first_run<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2898"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2900" refid="testlib_8h_1ac237ec9b60cb9035a69ee70750d69141" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ac237ec9b60cb9035a69ee70750d69141" kindref="member">resultExitCode</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77" kindref="member">_ok</ref>)</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a809c8f4d2bf12a53a01098f336b97598" kindref="member">OK_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>)</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a9407aadd1d7b6a24b40a94be0e1b5e6c" kindref="member">WA_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>)</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1acd99fac8764b4f8513d0d78aa80878a5" kindref="member">PE_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>)</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1afac612f10342c3ccbfc7f30ae563184b" kindref="member">FAIL_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43" kindref="member">_dirt</ref>)</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ac9085792031f49686fd06d9560164d3b" kindref="member">DIRT_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" kindref="member">_points</ref>)</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a58429ce36ac0b67fb7889455174c7e8a" kindref="member">POINTS_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>)</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_UNEXPECTED_EOF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a30fb6330f5fcaf65c9347f50df26222d" kindref="member">UNEXPECTED_EOF_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1acd99fac8764b4f8513d0d78aa80878a5" kindref="member">PE_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" kindref="member">_partially</ref>)</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ac0c3e3c9771bdfbbcbd70392bd74c03a" kindref="member">PC_BASE_EXIT_CODE</ref><sp/>+<sp/>(r<sp/>-<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" kindref="member">_partially</ref>);</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1afac612f10342c3ccbfc7f30ae563184b" kindref="member">FAIL_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight></codeline>
<codeline lineno="2924" refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" kindref="member">InStream::textColor</ref>(</highlight></codeline>
<codeline lineno="2925"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>!(defined(ON_WINDOWS)<sp/>&amp;&amp;<sp/>(!defined(_MSC_VER)<sp/>||<sp/>_MSC_VER<sp/>&gt;<sp/>1400))<sp/>&amp;&amp;<sp/>defined(__GNUC__)</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((unused))</highlight></codeline>
<codeline lineno="2927"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/>color</highlight></codeline>
<codeline lineno="2929"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ON_WINDOWS)<sp/>&amp;&amp;<sp/>(!defined(_MSC_VER)<sp/>||<sp/>_MSC_VER<sp/>&gt;<sp/>1400)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>handle<sp/>=<sp/>GetStdHandle(STD_OUTPUT_HANDLE);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>color);</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(ON_WINDOWS)<sp/>&amp;&amp;<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isatty(2))</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(color)</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c" kindref="member">LightRed</ref>:</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\033[1;31m&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4" kindref="member">LightCyan</ref>:</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\033[1;36m&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a088a42a5a342bf630b6288c308d276e3" kindref="member">LightGreen</ref>:</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\033[1;32m&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad" kindref="member">LightYellow</ref>:</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\033[1;33m&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836" kindref="member">LightGray</ref>:</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\033[0m&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TESTLIB_THROW_EXIT_EXCEPTION_INSTEAD_OF_EXIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">exit_exception:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception<sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exitCode;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/>exit_exception(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exitCode):<sp/>exitCode(exitCode)<sp/>{}</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getExitCode()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exitCode;<sp/>}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight></codeline>
<codeline lineno="2969" refid="testlib_8h_1a9282a723c3cb0d8eaf1d904e975a5897" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a9282a723c3cb0d8eaf1d904e975a5897" kindref="member">halt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exitCode)<sp/>{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FOOTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" kindref="member">InStream::textColor</ref>(<ref refid="struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836" kindref="member">InStream::LightGray</ref>);</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Checker:<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1a00f5e960957827ed8846cf705f810473" kindref="member">checkerName</ref>.c_str());</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Exit<sp/>code:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>exitCode);</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" kindref="member">InStream::textColor</ref>(<ref refid="struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836" kindref="member">InStream::LightGray</ref>);</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f" kindref="member">__testlib_exitCode</ref><sp/>=<sp/>exitCode;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TESTLIB_THROW_EXIT_EXCEPTION_INSTEAD_OF_EXIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exit_exception(exitCode);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/>std::exit(exitCode);</highlight></codeline>
<codeline lineno="2981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__testlib_shouldCheckDirt(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77" kindref="member">_ok</ref><sp/>||<sp/>result<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" kindref="member">_points</ref><sp/>||<sp/>result<sp/>&gt;=<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" kindref="member">_partially</ref>;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>__testlib_appendMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;extra)<sp/>{</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>openPos<sp/>=<sp/>-1,<sp/>closePos<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>message.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message[i]<sp/>==<sp/><ref refid="struct_in_stream_1a582ee4c10e2543041466180e6134865a" kindref="member">InStream::OPEN_BRACKET</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openPos<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openPos<sp/>=<sp/>int(i);</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openPos<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message[i]<sp/>==<sp/><ref refid="struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8" kindref="member">InStream::CLOSE_BRACKET</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(closePos<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closePos<sp/>=<sp/>int(i);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closePos<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openPos<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>openPos<sp/>!=<sp/>INT_MAX</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>closePos<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>closePos<sp/>!=<sp/>INT_MAX</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>openPos<sp/>&lt;<sp/>closePos)<sp/>{</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>message.find(extra,<sp/>openPos);</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>std::string::npos<sp/>||<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(index)<sp/>&gt;=<sp/>closePos)<sp/>{</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>result(message);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.insert(closePos,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>extra);</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="struct_in_stream_1a582ee4c10e2543041466180e6134865a" kindref="member">InStream::OPEN_BRACKET</ref><sp/>+<sp/>extra<sp/>+<sp/><ref refid="struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8" kindref="member">InStream::CLOSE_BRACKET</ref>;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>__testlib_toPrintableMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message)<sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>openPos<sp/>=<sp/>-1,<sp/>closePos<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>message.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message[i]<sp/>==<sp/><ref refid="struct_in_stream_1a582ee4c10e2543041466180e6134865a" kindref="member">InStream::OPEN_BRACKET</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openPos<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openPos<sp/>=<sp/>int(i);</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openPos<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message[i]<sp/>==<sp/><ref refid="struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8" kindref="member">InStream::CLOSE_BRACKET</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(closePos<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closePos<sp/>=<sp/>int(i);</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closePos<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openPos<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>openPos<sp/>!=<sp/>INT_MAX</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>closePos<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>closePos<sp/>!=<sp/>INT_MAX</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>openPos<sp/>&lt;<sp/>closePos)<sp/>{</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>result(message);</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[openPos]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[closePos]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight></codeline>
<codeline lineno="3046" refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">InStream::quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)<sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00" kindref="member">TestlibFinalizeGuard::alive</ref>)</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a576c1be9a11f2136d2bfa955394d4575" kindref="member">testlibFinalizeGuard</ref>.<ref refid="struct_testlib_finalize_guard_1a59c31cc40e9f8a903d9da51c3cdd5186" kindref="member">quitCount</ref>++;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>message(msg);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>=<sp/><ref refid="testlib_8h_1a1a32c4d3bd87256731e67936766c65ca" kindref="member">trim</ref>(message);</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a4a0af2b3cb79c442b17b7aca7c434307" kindref="member">__testlib_hasTestCase</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77" kindref="member">_ok</ref>)</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>__testlib_appendMessage(message,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>case<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426" kindref="member">__testlib_testCase</ref>));</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426" kindref="member">__testlib_testCase</ref><sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>__testlib_appendMessage(message,<sp/>vtos(<ref refid="testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426" kindref="member">__testlib_testCase</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>test<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>__testlib_appendMessage(message,<sp/>vtos(<ref refid="testlib_8h_1a78d44a9b705b8375660cf7e4d99ea426" kindref="member">__testlib_testCase</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>test<sp/>cases&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>change<sp/>maxMessageLength.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Example:<sp/>&apos;inf.maxMessageLength<sp/>=<sp/>1024<sp/>*<sp/>1024;&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message.length()<sp/>&gt;<sp/><ref refid="struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a" kindref="member">maxMessageLength</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>warn<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;message<sp/>length<sp/>exceeds<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a" kindref="member">maxMessageLength</ref>)</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>the<sp/>message<sp/>is<sp/>truncated:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>warn<sp/>+<sp/>message.substr(0,<sp/><ref refid="struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a" kindref="member">maxMessageLength</ref><sp/>-<sp/>warn.length());</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ENABLE_UNEXPECTED_EOF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>)</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>;</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>==<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa" kindref="member">_scorer</ref><sp/>&amp;&amp;<sp/>result<sp/>!=<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>)</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95" kindref="member">quits</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Scorer<sp/>should<sp/>return<sp/>points<sp/>only.<sp/>Don&apos;t<sp/>use<sp/>a<sp/>quit<sp/>function.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref><sp/>!=<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6" kindref="member">_output</ref><sp/>&amp;&amp;<sp/>result<sp/>!=<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref><sp/>==<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" kindref="member">_input</ref><sp/>&amp;&amp;<sp/><ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>==<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" kindref="member">_validator</ref><sp/>&amp;&amp;<sp/><ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95" kindref="member">quits</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>__testlib_appendMessage(__testlib_appendMessage(message,<sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref>),<sp/></highlight><highlight class="stringliteral">&quot;line<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref>)));</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95" kindref="member">quits</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>__testlib_appendMessage(message,<sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref>));</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/>std::FILE<sp/>*resultFile;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>errorName;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__testlib_shouldCheckDirt(result))<sp/>{</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>!=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fadaea9b0ac8f600ff71b0f7616869deac" kindref="member">_interactor</ref><sp/>&amp;&amp;<sp/>!<ref refid="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" kindref="member">ouf</ref>.<ref refid="struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b" kindref="member">seekEof</ref>())</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43" kindref="member">_dirt</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Extra<sp/>information<sp/>in<sp/>the<sp/>output<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pctype<sp/>=<sp/>result<sp/>-<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" kindref="member">_partially</ref>;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPartial<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a9d802c77af97a77eec509a12bcf6ae77" kindref="member">_ok</ref>:</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ok<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">quitscrS</ref>(<ref refid="struct_in_stream_1a088a42a5a342bf630b6288c308d276e3" kindref="member">LightGreen</ref>,<sp/>errorName);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>:</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>answer<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">quitscrS</ref>(<ref refid="struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c" kindref="member">LightRed</ref>,<sp/>errorName);</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>:</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>output<sp/>format<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">quitscrS</ref>(<ref refid="struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c" kindref="member">LightRed</ref>,<sp/>errorName);</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>:</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FAIL<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">quitscrS</ref>(<ref refid="struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c" kindref="member">LightRed</ref>,<sp/>errorName);</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a42e718be5b94c0a545a2cffb0d7d1b43" kindref="member">_dirt</ref>:</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>output<sp/>format<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">quitscrS</ref>(<ref refid="struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4" kindref="member">LightCyan</ref>,<sp/>errorName);</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" kindref="member">_points</ref>:</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;points<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">quitscrS</ref>(<ref refid="struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad" kindref="member">LightYellow</ref>,<sp/>errorName);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>:</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>eof<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">quitscrS</ref>(<ref refid="struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4" kindref="member">LightCyan</ref>,<sp/>errorName);</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;=<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" kindref="member">_partially</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorName<sp/>=<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;partially<sp/>correct<sp/>(%d)<sp/>&quot;</highlight><highlight class="normal">,<sp/>pctype);</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isPartial<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">quitscrS</ref>(<ref refid="struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad" kindref="member">LightYellow</ref>,<sp/>errorName);</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;What<sp/>is<sp/>the<sp/>code<sp/>???<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultFile<sp/>=<sp/>std::fopen(<ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref>.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultFile<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>write<sp/>to<sp/>the<sp/>result<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" kindref="member">appesMode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(resultFile,<sp/></highlight><highlight class="stringliteral">&quot;&lt;?xml<sp/>version=\&quot;1.0\&quot;<sp/>encoding=\&quot;%s\&quot;?&gt;&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" kindref="member">appesModeEncoding</ref>.c_str());</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isPartial)</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(resultFile,<sp/></highlight><highlight class="stringliteral">&quot;&lt;result<sp/>outcome<sp/>=<sp/>\&quot;%s\&quot;<sp/>pctype<sp/>=<sp/>\&quot;%d\&quot;&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59" kindref="member">outcomes</ref>[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a5e1b770ccbf2809f1447783f97d4cece" kindref="member">_partially</ref>].c_str(),<sp/>pctype);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" kindref="member">_points</ref>)</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(resultFile,<sp/></highlight><highlight class="stringliteral">&quot;&lt;result<sp/>outcome<sp/>=<sp/>\&quot;%s\&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59" kindref="member">outcomes</ref>[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>result].c_str());</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1acb5280d0779ed8499169e3537ab20fd2" kindref="member">__testlib_points</ref><sp/>==<sp/>std::numeric_limits&lt;float&gt;::infinity())</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>points,<sp/>but<sp/>infinity<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stringPoints<sp/>=<sp/>removeDoubleTrailingZeroes(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;%.10f&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1acb5280d0779ed8499169e3537ab20fd2" kindref="member">__testlib_points</ref>));</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(resultFile,<sp/></highlight><highlight class="stringliteral">&quot;&lt;result<sp/>outcome<sp/>=<sp/>\&quot;%s\&quot;<sp/>points<sp/>=<sp/>\&quot;%s\&quot;&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a02aa6e42b031ee29efb38fcc1f7a1d59" kindref="member">outcomes</ref>[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>result].c_str(),<sp/>stringPoints.c_str());</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a7920954e072895d70f2127ccc7af789d" kindref="member">xmlSafeWrite</ref>(resultFile,<sp/>__testlib_toPrintableMessage(message).c_str());</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(resultFile,<sp/></highlight><highlight class="stringliteral">&quot;&lt;/result&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(resultFile,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__testlib_toPrintableMessage(message).c_str());</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>resultFile<sp/>||<sp/>fclose(resultFile)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>write<sp/>to<sp/>the<sp/>result<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb" kindref="member">quitscr</ref>(<ref refid="struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836" kindref="member">LightGray</ref>,<sp/>__testlib_toPrintableMessage(message).c_str());</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" kindref="member">ouf</ref>.<ref refid="struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac" kindref="member">ans</ref>.<ref refid="struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a675e9c0cb400805c69d94e7cdded4494" kindref="member">tout</ref>.is_open())</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a675e9c0cb400805c69d94e7cdded4494" kindref="member">tout</ref>.close();</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" kindref="member">textColor</ref>(<ref refid="struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836" kindref="member">LightGray</ref>);</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;See<sp/>file<sp/>to<sp/>check<sp/>exit<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a9282a723c3cb0d8eaf1d904e975a5897" kindref="member">halt</ref>(<ref refid="testlib_8h_1ac237ec9b60cb9035a69ee70750d69141" kindref="member">resultExitCode</ref>(result));</highlight></codeline>
<codeline lineno="3184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>3,<sp/>4)))</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189" refid="struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5" kindref="member">InStream::quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(msg,<sp/>msg,<sp/>message);</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">InStream::quit</ref>(result,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="3192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>4,<sp/>5)))</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197" refid="struct_in_stream_1a0c969f83376d50af370615d44186647d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0c969f83376d50af370615d44186647d" kindref="member">InStream::quitif</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition,<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(condition)<sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(msg,<sp/>msg,<sp/>message);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">InStream::quit</ref>(result,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"></highlight></codeline>
<codeline lineno="3204" refid="struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95" kindref="member">InStream::quits</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/>std::string<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">InStream::quit</ref>(result,<sp/>msg.c_str());</highlight></codeline>
<codeline lineno="3206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208" refid="struct_in_stream_1a7920954e072895d70f2127ccc7af789d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a7920954e072895d70f2127ccc7af789d" kindref="member">InStream::xmlSafeWrite</ref>(std::FILE<sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)<sp/>{</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lmsg<sp/>=<sp/>strlen(msg);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lmsg;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(file,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(file,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(file,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(file,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&amp;quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>msg[i]<sp/>&amp;&amp;<sp/>msg[i]<sp/>&lt;=<sp/>31)<sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(file,<sp/></highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(file,<sp/></highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>msg[i]);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight></codeline>
<codeline lineno="3235" refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5" kindref="member">InStream::quitscrS</ref>(<ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/>color,<sp/>std::string<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb" kindref="member">quitscr</ref>(color,<sp/>msg.c_str());</highlight></codeline>
<codeline lineno="3237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight></codeline>
<codeline lineno="3239" refid="struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb" kindref="member">InStream::quitscr</ref>(<ref refid="testlib_8h_1a4cfc63e05db4883dc4b60a1245a9ffc5" kindref="member">WORD</ref><sp/>color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)<sp/>{</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" kindref="member">textColor</ref>(color);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>msg);</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" kindref="member">textColor</ref>(<ref refid="struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836" kindref="member">LightGray</ref>);</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight></codeline>
<codeline lineno="3247" refid="struct_in_stream_1a0daf92605da53c68648ad78572965ca3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0daf92605da53c68648ad78572965ca3" kindref="member">InStream::reset</ref>(std::FILE<sp/>*file)<sp/>{</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref><sp/>&amp;&amp;<sp/><ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref>)</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>reset<sp/>standard<sp/>handle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref>)</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref><sp/>&amp;&amp;<sp/>NULL<sp/>==<sp/>file)</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>(file<sp/>=<sp/>std::fopen(<ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref>.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref><sp/>==<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6" kindref="member">_output</ref>)</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95" kindref="member">quits</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Output<sp/>file<sp/>not<sp/>found:<sp/>\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref><sp/>==<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61" kindref="member">_answer</ref>)</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95" kindref="member">quits</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Answer<sp/>file<sp/>not<sp/>found:<sp/>\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_set_binary(file);</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref>)</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_file_input_stream_reader" kindref="compound">FileInputStreamReader</ref>(file,<sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_buffered_file_input_stream_reader" kindref="compound">BufferedFileInputStreamReader</ref>(file,<sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight></codeline>
<codeline lineno="3277" refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">InStream::init</ref>(std::string<sp/>fileName,<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddb" kindref="member">TMode</ref><sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>=<sp/>fileName;</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;mode<sp/>=<sp/><ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref>;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>stream;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/>stream.open(fileName.c_str(),<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stream.is_open())<sp/>{</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::streampos<sp/>start<sp/>=<sp/>stream.tellg();</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream.seekg(0,<sp/>std::ios::end);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::streampos<sp/>end<sp/>=<sp/>stream.tellg();</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fileSize<sp/>=<sp/>size_t(end<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream.close();</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>change<sp/>maxFileSize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Example:<sp/>&apos;inf.maxFileSize<sp/>=<sp/>256<sp/>*<sp/>1024<sp/>*<sp/>1024;&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileSize<sp/>&gt;<sp/><ref refid="struct_in_stream_1a14e6d7455706cea771265a7ab8407918" kindref="member">maxFileSize</ref>)</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5" kindref="member">quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/></highlight><highlight class="stringliteral">&quot;File<sp/>size<sp/>exceeds<sp/>%d<sp/>bytes,<sp/>size<sp/>is<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<ref refid="struct_in_stream_1a14e6d7455706cea771265a7ab8407918" kindref="member">maxFileSize</ref>),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(fileSize));</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0daf92605da53c68648ad78572965ca3" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="3299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight></codeline>
<codeline lineno="3301" refid="struct_in_stream_1a4b78654581508e7ace12cdda20de48df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">InStream::init</ref>(std::FILE<sp/>*f,<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddb" kindref="member">TMode</ref><sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;untitled&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;mode<sp/>=<sp/><ref refid="struct_in_stream_1a22c9fbb12ed6da923353c3a477881686" kindref="member">mode</ref>;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>stdin)</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stdin&quot;</highlight><highlight class="normal">,<sp/><ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>stdout)</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stdout&quot;</highlight><highlight class="normal">,<sp/><ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>stderr)</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stderr&quot;</highlight><highlight class="normal">,<sp/><ref refid="struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717" kindref="member">stdfile</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"></highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a0daf92605da53c68648ad78572965ca3" kindref="member">reset</ref>(f);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight></codeline>
<codeline lineno="3316" refid="struct_in_stream_1a1ee5c101df11ec9fe00867379bf3937f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a1ee5c101df11ec9fe00867379bf3937f" kindref="member">InStream::skipBom</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>utf8Bom<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\xEF\xBB\xBF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>utf8Bom.size()<sp/>&amp;&amp;<sp/><ref refid="struct_in_stream_1af208d97fa6484d10b88d611012fce578" kindref="member">curChar</ref>()<sp/>==<sp/>utf8Bom[index])<sp/>{</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a15dbd488971ba0da79085f7bd980f1f1" kindref="member">skipChar</ref>();</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>utf8Bom.size())<sp/>{</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a8c656e9ae7175e852033fbdffe41550b" kindref="member">unreadChar</ref>(utf8Bom[index<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index--;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight></codeline>
<codeline lineno="3331" refid="struct_in_stream_1af208d97fa6484d10b88d611012fce578" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af208d97fa6484d10b88d611012fce578" kindref="member">InStream::curChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>char(<ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a80448788833a59a503853b4a45a96137" kindref="member">curChar</ref>());</highlight></codeline>
<codeline lineno="3333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight></codeline>
<codeline lineno="3335" refid="struct_in_stream_1af46102c51b215e59e3b9e993ac999fe5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af46102c51b215e59e3b9e993ac999fe5" kindref="member">InStream::nextChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>char(<ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>());</highlight></codeline>
<codeline lineno="3337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight></codeline>
<codeline lineno="3339" refid="struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205" kindref="member">InStream::readChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af46102c51b215e59e3b9e993ac999fe5" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="3341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight></codeline>
<codeline lineno="3343" refid="struct_in_stream_1a0c49c9fe193752b77e17fc7e45b0965b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205" kindref="member">InStream::readChar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref><sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881" kindref="member">getLine</ref>();</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>found<sp/>=<sp/><ref refid="struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205" kindref="member">readChar</ref>();</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>found)<sp/>{</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="testlib_8h_1a8da048ae3bc25fe4bb2dcfceb53a90fc" kindref="member">isEoln</ref>(found))</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Unexpected<sp/>character<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(1,<sp/>found)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;,<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(1,<sp/>c)<sp/>+</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>expected&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Unexpected<sp/>character<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(found)))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(1,<sp/>c)<sp/>+</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>expected&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight></codeline>
<codeline lineno="3357" refid="struct_in_stream_1a012e968b18b359b82897db805faeb0f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a012e968b18b359b82897db805faeb0f6" kindref="member">InStream::readSpace</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205" kindref="member">readChar</ref>(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"></highlight></codeline>
<codeline lineno="3361" refid="struct_in_stream_1a8c656e9ae7175e852033fbdffe41550b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a8c656e9ae7175e852033fbdffe41550b" kindref="member">InStream::unreadChar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(c);</highlight></codeline>
<codeline lineno="3363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight></codeline>
<codeline lineno="3365" refid="struct_in_stream_1a15dbd488971ba0da79085f7bd980f1f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a15dbd488971ba0da79085f7bd980f1f1" kindref="member">InStream::skipChar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1ad01b8b4dd307c70472afb7dae417401a" kindref="member">skipChar</ref>();</highlight></codeline>
<codeline lineno="3367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight></codeline>
<codeline lineno="3369" refid="struct_in_stream_1a3caea7dc5003207a13b690e1e6523759" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3caea7dc5003207a13b690e1e6523759" kindref="member">InStream::skipBlanks</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c" kindref="member">isBlanks</ref>(<ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a80448788833a59a503853b4a45a96137" kindref="member">curChar</ref>()))</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1ad01b8b4dd307c70472afb7dae417401a" kindref="member">skipChar</ref>();</highlight></codeline>
<codeline lineno="3372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight></codeline>
<codeline lineno="3374" refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">InStream::readWord</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>;</highlight></codeline>
<codeline lineno="3377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379" refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">InStream::readWordTo</ref>(std::string<sp/>&amp;result)<sp/>{</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref>)</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a3caea7dc5003207a13b690e1e6523759" kindref="member">skipBlanks</ref>();</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref><sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881" kindref="member">getLine</ref>();</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur<sp/>==<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>)</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>file<sp/>-<sp/>token<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c" kindref="member">isBlanks</ref>(cur))</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>white-space<sp/>-<sp/>token<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/>result.clear();</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="testlib_8h_1aedd6eec8331fb12c3330f6b7a1227e2c" kindref="member">isBlanks</ref>(cur)<sp/>||<sp/>cur<sp/>==<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>))<sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>char(cur);</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>change<sp/>maxTokenLength.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Example:<sp/>&apos;inf.maxTokenLength<sp/>=<sp/>128<sp/>*<sp/>1024<sp/>*<sp/>1024;&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.length()<sp/>&gt;<sp/><ref refid="struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26" kindref="member">maxTokenLength</ref>)</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5" kindref="member">quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Length<sp/>of<sp/>token<sp/>exceeds<sp/>%d,<sp/>token<sp/>is<sp/>&apos;%s...&apos;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<ref refid="struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26" kindref="member">maxTokenLength</ref>),</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_part(result).c_str());</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(cur);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.length()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>file<sp/>or<sp/>white-space<sp/>-<sp/>token<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412" refid="struct_in_stream_1aab5bf73477536435d39efd209bf672d0" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1aab5bf73477536435d39efd209bf672d0" kindref="member">InStream::readToken</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>();</highlight></codeline>
<codeline lineno="3414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"></highlight></codeline>
<codeline lineno="3416" refid="struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72" kindref="member">InStream::readTokenTo</ref>(std::string<sp/>&amp;result)<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(result);</highlight></codeline>
<codeline lineno="3418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3421"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>__testlib_part(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>t;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.length()<sp/>&lt;=<sp/>64)</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.substr(0,<sp/>30)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal"><sp/>+<sp/>t.substr(s.length()<sp/>-<sp/>31,<sp/>31);</highlight></codeline>
<codeline lineno="3434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight></codeline>
<codeline lineno="3436" refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__testlib_readMany(readMany,<sp/>readOne,<sp/>typeName,<sp/>space)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3437"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(size<sp/>&lt;<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quit(_fail,<sp/>#readMany<sp/>&quot;:<sp/>size<sp/>should<sp/>be<sp/>non-negative.&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3439"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(size<sp/>&gt;<sp/>100000000)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quit(_fail,<sp/>#readMany<sp/>&quot;:<sp/>size<sp/>should<sp/>be<sp/>at<sp/>most<sp/>100000000.&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>std::vector&lt;typeName&gt;<sp/>result(size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3443"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>readManyIteration<sp/>=<sp/>indexBase;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3444"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3445"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>readOne;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readManyIteration++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(strict<sp/>&amp;&amp;<sp/>space<sp/>&amp;&amp;<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/>size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readSpace();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>readManyIteration<sp/>=<sp/>NO_INDEX;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>result;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3455"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"></highlight></codeline>
<codeline lineno="3457" refid="struct_in_stream_1a7848236cb25239dc96ac1d01953116c9" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">InStream::readWord</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>);</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p.<ref refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" kindref="member">matches</ref>(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>))<sp/>{</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref><sp/>==<sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Token<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Token<sp/>parameter<sp/>[name=&quot;</highlight><highlight class="normal"><sp/>+<sp/>variableName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>)<sp/>+</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Token<sp/>element<sp/>[index=&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_part(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Token<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>variableName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_part(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variableName.empty())</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variableName);</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="3485" refid="struct_in_stream_1a0382d1f95cecf40e7c728c033c14123b" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" kindref="member">InStream::readWords</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" kindref="member">readWords</ref>,<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(p,<sp/>variablesName),<sp/>std::string,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="3489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight></codeline>
<codeline lineno="3491" refid="struct_in_stream_1aaa61148d12958728cd443f21b2ed0aa3" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" kindref="member">InStream::readWords</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" kindref="member">readWords</ref>,<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(),<sp/>std::string,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight></codeline>
<codeline lineno="3495" refid="struct_in_stream_1a33a01a1ab403b91c58d630b2650f999e" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">InStream::readWord</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(<ref refid="classpattern" kindref="compound">pattern</ref>(ptrn),<sp/>variableName);</highlight></codeline>
<codeline lineno="3497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"></highlight></codeline>
<codeline lineno="3499"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="3500" refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" kindref="member">InStream::readWords</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>p(ptrn);</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf" kindref="member">readWords</ref>,<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(p,<sp/>variablesName),<sp/>std::string,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="3505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight></codeline>
<codeline lineno="3507" refid="struct_in_stream_1aa7e276efc82ccd5bcefbfaf8f0391677" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1aab5bf73477536435d39efd209bf672d0" kindref="member">InStream::readToken</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(p,<sp/>variableName);</highlight></codeline>
<codeline lineno="3509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="3512" refid="struct_in_stream_1a5f2d2a617eed60c5a05872af6ece6855" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" kindref="member">InStream::readTokens</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" kindref="member">readTokens</ref>,<sp/><ref refid="struct_in_stream_1aab5bf73477536435d39efd209bf672d0" kindref="member">readToken</ref>(p,<sp/>variablesName),<sp/>std::string,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="3516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight></codeline>
<codeline lineno="3518" refid="struct_in_stream_1a7b79dfec1ae85f251876f603751036d9" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" kindref="member">InStream::readTokens</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" kindref="member">readTokens</ref>,<sp/><ref refid="struct_in_stream_1aab5bf73477536435d39efd209bf672d0" kindref="member">readToken</ref>(),<sp/>std::string,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"></highlight></codeline>
<codeline lineno="3522" refid="struct_in_stream_1a1551acb574a25586a2ba2ad594398e8c" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1aab5bf73477536435d39efd209bf672d0" kindref="member">InStream::readToken</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(ptrn,<sp/>variableName);</highlight></codeline>
<codeline lineno="3524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="3527" refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" kindref="member">InStream::readTokens</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>p(ptrn);</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a0c556560eb05d89757fc854d38ae650b" kindref="member">readTokens</ref>,<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(p,<sp/>variablesName),<sp/>std::string,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="3532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3534" refid="struct_in_stream_1aae65d2db41677626fd5ffa446be65003" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">InStream::readWordTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(result);</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p.<ref refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" kindref="member">matches</ref>(result))<sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Token<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Token<sp/>parameter<sp/>[name=&quot;</highlight><highlight class="normal"><sp/>+<sp/>variableName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(result)<sp/>+</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variableName.empty())</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variableName);</highlight></codeline>
<codeline lineno="3546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548" refid="struct_in_stream_1a78c7969db04a87aea6263c8563dc5c93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">InStream::readWordTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(result,<sp/><ref refid="classpattern" kindref="compound">pattern</ref>(ptrn),<sp/>variableName);</highlight></codeline>
<codeline lineno="3550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight></codeline>
<codeline lineno="3552" refid="struct_in_stream_1a6cc04d722a5e707b0450396c671c8732" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72" kindref="member">InStream::readTokenTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(result,<sp/>p,<sp/>variableName);</highlight></codeline>
<codeline lineno="3554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"></highlight></codeline>
<codeline lineno="3556" refid="struct_in_stream_1ac191b4317fc175b291cae1fa4fc7b399" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72" kindref="member">InStream::readTokenTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(result,<sp/>ptrn,<sp/>variableName);</highlight></codeline>
<codeline lineno="3558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal">__attribute__((pure))</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equals(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>integer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integer<sp/>==<sp/><ref refid="testlib_8h_1af17a13b2ae0e9c24c020ac1f044f30c2" kindref="member">LLONG_MIN</ref>)</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;-9223372036854775808&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integer<sp/>==<sp/>0LL)</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integer<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>s[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integer<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s++,<sp/>length--,<sp/>integer<sp/>=<sp/>-integer;</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(integer<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>int(integer<sp/>%<sp/>10);</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[length<sp/>-<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit)</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length--;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal">__attribute__((pure))</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equals(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>integer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integer<sp/>==<sp/><ref refid="testlib_8h_1aa1dd7166a75b73ad62b111ae6fc17c59" kindref="member">ULLONG_MAX</ref>)</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;18446744073709551615&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integer<sp/>==<sp/>0ULL)</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(integer<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>int(integer<sp/>%<sp/>10);</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[length<sp/>-<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit)</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"></highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length--;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stringToDouble(<ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>strlen(buffer);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minusCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>plusCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decimalPointCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>buffer[i]<sp/>&amp;&amp;<sp/>buffer[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>||<sp/>buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>||<sp/>buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>||<sp/>buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>buffer[i]<sp/>&amp;&amp;<sp/>buffer[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digitCount++;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>||<sp/>buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eCount++;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minusCount++;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plusCount++;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decimalPointCount++;</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>for<sp/>sure<sp/>is<sp/>not<sp/>a<sp/>number<sp/>in<sp/>standard<sp/>notation<sp/>or<sp/>in<sp/>e-notation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(digitCount<sp/>==<sp/>0<sp/>||<sp/>minusCount<sp/>&gt;<sp/>2<sp/>||<sp/>plusCount<sp/>&gt;<sp/>2<sp/>||<sp/>decimalPointCount<sp/>&gt;<sp/>1<sp/>||<sp/>eCount<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suffix<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[length<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memset(suffix,<sp/>0,<sp/>length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scanned<sp/>=<sp/>std::sscanf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%lf%s&quot;</highlight><highlight class="normal">,<sp/>&amp;result,<sp/>suffix);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty<sp/>=<sp/>strlen(suffix)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>suffix;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scanned<sp/>==<sp/>1<sp/>||<sp/>(scanned<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>empty))<sp/>{</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__testlib_isNaN(result))</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stringToDouble(<ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>buffer.length();<sp/>i++)</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found<sp/>(it<sp/>contains<sp/>\\0)&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringToDouble(in,<sp/>buffer.c_str());</highlight></codeline>
<codeline lineno="3677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stringToStrictDouble(<ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount)<sp/>{</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minAfterPointDigitCount<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;stringToStrictDouble:<sp/>minAfterPointDigitCount<sp/>should<sp/>be<sp/>non-negative.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minAfterPointDigitCount<sp/>&gt;<sp/>maxAfterPointDigitCount)</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;stringToStrictDouble:<sp/>minAfterPointDigitCount<sp/>should<sp/>be<sp/>less<sp/>or<sp/>equal<sp/>to<sp/>maxAfterPointDigitCount.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>strlen(buffer);</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0<sp/>||<sp/>length<sp/>&gt;<sp/>1000)</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>strict<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(buffer[0]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>buffer[0]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>strict<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointPos<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointPos<sp/>&gt;<sp/>-1)</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>strict<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointPos<sp/>=<sp/>int(i);</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(buffer[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>buffer[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>strict<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[length<sp/>-<sp/>1]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>buffer[length<sp/>-<sp/>1]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>strict<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>afterDigitsCount<sp/>=<sp/>(pointPos<sp/>==<sp/>-1<sp/>?<sp/>0<sp/>:<sp/>int(length)<sp/>-<sp/>pointPos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afterDigitsCount<sp/>&lt;<sp/>minAfterPointDigitCount<sp/>||<sp/>afterDigitsCount<sp/>&gt;<sp/>maxAfterPointDigitCount)</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>strict<sp/>double<sp/>with<sp/>number<sp/>of<sp/>digits<sp/>after<sp/>point<sp/>in<sp/>range<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>vtos(minAfterPointDigitCount)</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>vtos(maxAfterPointDigitCount)</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;],<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str()</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstDigitPos<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>buffer[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstDigitPos<sp/>=<sp/>int(i);</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(firstDigitPos<sp/>&gt;<sp/>1<sp/>||<sp/>firstDigitPos<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>strict<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[firstDigitPos]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>firstDigitPos<sp/>+<sp/>1<sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(length)</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>buffer[firstDigitPos<sp/>+<sp/>1]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>buffer[firstDigitPos<sp/>+<sp/>1]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>strict<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suffix<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[length<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memset(suffix,<sp/>0,<sp/>length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scanned<sp/>=<sp/>std::sscanf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%lf%s&quot;</highlight><highlight class="normal">,<sp/>&amp;result,<sp/>suffix);</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty<sp/>=<sp/>strlen(suffix)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>suffix;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scanned<sp/>==<sp/>1<sp/>||<sp/>(scanned<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>empty))<sp/>{</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__testlib_isNaN(result)<sp/>||<sp/>__testlib_isInfinite(result))</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>result<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Redundant<sp/>minus<sp/>in<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stringToStrictDouble(<ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>buffer,</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount)<sp/>{</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>buffer.length();<sp/>i++)</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>double,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found<sp/>(it<sp/>contains<sp/>\\0)&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringToStrictDouble(in,<sp/>buffer.c_str(),<sp/>minAfterPointDigitCount,<sp/>maxAfterPointDigitCount);</highlight></codeline>
<codeline lineno="3757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stringToLongLong(<ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>strlen(buffer);</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0<sp/>||<sp/>length<sp/>&gt;<sp/>20)</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_minus<sp/>=<sp/>(length<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>buffer[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zeroes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>processingZeroes<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>(has_minus<sp/>?<sp/>1<sp/>:<sp/>0);<sp/>i<sp/>&lt;<sp/>int(length);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processingZeroes)</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeroes++;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processingZeroes<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>buffer[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>std::stoll(buffer);</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"></highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((zeroes<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(result<sp/>!=<sp/>0<sp/>||<sp/>has_minus))<sp/>||<sp/>zeroes<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"></highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stringToLongLong(<ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>buffer.length();<sp/>i++)</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found<sp/>(it<sp/>contains<sp/>\\0)&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringToLongLong(in,<sp/>buffer.c_str());</highlight></codeline>
<codeline lineno="3798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stringToUnsignedLongLong(<ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>strlen(buffer);</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0<sp/>||<sp/>length<sp/>&gt;<sp/>20)</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>unsigned<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>buffer[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>unsigned<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>int(length);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>buffer[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>unsigned<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>std::stoull(buffer);</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>unsigned<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>unsigned<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stringToUnsignedLongLong(<ref refid="struct_in_stream" kindref="compound">InStream</ref><sp/>&amp;in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>buffer.length();<sp/>i++)</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>unsigned<sp/>integer,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(buffer)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found<sp/>(it<sp/>contains<sp/>\\0)&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringToUnsignedLongLong(in,<sp/>buffer.c_str());</highlight></codeline>
<codeline lineno="3830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832" refid="struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08" kindref="member">InStream::readInteger</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/><ref refid="struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b" kindref="member">seekEof</ref>())</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>file<sp/>-<sp/>int32<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>);</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>stringToLongLong(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>);</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>INT_MIN<sp/>||<sp/>value<sp/>&gt;<sp/>INT_MAX)</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>int32,<sp/>but<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>found&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(value);</highlight></codeline>
<codeline lineno="3843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight></codeline>
<codeline lineno="3845" refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" kindref="member">InStream::readLong</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/><ref refid="struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b" kindref="member">seekEof</ref>())</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>file<sp/>-<sp/>int64<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringToLongLong(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>);</highlight></codeline>
<codeline lineno="3852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight></codeline>
<codeline lineno="3854" refid="struct_in_stream_1a473c29087621184bb71998a12957e822" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a473c29087621184bb71998a12957e822" kindref="member">InStream::readUnsignedLong</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/><ref refid="struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b" kindref="member">seekEof</ref>())</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>file<sp/>-<sp/>int64<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7" kindref="member">readWordTo</ref>(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>);</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"></highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringToUnsignedLongLong(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>);</highlight></codeline>
<codeline lineno="3861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight></codeline>
<codeline lineno="3863" refid="struct_in_stream_1a1398548ec0f156ddc9add251addb63c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" kindref="member">InStream::readLong</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" kindref="member">readLong</ref>();</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>minv<sp/>||<sp/>result<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref><sp/>==<sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Integer<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Integer<sp/>parameter<sp/>[name=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Integer<sp/>element<sp/>[index=&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Integer<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variableName.empty())<sp/>{</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd" kindref="member">addBoundsHit</ref>(variableName,<sp/><ref refid="struct_validator_bounds_hit" kindref="compound">ValidatorBoundsHit</ref>(minv<sp/>==<sp/>result,<sp/>maxv<sp/>==<sp/>result));</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1aaf48c6b401e8417c3da493f28ca65061" kindref="member">adjustConstantBounds</ref>(variableName,<sp/>minv,<sp/>maxv);</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variableName);</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal">std::vector&lt;long<sp/>long&gt;</highlight></codeline>
<codeline lineno="3895" refid="struct_in_stream_1a469d95f96c09746781621480b74c5c83" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a469d95f96c09746781621480b74c5c83" kindref="member">InStream::readLongs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a469d95f96c09746781621480b74c5c83" kindref="member">readLongs</ref>,<sp/><ref refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" kindref="member">readLong</ref>(minv,<sp/>maxv,<sp/>variablesName),<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="3899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901" refid="struct_in_stream_1ab135bb75d235e57fea89a248acd51015" refkind="member"><highlight class="normal">std::vector&lt;long<sp/>long&gt;<sp/><ref refid="struct_in_stream_1a469d95f96c09746781621480b74c5c83" kindref="member">InStream::readLongs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a469d95f96c09746781621480b74c5c83" kindref="member">readLongs</ref>,<sp/><ref refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" kindref="member">readLong</ref>(),<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3906" refid="struct_in_stream_1ac168f51d536fd2fef12d6aa87ff5795f" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a473c29087621184bb71998a12957e822" kindref="member">InStream::readUnsignedLong</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="struct_in_stream_1a473c29087621184bb71998a12957e822" kindref="member">readUnsignedLong</ref>();</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>minv<sp/>||<sp/>result<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref><sp/>==<sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Unsigned<sp/>integer<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Unsigned<sp/>integer<sp/>parameter<sp/>[name=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Unsigned<sp/>integer<sp/>element<sp/>[index=&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Unsigned<sp/>integer<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variableName.empty())<sp/>{</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd" kindref="member">addBoundsHit</ref>(variableName,<sp/><ref refid="struct_validator_bounds_hit" kindref="compound">ValidatorBoundsHit</ref>(minv<sp/>==<sp/>result,<sp/>maxv<sp/>==<sp/>result));</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1aaf48c6b401e8417c3da493f28ca65061" kindref="member">adjustConstantBounds</ref>(variableName,<sp/>minv,<sp/>maxv);</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variableName);</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight></codeline>
<codeline lineno="3940" refid="struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a" refkind="member"><highlight class="normal">std::vector&lt;unsigned<sp/>long<sp/>long&gt;<sp/><ref refid="struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a" kindref="member">InStream::readUnsignedLongs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a" kindref="member">readUnsignedLongs</ref>,<sp/><ref refid="struct_in_stream_1a473c29087621184bb71998a12957e822" kindref="member">readUnsignedLong</ref>(minv,<sp/>maxv,<sp/>variablesName),<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="3945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"></highlight></codeline>
<codeline lineno="3947" refid="struct_in_stream_1a5d3141608fafc3797171a3ea7627ec4d" refkind="member"><highlight class="normal">std::vector&lt;unsigned<sp/>long<sp/>long&gt;<sp/><ref refid="struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a" kindref="member">InStream::readUnsignedLongs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a" kindref="member">readUnsignedLongs</ref>,<sp/><ref refid="struct_in_stream_1a473c29087621184bb71998a12957e822" kindref="member">readUnsignedLong</ref>(),<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3952" refid="struct_in_stream_1aac4b9f822f2471eb19f89e3c0d78169b" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd" kindref="member">InStream::readLong</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a473c29087621184bb71998a12957e822" kindref="member">readUnsignedLong</ref>(minv,<sp/>maxv,<sp/>variableName);</highlight></codeline>
<codeline lineno="3954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight></codeline>
<codeline lineno="3956" refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">InStream::readInt</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08" kindref="member">readInteger</ref>();</highlight></codeline>
<codeline lineno="3958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"></highlight></codeline>
<codeline lineno="3960" refid="struct_in_stream_1a0811e321fbb08005ef2dec953d6f3256" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">InStream::readInt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">readInt</ref>();</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>minv<sp/>||<sp/>result<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref><sp/>==<sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Integer<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Integer<sp/>parameter<sp/>[name=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Integer<sp/>element<sp/>[index=&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Integer<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toHumanReadableString(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variableName.empty())<sp/>{</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd" kindref="member">addBoundsHit</ref>(variableName,<sp/><ref refid="struct_validator_bounds_hit" kindref="compound">ValidatorBoundsHit</ref>(minv<sp/>==<sp/>result,<sp/>maxv<sp/>==<sp/>result));</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1aaf48c6b401e8417c3da493f28ca65061" kindref="member">adjustConstantBounds</ref>(variableName,<sp/>minv,<sp/>maxv);</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variableName);</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight></codeline>
<codeline lineno="3991" refid="struct_in_stream_1a789739800a5332fb69578d60fef57947" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08" kindref="member">InStream::readInteger</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">readInt</ref>(minv,<sp/>maxv,<sp/>variableName);</highlight></codeline>
<codeline lineno="3993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight></codeline>
<codeline lineno="3995" refid="struct_in_stream_1afe94166e208381f17f49906ee5d50ae1" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="struct_in_stream_1afe94166e208381f17f49906ee5d50ae1" kindref="member">InStream::readInts</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1afe94166e208381f17f49906ee5d50ae1" kindref="member">readInts</ref>,<sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">readInt</ref>(minv,<sp/>maxv,<sp/>variablesName),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="3999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight></codeline>
<codeline lineno="4001" refid="struct_in_stream_1a9dc7971488f79c36b0c039faac9a91b1" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="struct_in_stream_1afe94166e208381f17f49906ee5d50ae1" kindref="member">InStream::readInts</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1afe94166e208381f17f49906ee5d50ae1" kindref="member">readInts</ref>,<sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">readInt</ref>(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight></codeline>
<codeline lineno="4005" refid="struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea" kindref="member">InStream::readIntegers</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea" kindref="member">readIntegers</ref>,<sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">readInt</ref>(minv,<sp/>maxv,<sp/>variablesName),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="4009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight></codeline>
<codeline lineno="4011" refid="struct_in_stream_1ab76c62ce0113ca54feb21c1bd61611cf" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea" kindref="member">InStream::readIntegers</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea" kindref="member">readIntegers</ref>,<sp/><ref refid="struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38" kindref="member">readInt</ref>(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4015" refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" kindref="member">InStream::readReal</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/><ref refid="struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b" kindref="member">seekEof</ref>())</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>file<sp/>-<sp/>double<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringToDouble(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>());</highlight></codeline>
<codeline lineno="4020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight></codeline>
<codeline lineno="4022" refid="struct_in_stream_1a7409a09698273a264eaa9069ecf90abf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a7409a09698273a264eaa9069ecf90abf" kindref="member">InStream::readDouble</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" kindref="member">readReal</ref>();</highlight></codeline>
<codeline lineno="4024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight></codeline>
<codeline lineno="4026" refid="struct_in_stream_1afefbbd644f24959a3c0dca545c50ca8d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" kindref="member">InStream::readReal</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" kindref="member">readReal</ref>();</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>minv<sp/>||<sp/>result<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref><sp/>==<sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Double<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(maxv)<sp/>+</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Double<sp/>parameter<sp/>[name=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Double<sp/>element<sp/>[index=&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Double<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"></highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variableName.empty())<sp/>{</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd" kindref="member">addBoundsHit</ref>(variableName,<sp/><ref refid="struct_validator_bounds_hit" kindref="compound">ValidatorBoundsHit</ref>(</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82" kindref="member">doubleDelta</ref>(minv,<sp/>result)<sp/>&lt;<sp/><ref refid="struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128" kindref="member">ValidatorBoundsHit::EPS</ref>,</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82" kindref="member">doubleDelta</ref>(maxv,<sp/>result)<sp/>&lt;<sp/><ref refid="struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128" kindref="member">ValidatorBoundsHit::EPS</ref></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1aaf48c6b401e8417c3da493f28ca65061" kindref="member">adjustConstantBounds</ref>(variableName,<sp/>minv,<sp/>maxv);</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variableName);</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal">std::vector&lt;double&gt;</highlight></codeline>
<codeline lineno="4061" refid="struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b" kindref="member">InStream::readReals</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b" kindref="member">readReals</ref>,<sp/><ref refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" kindref="member">readReal</ref>(minv,<sp/>maxv,<sp/>variablesName),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="4065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight></codeline>
<codeline lineno="4067" refid="struct_in_stream_1a30e0fec1354eccc823c46fb2decb6a5d" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b" kindref="member">InStream::readReals</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b" kindref="member">readReals</ref>,<sp/><ref refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" kindref="member">readReal</ref>(),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"></highlight></codeline>
<codeline lineno="4071" refid="struct_in_stream_1a477dc26871b7cbb20c2d3c5aa7f51a8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a7409a09698273a264eaa9069ecf90abf" kindref="member">InStream::readDouble</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2" kindref="member">readReal</ref>(minv,<sp/>maxv,<sp/>variableName);</highlight></codeline>
<codeline lineno="4073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"></highlight></codeline>
<codeline lineno="4075"><highlight class="normal">std::vector&lt;double&gt;</highlight></codeline>
<codeline lineno="4076" refid="struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e" kindref="member">InStream::readDoubles</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e" kindref="member">readDoubles</ref>,<sp/><ref refid="struct_in_stream_1a7409a09698273a264eaa9069ecf90abf" kindref="member">readDouble</ref>(minv,<sp/>maxv,<sp/>variablesName),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="4080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight></codeline>
<codeline lineno="4082" refid="struct_in_stream_1a9be66f81b7039ccdc58bee885ee15278" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e" kindref="member">InStream::readDoubles</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e" kindref="member">readDoubles</ref>,<sp/><ref refid="struct_in_stream_1a7409a09698273a264eaa9069ecf90abf" kindref="member">readDouble</ref>(),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight></codeline>
<codeline lineno="4086" refid="struct_in_stream_1af4a862c387cf199c075896c046b3038b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af4a862c387cf199c075896c046b3038b" kindref="member">InStream::readStrictReal</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount,</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/><ref refid="struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b" kindref="member">seekEof</ref>())</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578aae0220bb99b9060b8561683d987b2fa1" kindref="member">_unexpected_eof</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>file<sp/>-<sp/>strict<sp/>double<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>stringToStrictDouble(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3" kindref="member">readWord</ref>(),<sp/>minAfterPointDigitCount,<sp/>maxAfterPointDigitCount);</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>minv<sp/>||<sp/>result<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref><sp/>==<sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Strict<sp/>double<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(maxv)<sp/>+</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Strict<sp/>double<sp/>parameter<sp/>[name=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Strict<sp/>double<sp/>element<sp/>[index=&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(maxv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Strict<sp/>double<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>violates<sp/>the<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(minv)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(maxv)<sp/>+</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variableName.empty())<sp/>{</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ae8b56de5926c72fbfdd537f1b1d7eadd" kindref="member">addBoundsHit</ref>(variableName,<sp/><ref refid="struct_validator_bounds_hit" kindref="compound">ValidatorBoundsHit</ref>(</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82" kindref="member">doubleDelta</ref>(minv,<sp/>result)<sp/>&lt;<sp/><ref refid="struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128" kindref="member">ValidatorBoundsHit::EPS</ref>,</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a7995d5ee8c9310d34ff25b19bdfdbe82" kindref="member">doubleDelta</ref>(maxv,<sp/>result)<sp/>&lt;<sp/><ref refid="struct_validator_bounds_hit_1a794be9f0bcc3692f3662b670c9086128" kindref="member">ValidatorBoundsHit::EPS</ref></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1aaf48c6b401e8417c3da493f28ca65061" kindref="member">adjustConstantBounds</ref>(variableName,<sp/>minv,<sp/>maxv);</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variableName);</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"></highlight></codeline>
<codeline lineno="4126" refid="struct_in_stream_1a05d7a1183338770dd288298e6f4378c7" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="struct_in_stream_1a05d7a1183338770dd288298e6f4378c7" kindref="member">InStream::readStrictReals</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount,</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a05d7a1183338770dd288298e6f4378c7" kindref="member">readStrictReals</ref>,</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1af4a862c387cf199c075896c046b3038b" kindref="member">readStrictReal</ref>(minv,<sp/>maxv,<sp/>minAfterPointDigitCount,<sp/>maxAfterPointDigitCount,<sp/>variablesName),</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="4134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"></highlight></codeline>
<codeline lineno="4136" refid="struct_in_stream_1aaecf640ad9de7cf1873b2bc216e32b47" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1aaecf640ad9de7cf1873b2bc216e32b47" kindref="member">InStream::readStrictDouble</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount,</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af4a862c387cf199c075896c046b3038b" kindref="member">readStrictReal</ref>(minv,<sp/>maxv,</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minAfterPointDigitCount,<sp/>maxAfterPointDigitCount,</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variableName);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight></codeline>
<codeline lineno="4144" refid="struct_in_stream_1af2689fbf7c65b80728826fcb4230163f" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="struct_in_stream_1af2689fbf7c65b80728826fcb4230163f" kindref="member">InStream::readStrictDoubles</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxv,</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minAfterPointDigitCount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAfterPointDigitCount,</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1af2689fbf7c65b80728826fcb4230163f" kindref="member">readStrictDoubles</ref>,</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1aaecf640ad9de7cf1873b2bc216e32b47" kindref="member">readStrictDouble</ref>(minv,<sp/>maxv,<sp/>minAfterPointDigitCount,<sp/>maxAfterPointDigitCount,<sp/>variablesName),</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="4152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"></highlight></codeline>
<codeline lineno="4154" refid="struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4" kindref="member">InStream::eof</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>NULL<sp/>==<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>)</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a90d0f46a473a2ff2f6224614b7af0ab3" kindref="member">eof</ref>();</highlight></codeline>
<codeline lineno="4159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"></highlight></codeline>
<codeline lineno="4161" refid="struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b" kindref="member">InStream::seekEof</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>NULL<sp/>==<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>)</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a3caea7dc5003207a13b690e1e6523759" kindref="member">skipBlanks</ref>();</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4" kindref="member">eof</ref>();</highlight></codeline>
<codeline lineno="4166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight></codeline>
<codeline lineno="4168" refid="struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd" kindref="member">InStream::eoln</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>NULL<sp/>==<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>)</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>)</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a876ce77f3c672c7162658151e648389e" kindref="member">CR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(c);</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(<ref refid="testlib_8h_1a876ce77f3c672c7162658151e648389e" kindref="member">CR</ref>);</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref>)</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(c);</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>returnCr<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(ON_WINDOWS)<sp/>&amp;&amp;<sp/>!defined(FOR_LINUX))<sp/>||<sp/>defined(FOR_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/><ref refid="testlib_8h_1a876ce77f3c672c7162658151e648389e" kindref="member">CR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(c);</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!returnCr)</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returnCr<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(c);</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(returnCr)</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(<ref refid="testlib_8h_1a876ce77f3c672c7162658151e648389e" kindref="member">CR</ref>);</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight></codeline>
<codeline lineno="4218" refid="struct_in_stream_1a034c0ee97269f7bbd1e73ccc85b13f54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a034c0ee97269f7bbd1e73ccc85b13f54" kindref="member">InStream::readEoln</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref><sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881" kindref="member">getLine</ref>();</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd" kindref="member">eoln</ref>())</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>EOLN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224" refid="struct_in_stream_1a80e53f1d7a022f34f8d88839de43d6b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a80e53f1d7a022f34f8d88839de43d6b5" kindref="member">InStream::readEof</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref><sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881" kindref="member">getLine</ref>();</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4" kindref="member">eof</ref>())</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>EOF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_testlib_finalize_guard_1aea38818fd90c897e5e648db3a9cf4f00" kindref="member">TestlibFinalizeGuard::alive</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;<ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>)</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a576c1be9a11f2136d2bfa955394d4575" kindref="member">testlibFinalizeGuard</ref>.<ref refid="struct_testlib_finalize_guard_1af46c17590b5a5f22927cf208e00cb704" kindref="member">readEofCount</ref>++;</highlight></codeline>
<codeline lineno="4231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4233" refid="struct_in_stream_1a106d09bbdd844ca246bfbf2c6409f4b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a106d09bbdd844ca246bfbf2c6409f4b6" kindref="member">InStream::seekEoln</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>NULL<sp/>==<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>)</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur;</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cur<sp/>==<sp/><ref refid="testlib_8h_1a5ff6e798033f03e74730e99f01936f84" kindref="member">SPACE</ref><sp/>||<sp/>cur<sp/>==<sp/><ref refid="testlib_8h_1ad58a1fbfc85c7e4790fc55e654f50221" kindref="member">TAB</ref>);</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(cur);</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd" kindref="member">eoln</ref>();</highlight></codeline>
<codeline lineno="4244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight></codeline>
<codeline lineno="4246" refid="struct_in_stream_1a86e63a6bb9bc47cae9f58f0591ecc53f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a86e63a6bb9bc47cae9f58f0591ecc53f" kindref="member">InStream::nextLine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683" kindref="member">readLine</ref>();</highlight></codeline>
<codeline lineno="4248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"></highlight></codeline>
<codeline lineno="4250" refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">InStream::readStringTo</ref>(std::string<sp/>&amp;result)<sp/>{</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>)</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a801994faa20251234912d2e8eaf42773" kindref="member">_pe</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>line&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/>result.clear();</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"></highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a80448788833a59a503853b4a45a96137" kindref="member">curChar</ref>();</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur<sp/>==<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref><sp/>||<sp/>cur<sp/>==<sp/><ref refid="testlib_8h_1a09a15fa2d49e26dff40c22a309bd625f" kindref="member">EOFC</ref>)</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur<sp/>==<sp/><ref refid="testlib_8h_1a876ce77f3c672c7162658151e648389e" kindref="member">CR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>();</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a80448788833a59a503853b4a45a96137" kindref="member">curChar</ref>()<sp/>==<sp/><ref refid="testlib_8h_1a350c9d6cb81908d59427ee96844d1a9c" kindref="member">LF</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a48da3436df374a668c79b0f5b8ae7208" kindref="member">unreadChar</ref>(cur);</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5" kindref="member">lastLine</ref><sp/>=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a90cef076b1b6ee901aaefcf1276a6881" kindref="member">getLine</ref>();</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>char(<ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1a243f344748d1f7de9a2fa5faa31a29c3" kindref="member">nextChar</ref>());</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref>)</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a034c0ee97269f7bbd1e73ccc85b13f54" kindref="member">readEoln</ref>();</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd" kindref="member">eoln</ref>();</highlight></codeline>
<codeline lineno="4278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight></codeline>
<codeline lineno="4280" refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">InStream::readString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>);</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>;</highlight></codeline>
<codeline lineno="4283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight></codeline>
<codeline lineno="4285" refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" kindref="member">InStream::readStrings</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" kindref="member">readStrings</ref>,<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(),<sp/>std::string,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289" refid="struct_in_stream_1a6dd7e7971417eadfc7c89ed6063ee166" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">InStream::readStringTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(result);</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p.<ref refid="classpattern_1ab4c557a012185d453ddf8730f7a98dc0" kindref="member">matches</ref>(result))<sp/>{</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref><sp/>==<sp/><ref refid="struct_in_stream_1af18bd290c3c3907be197c1878946c4d8" kindref="member">NO_INDEX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Line<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;Line<sp/>[name=&quot;</highlight><highlight class="normal"><sp/>+<sp/>variableName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(result)<sp/>+</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variableName.empty())</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Line<sp/>element<sp/>[index=&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>__testlib_part(result)<sp/>+</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Line<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(variableName)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtos(<ref refid="struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4" kindref="member">readManyIteration</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>equals<sp/>to<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_part(result)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>doesn&apos;t<sp/>correspond<sp/>to<sp/>pattern<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>p.<ref refid="classpattern_1a4795cb9cb1b3b10c551fdce03608786a" kindref="member">src</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variableName.empty())</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variableName);</highlight></codeline>
<codeline lineno="4312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"></highlight></codeline>
<codeline lineno="4314" refid="struct_in_stream_1a90443a86a3a04208af259dbca2061b3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">InStream::readStringTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(result,<sp/><ref refid="classpattern" kindref="compound">pattern</ref>(ptrn),<sp/>variableName);</highlight></codeline>
<codeline lineno="4316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight></codeline>
<codeline lineno="4318" refid="struct_in_stream_1a25e0a8a1aef084955346a2b82cefa3b3" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">InStream::readString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>,<sp/>p,<sp/>variableName);</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="4324" refid="struct_in_stream_1a7566b33af0c853ce8ddfcdd7ad0e9648" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" kindref="member">InStream::readStrings</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" kindref="member">readStrings</ref>,<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(p,<sp/>variablesName),<sp/>std::string,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="4328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"></highlight></codeline>
<codeline lineno="4330" refid="struct_in_stream_1a5d4fd12c9b43f1357e56aed051524f7d" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">InStream::readString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(<ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>,<sp/>ptrn,<sp/>variableName);</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30" kindref="member">_tmpReadToken</ref>;</highlight></codeline>
<codeline lineno="4333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="4336" refid="struct_in_stream_1a826426f9c306ac53747a3141f819a1c7" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" kindref="member">InStream::readStrings</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>p(ptrn);</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6" kindref="member">readStrings</ref>,<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(p,<sp/>variablesName),<sp/>std::string,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="4341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight></codeline>
<codeline lineno="4343" refid="struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447" kindref="member">InStream::readLineTo</ref>(std::string<sp/>&amp;result)<sp/>{</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(result);</highlight></codeline>
<codeline lineno="4345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347" refid="struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683" kindref="member">InStream::readLine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>();</highlight></codeline>
<codeline lineno="4349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"></highlight></codeline>
<codeline lineno="4351" refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" kindref="member">InStream::readLines</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" kindref="member">readLines</ref>,<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(),<sp/>std::string,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight></codeline>
<codeline lineno="4355" refid="struct_in_stream_1a15203cdc5616988c0b76e8652ec05cb7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447" kindref="member">InStream::readLineTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(result,<sp/>p,<sp/>variableName);</highlight></codeline>
<codeline lineno="4357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"></highlight></codeline>
<codeline lineno="4359" refid="struct_in_stream_1a727fea17af0013a7a6089734292abd24" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447" kindref="member">InStream::readLineTo</ref>(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56" kindref="member">readStringTo</ref>(result,<sp/>ptrn,<sp/>variableName);</highlight></codeline>
<codeline lineno="4361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight></codeline>
<codeline lineno="4363" refid="struct_in_stream_1a6d9a21120d8b21cf31e9bad2a1e83e92" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683" kindref="member">InStream::readLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(p,<sp/>variableName);</highlight></codeline>
<codeline lineno="4365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="4368" refid="struct_in_stream_1a1ce8d0614039ae608612cca5d4fc5f28" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" kindref="member">InStream::readLines</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" kindref="member">readLines</ref>,<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(p,<sp/>variablesName),<sp/>std::string,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="4372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight></codeline>
<codeline lineno="4374" refid="struct_in_stream_1a4fd055a2face33d5862f23ee9cb86cd5" refkind="member"><highlight class="normal">std::string<sp/><ref refid="struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683" kindref="member">InStream::readLine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variableName)<sp/>{</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(ptrn,<sp/>variableName);</highlight></codeline>
<codeline lineno="4376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="4379" refid="struct_in_stream_1a5f62d4bb591a6de0a04cc8cc8a876202" refkind="member"><highlight class="normal"><ref refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" kindref="member">InStream::readLines</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ptrn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;variablesName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase)<sp/>{</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpattern" kindref="compound">pattern</ref><sp/>p(ptrn);</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ab882eaa72c700511353c3099d0952519" kindref="member">__testlib_readMany</ref>(<ref refid="struct_in_stream_1a2815b773083f56cf836e3669cf467e1a" kindref="member">readLines</ref>,<sp/><ref refid="struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d" kindref="member">readString</ref>(p,<sp/>variablesName),<sp/>std::string,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>&amp;&amp;<sp/>!variablesName.empty())</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ac33cdd122f71e88613526650d1bb3c45" kindref="member">addVariable</ref>(variablesName);</highlight></codeline>
<codeline lineno="4384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>3,<sp/>4)))</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4389" refid="struct_in_stream_1a44a5027f6d7000c62ef27c6719f225ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a44a5027f6d7000c62ef27c6719f225ef" kindref="member">InStream::ensuref</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cond)<sp/>{</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>message);</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="struct_in_stream_1ad961f49275f9e4d97b3ab6691f4b3d07" kindref="member">__testlib_ensure</ref>(cond,<sp/>message);</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"></highlight></codeline>
<codeline lineno="4396" refid="struct_in_stream_1ad961f49275f9e4d97b3ab6691f4b3d07" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ad961f49275f9e4d97b3ab6691f4b3d07" kindref="member">InStream::__testlib_ensure</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/>std::string<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cond)</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a77706596ca6256a69b77e763d6787585" kindref="member">_wa</ref>,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="4399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401" refid="struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f" kindref="member">InStream::close</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>-&gt;<ref refid="class_input_stream_reader_1aa145a0fcdb6b0a73cc3b91b22e5183cb" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref>;</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35" kindref="member">reader</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"></highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1ac1db0153031be42e22117179c7cc70bf" kindref="member">opened</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"></highlight></codeline>
<codeline lineno="4411" refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" kindref="member">ouf</ref>.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(result,<sp/>msg.c_str());</highlight></codeline>
<codeline lineno="4413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"></highlight></codeline>
<codeline lineno="4415" refid="testlib_8h_1aed77b9d710f29f434fee76944e94202a" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)<sp/>{</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" kindref="member">ouf</ref>.<ref refid="struct_in_stream_1a95bee5abfce70b5e663359558080ada9" kindref="member">quit</ref>(result,<sp/>msg);</highlight></codeline>
<codeline lineno="4417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight></codeline>
<codeline lineno="4419" refid="testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb" kindref="member">__testlib_quitp</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>points,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message)<sp/>{</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acb5280d0779ed8499169e3537ab20fd2" kindref="member">__testlib_points</ref><sp/>=<sp/>points;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>stringPoints<sp/>=<sp/>removeDoubleTrailingZeroes(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;%.10f&quot;</highlight><highlight class="normal">,<sp/>points));</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>quitMessage;</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>message<sp/>||<sp/>0<sp/>==<sp/>strlen(message))</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quitMessage<sp/>=<sp/>stringPoints;</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quitMessage<sp/>=<sp/>stringPoints<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>message;</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" kindref="member">_points</ref>,<sp/>quitMessage.c_str());</highlight></codeline>
<codeline lineno="4430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight></codeline>
<codeline lineno="4432" refid="testlib_8h_1a3951a3cfdcfee60d55d47a3faca1510f" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb" kindref="member">__testlib_quitp</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>points,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message)<sp/>{</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acb5280d0779ed8499169e3537ab20fd2" kindref="member">__testlib_points</ref><sp/>=<sp/>points;</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>stringPoints<sp/>=<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>points);</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"></highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>quitMessage;</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>message<sp/>||<sp/>0<sp/>==<sp/>strlen(message))</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quitMessage<sp/>=<sp/>stringPoints;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quitMessage<sp/>=<sp/>stringPoints<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>message;</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" kindref="member">_points</ref>,<sp/>quitMessage.c_str());</highlight></codeline>
<codeline lineno="4443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445" refid="testlib_8h_1a96b765d3745447a9518991edeab211c5" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a96b765d3745447a9518991edeab211c5" kindref="member">quitp</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>points,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb" kindref="member">__testlib_quitp</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(points),<sp/>message.c_str());</highlight></codeline>
<codeline lineno="4447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"></highlight></codeline>
<codeline lineno="4449" refid="testlib_8h_1abd20355062b85779c882dfb19f3d9380" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a96b765d3745447a9518991edeab211c5" kindref="member">quitp</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>points,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb" kindref="member">__testlib_quitp</ref>(points,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="4451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight></codeline>
<codeline lineno="4453" refid="testlib_8h_1a4c8b51476405ff163cc57a9e0ec10aea" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a96b765d3745447a9518991edeab211c5" kindref="member">quitp</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>points,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb" kindref="member">__testlib_quitp</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(points),<sp/>message.c_str());</highlight></codeline>
<codeline lineno="4455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight></codeline>
<codeline lineno="4457" refid="testlib_8h_1a7c6fc64b2f0640dd5dd4b1f52210d669" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a96b765d3745447a9518991edeab211c5" kindref="member">quitp</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>points,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1abff240fe64a3bc2dab1a7a70f73464cb" kindref="member">__testlib_quitp</ref>(points,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="4459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"></highlight></codeline>
<codeline lineno="4461" refid="testlib_8h_1a9e512424bd789067763542439fb1083b" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a9e512424bd789067763542439fb1083b" kindref="member">quitpi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;points_info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(points_info.find(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Parameter<sp/>&apos;points_info&apos;<sp/>can&apos;t<sp/>contain<sp/>spaces&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message.empty())</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" kindref="member">_points</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;points_info=&quot;</highlight><highlight class="normal"><sp/>+<sp/>points_info).c_str());</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578abf5f5cf5414425fece755c1d07df9be2" kindref="member">_points</ref>,<sp/>(</highlight><highlight class="stringliteral">&quot;points_info=&quot;</highlight><highlight class="normal"><sp/>+<sp/>points_info<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>message).c_str());</highlight></codeline>
<codeline lineno="4468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>2,<sp/>3)))</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474" refid="testlib_8h_1a73dbf5feb8712147dfa04c19c9d6b01d" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a96b765d3745447a9518991edeab211c5" kindref="member">quitp</ref>(F<sp/>points,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>message);</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a96b765d3745447a9518991edeab211c5" kindref="member">quitp</ref>(points,<sp/>message);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"></highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>2,<sp/>3)))</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4482" refid="testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01" kindref="member">quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>message);</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(result,<sp/>message);</highlight></codeline>
<codeline lineno="4485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>3,<sp/>4)))</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4490" refid="testlib_8h_1ad7e7f24ac09509dc94581cf3b0a5dced" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ad7e7f24ac09509dc94581cf3b0a5dced" kindref="member">quitif</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition,<sp/><ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(condition)<sp/>{</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>message);</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(result,<sp/>message);</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4497" refid="testlib_8h_1a694d06929cd60de7f337b6e265b2365b" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a694d06929cd60de7f337b6e265b2365b" kindref="member">__testlib_help</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" kindref="member">InStream::textColor</ref>(<ref refid="struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4" kindref="member">InStream::LightCyan</ref>);</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;TESTLIB<sp/>%s,<sp/>https://github.com/MikeMirzayanov/testlib/<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1a1c6d5de492ac61ad29aec7aa9a436bbf" kindref="member">VERSION</ref>);</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;by<sp/>Mike<sp/>Mirzayanov,<sp/>copyright(c)<sp/>2005-2020\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Checker<sp/>name:<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1a00f5e960957827ed8846cf705f810473" kindref="member">checkerName</ref>.c_str());</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_in_stream_1a4ff4b2110a80dea66154702116080e49" kindref="member">InStream::textColor</ref>(<ref refid="struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836" kindref="member">InStream::LightGray</ref>);</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"></highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Latest<sp/>features:<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="testlib_8h_1aca3ccf9230a0e9c7f28e21d77f26e74f" kindref="member">latestFeatures</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;*)<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1aca3ccf9230a0e9c7f28e21d77f26e74f" kindref="member">latestFeatures</ref>[i]);</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Program<sp/>must<sp/>be<sp/>run<sp/>with<sp/>the<sp/>following<sp/>arguments:<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>[--testset<sp/>testset]<sp/>[--group<sp/>group]<sp/>&lt;input-file&gt;<sp/>&lt;output-file&gt;<sp/>&lt;answer-file&gt;<sp/>[&lt;report-file&gt;<sp/>[&lt;-appes&gt;]]\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a34371151c9adbae73b89b0e7aed11a6f" kindref="member">__testlib_exitCode</ref><sp/>=<sp/><ref refid="testlib_8h_1afac612f10342c3ccbfc7f30ae563184b" kindref="member">FAIL_EXIT_CODE</ref>;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/>std::exit(<ref refid="testlib_8h_1afac612f10342c3ccbfc7f30ae563184b" kindref="member">FAIL_EXIT_CODE</ref>);</highlight></codeline>
<codeline lineno="4516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__testlib_ensuresPreconditions()<sp/>{</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>testlib<sp/>assumes:<sp/>sizeof(int)<sp/>=<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a67a1b89efefde69b271ec10086a493fc" kindref="member">__TESTLIB_STATIC_ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"></highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>testlib<sp/>assumes:<sp/>INT_MAX<sp/>==<sp/>2147483647.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a67a1b89efefde69b271ec10086a493fc" kindref="member">__TESTLIB_STATIC_ASSERT</ref>(INT_MAX<sp/>==<sp/>2147483647);</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>testlib<sp/>assumes:<sp/>sizeof(long<sp/>long)<sp/>=<sp/>8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a67a1b89efefde69b271ec10086a493fc" kindref="member">__TESTLIB_STATIC_ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"></highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>testlib<sp/>assumes:<sp/>sizeof(double)<sp/>=<sp/>8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a67a1b89efefde69b271ec10086a493fc" kindref="member">__TESTLIB_STATIC_ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>testlib<sp/>assumes:<sp/>no<sp/>-ffast-math.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__testlib_isNaN(+__testlib_nan()))</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>__testlib_isNaN<sp/>is<sp/>not<sp/>working<sp/>correctly:<sp/>possible<sp/>reason<sp/>is<sp/>&apos;-ffast-math&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__testlib_isNaN(-__testlib_nan()))</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>__testlib_isNaN<sp/>is<sp/>not<sp/>working<sp/>correctly:<sp/>possible<sp/>reason<sp/>is<sp/>&apos;-ffast-math&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight></codeline>
<codeline lineno="4538" refid="testlib_8h_1adf88ff484a3ca535a2a66ea5c0713796" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1adf88ff484a3ca535a2a66ea5c0713796" kindref="member">__testlib_testset</ref>;</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight></codeline>
<codeline lineno="4540" refid="testlib_8h_1a327d15f1f5e7c8377faf74e620514689" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a327d15f1f5e7c8377faf74e620514689" kindref="member">getTestset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1adf88ff484a3ca535a2a66ea5c0713796" kindref="member">__testlib_testset</ref>;</highlight></codeline>
<codeline lineno="4542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight></codeline>
<codeline lineno="4544" refid="testlib_8h_1a28757a64bf4cec48f7a7e5d6187bb350" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a28757a64bf4cec48f7a7e5d6187bb350" kindref="member">__testlib_group</ref>;</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight></codeline>
<codeline lineno="4546" refid="testlib_8h_1ae7fe33b331a1689d31d7d43eb94b125a" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1ae7fe33b331a1689d31d7d43eb94b125a" kindref="member">getGroup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a28757a64bf4cec48f7a7e5d6187bb350" kindref="member">__testlib_group</ref>;</highlight></codeline>
<codeline lineno="4548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__testlib_set_testset_and_group(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--testset&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc<sp/>&amp;&amp;<sp/>strlen(argv[i<sp/>+<sp/>1])<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1adf88ff484a3ca535a2a66ea5c0713796" kindref="member">__testlib_testset</ref><sp/>=<sp/>argv[++i];</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Expected<sp/>non-empty<sp/>testset<sp/>after<sp/>--testset<sp/>command<sp/>line<sp/>parameter&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--group&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc)</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a28757a64bf4cec48f7a7e5d6187bb350" kindref="member">__testlib_group</ref><sp/>=<sp/>argv[++i];</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Expected<sp/>group<sp/>after<sp/>--group<sp/>command<sp/>line<sp/>parameter&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight></codeline>
<codeline lineno="4566" refid="testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76" kindref="member">registerGen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randomGeneratorVersion)<sp/>{</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(randomGeneratorVersion<sp/>&lt;<sp/>0<sp/>||<sp/>randomGeneratorVersion<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01" kindref="member">quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Random<sp/>generator<sp/>version<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>0<sp/>or<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrandom__t_1ac5cf08808bff4c4ec04ca387e2764868" kindref="member">random_t::version</ref><sp/>=<sp/>randomGeneratorVersion;</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_ensuresPreconditions();</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1" kindref="member">TestlibFinalizeGuard::registered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa5311ad9bde7f5dbdc28c1f8264456fd5" kindref="member">_generator</ref>;</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_binary(stdin);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" kindref="member">rnd</ref>.<ref refid="classrandom__t_1a091210e52bff54e02afeda4d343e081d" kindref="member">setSeed</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"></highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>199711L<sp/>||<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/>prepareOpts(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_RND_AS_BEFORE_087</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76" kindref="member">registerGen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline lineno="4585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76" kindref="member">registerGen</ref>(argc,<sp/>argv,<sp/>0);</highlight></codeline>
<codeline lineno="4587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4590"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__GNUC__<sp/>&gt;<sp/>4)<sp/>||<sp/>((__GNUC__<sp/>==<sp/>4)<sp/>&amp;&amp;<sp/>(__GNUC_MINOR__<sp/>&gt;<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal">__attribute__<sp/>((deprecated(</highlight><highlight class="stringliteral">&quot;Use<sp/>registerGen(argc,<sp/>argv,<sp/>0)<sp/>or<sp/>registerGen(argc,<sp/>argv,<sp/>1).&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4592"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/>The<sp/>third<sp/>parameter<sp/>stands<sp/>for<sp/>the<sp/>random<sp/>generator<sp/>version.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/>If<sp/>you<sp/>are<sp/>trying<sp/>to<sp/>compile<sp/>old<sp/>generator<sp/>use<sp/>macro<sp/>-DUSE_RND_AS_BEFORE_087<sp/>or<sp/>registerGen(argc,<sp/>argv,<sp/>0).&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/>Version<sp/>1<sp/>has<sp/>been<sp/>released<sp/>on<sp/>Spring,<sp/>2013.<sp/>Use<sp/>it<sp/>to<sp/>write<sp/>new<sp/>generators.&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal">__attribute__<sp/>((deprecated))</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4600"><highlight class="normal">__declspec(deprecated(</highlight><highlight class="stringliteral">&quot;Use<sp/>registerGen(argc,<sp/>argv,<sp/>0)<sp/>or<sp/>registerGen(argc,<sp/>argv,<sp/>1).&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>The<sp/>third<sp/>parameter<sp/>stands<sp/>for<sp/>the<sp/>random<sp/>generator<sp/>version.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>If<sp/>you<sp/>are<sp/>trying<sp/>to<sp/>compile<sp/>old<sp/>generator<sp/>use<sp/>macro<sp/>-DUSE_RND_AS_BEFORE_087<sp/>or<sp/>registerGen(argc,<sp/>argv,<sp/>0).&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Version<sp/>1<sp/>has<sp/>been<sp/>released<sp/>on<sp/>Spring,<sp/>2013.<sp/>Use<sp/>it<sp/>to<sp/>write<sp/>new<sp/>generators.&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4605" refid="testlib_8h_1a1fbb926756e2060c6e46bae99de4a781" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76" kindref="member">registerGen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>registerGen(argc,<sp/>argv,<sp/>0)<sp/>or<sp/>registerGen(argc,<sp/>argv,<sp/>1).&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>The<sp/>third<sp/>parameter<sp/>stands<sp/>for<sp/>the<sp/>random<sp/>generator<sp/>version.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>If<sp/>you<sp/>are<sp/>trying<sp/>to<sp/>compile<sp/>old<sp/>generator<sp/>use<sp/>macro<sp/>-DUSE_RND_AS_BEFORE_087<sp/>or<sp/>registerGen(argc,<sp/>argv,<sp/>0).&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Version<sp/>1<sp/>has<sp/>been<sp/>released<sp/>on<sp/>Spring,<sp/>2013.<sp/>Use<sp/>it<sp/>to<sp/>write<sp/>new<sp/>generators.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad1cfbe9e8fcaabcd1598206e3ff1ad76" kindref="member">registerGen</ref>(argc,<sp/>argv,<sp/>0);</highlight></codeline>
<codeline lineno="4611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight></codeline>
<codeline lineno="4614" refid="testlib_8h_1aa87c56b5c1a61e59f3484778120a5797" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aa87c56b5c1a61e59f3484778120a5797" kindref="member">setAppesModeEncoding</ref>(std::string<sp/><ref refid="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" kindref="member">appesModeEncoding</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ENCODINGS[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;ascii&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;utf-7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;utf-16&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;utf-16le&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;utf-16be&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;utf-32&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;utf-32le&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;utf-32be&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-1&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="4616"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;iso-8859-2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-10&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-11&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;iso-8859-13&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-14&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-15&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-8859-16&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;windows-1250&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;windows-1251&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;windows-1252&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;windows-1253&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;windows-1254&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;windows-1255&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;windows-1256&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;windows-1257&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;windows-1258&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gb2312&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gbk&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gb18030&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;big5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;shift-jis&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;euc-jp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;euc-kr&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;euc-cn&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;euc-tw&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;koi8-r&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;koi8-u&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tis-620&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm437&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm850&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm852&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm855&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm857&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;ibm860&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm861&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm862&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm863&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm865&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm866&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibm869&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;macroman&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;maccentraleurope&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;maciceland&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;maccroatian&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;macromania&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;maccyrillic&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;macukraine&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;macgreek&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;macturkish&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;machebrew&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;macarabic&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;macthai&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hz-gb-2312&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;iso-2022-jp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-2022-kr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-2022-cn&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;armscii-8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tscii&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iscii&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;viscii&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;geostd8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp949&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp874&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="4623"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;cp1006&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp775&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp858&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp737&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp853&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp856&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp922&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp1046&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp1125&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp1131&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;ptcp154&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;koi8-t&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;koi8-ru&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mulelao-1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cp1133&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-ir-166&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tcvn&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-ir-14&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-ir-87&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;iso-ir-159&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" kindref="member">appesModeEncoding</ref><sp/>=<sp/><ref refid="testlib_8h_1a2d0670a860a887c1de821de0550c0a32" kindref="member">lowerCase</ref>(<ref refid="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" kindref="member">appesModeEncoding</ref>);</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ENCODINGS)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ENCODINGS[0]);<sp/>i++)</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" kindref="member">appesModeEncoding</ref><sp/>==<sp/>ENCODINGS[i])<sp/>{</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid)</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>encoding<sp/>for<sp/>setAppesModeEncoding(encoding)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" kindref="member">::appesModeEncoding</ref><sp/>=<sp/><ref refid="testlib_8h_1a2f4a877b5dc48e645f2c41b5e9c99460" kindref="member">appesModeEncoding</ref>;</highlight></codeline>
<codeline lineno="4636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"></highlight></codeline>
<codeline lineno="4638" refid="testlib_8h_1a01331bd5d26dd46c4bc7b9295a036aa0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a01331bd5d26dd46c4bc7b9295a036aa0" kindref="member">registerInteraction</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_ensuresPreconditions();</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_testset_and_group(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1" kindref="member">TestlibFinalizeGuard::registered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fadaea9b0ac8f600ff71b0f7616869deac" kindref="member">_interactor</ref>;</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_binary(stdin);</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"></highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>!strcmp(</highlight><highlight class="stringliteral">&quot;--help&quot;</highlight><highlight class="normal">,<sp/>argv[1]))</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a694d06929cd60de7f337b6e265b2365b" kindref="member">__testlib_help</ref>();</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>3<sp/>||<sp/>argc<sp/>&gt;<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Program<sp/>must<sp/>be<sp/>run<sp/>with<sp/>the<sp/>following<sp/>arguments:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;&lt;input-file&gt;<sp/>&lt;output-file&gt;<sp/>[&lt;answer-file&gt;<sp/>[&lt;report-file&gt;<sp/>[&lt;-appes&gt;]]]&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nUse<sp/>\&quot;--help\&quot;<sp/>to<sp/>get<sp/>help<sp/>information&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" kindref="member">appesMode</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EJUDGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>=<sp/>argv[4];</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" kindref="member">appesMode</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"></highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(</highlight><highlight class="stringliteral">&quot;-APPES&quot;</highlight><highlight class="normal">,<sp/>argv[5])<sp/>&amp;&amp;<sp/>strcmp(</highlight><highlight class="stringliteral">&quot;-appes&quot;</highlight><highlight class="normal">,<sp/>argv[5]))<sp/>{</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Program<sp/>must<sp/>be<sp/>run<sp/>with<sp/>the<sp/>following<sp/>arguments:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;input-file&gt;<sp/>&lt;output-file&gt;<sp/>&lt;answer-file&gt;<sp/>[&lt;report-file&gt;<sp/>[&lt;-appes&gt;]]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>=<sp/>argv[4];</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" kindref="member">appesMode</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"></highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(argv[1],<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" kindref="member">_input</ref>);</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a675e9c0cb400805c69d94e7cdded4494" kindref="member">tout</ref>.open(argv[2],<sp/>std::ios_base::out);</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a675e9c0cb400805c69d94e7cdded4494" kindref="member">tout</ref>.fail()<sp/>||<sp/>!<ref refid="testlib_8h_1a675e9c0cb400805c69d94e7cdded4494" kindref="member">tout</ref>.is_open())</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>write<sp/>to<sp/>the<sp/>test-output-file<sp/>&apos;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>argv[2]<sp/>+<sp/>std::string(</highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" kindref="member">ouf</ref>.<ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(stdin,<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6" kindref="member">_output</ref>);</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac" kindref="member">ans</ref>.<ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(argv[3],<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61" kindref="member">_answer</ref>);</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac" kindref="member">ans</ref>.<ref refid="struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unopened<sp/>answer<sp/>stream&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691" refid="testlib_8h_1a92d612e581676b81e9162f70839e88ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a92d612e581676b81e9162f70839e88ef" kindref="member">registerValidation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_ensuresPreconditions();</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1" kindref="member">TestlibFinalizeGuard::registered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"></highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" kindref="member">_validator</ref>;</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_binary(stdin);</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_binary(stdout);</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_binary(stderr);</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"></highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(stdin,<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" kindref="member">_input</ref>);</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight></codeline>
<codeline lineno="4705" refid="testlib_8h_1af37a8d5160de18491abf562b60790dff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a92d612e581676b81e9162f70839e88ef" kindref="member">registerValidation</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a92d612e581676b81e9162f70839e88ef" kindref="member">registerValidation</ref>();</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_testset_and_group(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1aeb0b49097c1087062e53aac935028b47" kindref="member">initialize</ref>();</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1" kindref="member">TestlibFinalizeGuard::registered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>comment<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Validator<sp/>must<sp/>be<sp/>run<sp/>with<sp/>the<sp/>following<sp/>arguments:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[--testset<sp/>testset]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[--group<sp/>group]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[--testOverviewLogFileName<sp/>fileName]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[--testMarkupFileName<sp/>fileName]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[--testCase<sp/>testCase]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>[--testCaseFileName<sp/>fileName]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--testset&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc<sp/>&amp;&amp;<sp/>strlen(argv[i<sp/>+<sp/>1])<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1a98abe366b29d8445a77b0a8467dceb41" kindref="member">setTestset</ref>(argv[++i]);</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>comment);</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--group&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc)</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1aad2457aadd48a75837e2770aa6c380bb" kindref="member">setGroup</ref>(argv[++i]);</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>comment);</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--testOverviewLogFileName&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc)</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1a759723fc94643a78cc0b14da68b0107e" kindref="member">setTestOverviewLogFileName</ref>(argv[++i]);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>comment);</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--testMarkupFileName&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc)</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1a82a648685268dc91e9bf48f1c4fb8d57" kindref="member">setTestMarkupFileName</ref>(argv[++i]);</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>comment);</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--testCase&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc)<sp/>{</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>testCase<sp/>=<sp/>stringToLongLong(<ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>,<sp/>argv[++i]);</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testCase<sp/>&lt;<sp/>1<sp/>||<sp/>testCase<sp/>&gt;=<sp/><ref refid="testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0" kindref="member">__TESTLIB_MAX_TEST_CASE</ref>)</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;Argument<sp/>testCase<sp/>should<sp/>be<sp/>between<sp/>1<sp/>and<sp/>%d,<sp/>but<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1a18fd7cadefe2367367300b4f1983d8f0" kindref="member">__TESTLIB_MAX_TEST_CASE</ref>)</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>toString(testCase)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ab4fd3b0dbe4e35310a9c7b0b7c2a411d" kindref="member">setTestCase</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(testCase));</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>comment);</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--testCaseFileName&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc)<sp/>{</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1abe2f949d8c9bff6fe61e0f9fab6e68e4" kindref="member">setTestCaseFileName</ref>(argv[++i]);</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>comment);</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"></highlight></codeline>
<codeline lineno="4765" refid="testlib_8h_1a988dc33cd922d2f4748e4305743d03d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a988dc33cd922d2f4748e4305743d03d8" kindref="member">addFeature</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="testlib_8h_1aca975e2860357cde841db9a2eb501e4f" kindref="member">feature</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>!=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" kindref="member">_validator</ref>)</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Features<sp/>are<sp/>supported<sp/>in<sp/>validators<sp/>only.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1ad584b1395f153ccfedf884750ff10f70" kindref="member">addFeature</ref>(<ref refid="testlib_8h_1aca975e2860357cde841db9a2eb501e4f" kindref="member">feature</ref>);</highlight></codeline>
<codeline lineno="4769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"></highlight></codeline>
<codeline lineno="4771" refid="testlib_8h_1aca975e2860357cde841db9a2eb501e4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aca975e2860357cde841db9a2eb501e4f" kindref="member">feature</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="testlib_8h_1aca975e2860357cde841db9a2eb501e4f" kindref="member">feature</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>!=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fae0b813cbde0d5fc79fcecd814910e24f" kindref="member">_validator</ref>)</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Features<sp/>are<sp/>supported<sp/>in<sp/>validators<sp/>only.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a72a79ac1064de9f716b78e4369669976" kindref="member">validator</ref>.<ref refid="class_validator_1a85dd9d919dbd6668399ca595658bba80" kindref="member">feature</ref>(<ref refid="testlib_8h_1aca975e2860357cde841db9a2eb501e4f" kindref="member">feature</ref>);</highlight></codeline>
<codeline lineno="4775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"></highlight></codeline>
<codeline lineno="4777" refid="class_checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_checker" kindref="compound">Checker</ref><sp/>{</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_initialized;</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_testset;</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_group;</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"></highlight></codeline>
<codeline lineno="4783"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4784" refid="class_checker_1aafe6cbd15f04ea271878f54c424c4b2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_checker_1aafe6cbd15f04ea271878f54c424c4b2a" kindref="member">Checker</ref>()<sp/>:<sp/>_initialized(false),<sp/>_testset(</highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">),<sp/>_group()<sp/>{</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"></highlight></codeline>
<codeline lineno="4787" refid="class_checker_1a271ef5fb00c4230cebb26ef476117a9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_checker_1a271ef5fb00c4230cebb26ef476117a9d" kindref="member">initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791" refid="class_checker_1ac0b5f297b97d53d2662d6faf87da23c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_checker_1ac0b5f297b97d53d2662d6faf87da23c4" kindref="member">testset</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_initialized)</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Checker<sp/>should<sp/>be<sp/>initialized<sp/>with<sp/>registerTestlibCmd(argc,<sp/>argv)<sp/>instead<sp/>of<sp/>registerTestlibCmd()<sp/>to<sp/>support<sp/>checker.testset()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_testset;</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"></highlight></codeline>
<codeline lineno="4797" refid="class_checker_1a30f363a82bc2c6345314b5aa690c6ab2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_checker_1a30f363a82bc2c6345314b5aa690c6ab2" kindref="member">group</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_initialized)</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Checker<sp/>should<sp/>be<sp/>initialized<sp/>with<sp/>registerTestlibCmd(argc,<sp/>argv)<sp/>instead<sp/>of<sp/>registerTestlibCmd()<sp/>to<sp/>support<sp/>checker.group()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_group;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"></highlight></codeline>
<codeline lineno="4803" refid="class_checker_1a9d820f5d5a3026e8f0fa4548a329b6b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_checker_1a9d820f5d5a3026e8f0fa4548a329b6b7" kindref="member">setTestset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_checker_1ac0b5f297b97d53d2662d6faf87da23c4" kindref="member">testset</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testset<sp/>=<sp/><ref refid="class_checker_1ac0b5f297b97d53d2662d6faf87da23c4" kindref="member">testset</ref>;</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"></highlight></codeline>
<codeline lineno="4807" refid="class_checker_1a86db664876730b34937e5be2552eb9a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_checker_1a86db664876730b34937e5be2552eb9a0" kindref="member">setGroup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_checker_1a30f363a82bc2c6345314b5aa690c6ab2" kindref="member">group</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_group<sp/>=<sp/><ref refid="class_checker_1a30f363a82bc2c6345314b5aa690c6ab2" kindref="member">group</ref>;</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4810" refid="testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c" refkind="member"><highlight class="normal">}<sp/><ref refid="testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c" kindref="member">checker</ref>;</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"></highlight></codeline>
<codeline lineno="4812" refid="testlib_8h_1aef178d6340fe04d5d616ee2da19488b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aef178d6340fe04d5d616ee2da19488b4" kindref="member">registerTestlibCmd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_ensuresPreconditions();</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_testset_and_group(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_testlib_finalize_guard_1a4b4f03c69663c87c321fb1aafb07e9b1" kindref="member">TestlibFinalizeGuard::registered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fad23f42b9c6d23ab5679d79151c4585ff" kindref="member">_checker</ref>;</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_binary(stdin);</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>args(1,<sp/>argv[0]);</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c" kindref="member">checker</ref>.<ref refid="class_checker_1a271ef5fb00c4230cebb26ef476117a9d" kindref="member">initialize</ref>();</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--testset&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc<sp/>&amp;&amp;<sp/>strlen(argv[i<sp/>+<sp/>1])<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c" kindref="member">checker</ref>.<ref refid="class_checker_1a9d820f5d5a3026e8f0fa4548a329b6b7" kindref="member">setTestset</ref>(argv[++i]);</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Expected<sp/>testset<sp/>after<sp/>--testset<sp/>command<sp/>line<sp/>parameter&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(</highlight><highlight class="stringliteral">&quot;--group&quot;</highlight><highlight class="normal">,<sp/>argv[i]))<sp/>{</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>argc)</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a9ce0a964a656c5d7d59b41f935fef72c" kindref="member">checker</ref>.<ref refid="class_checker_1a86db664876730b34937e5be2552eb9a0" kindref="member">setGroup</ref>(argv[++i]);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Expected<sp/>group<sp/>after<sp/>--group<sp/>command<sp/>line<sp/>parameter&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.push_back(argv[i]);</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"></highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/>argc<sp/>=<sp/>int(args.size());</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;--help&quot;</highlight><highlight class="normal"><sp/>==<sp/>args[1])</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a694d06929cd60de7f337b6e265b2365b" kindref="member">__testlib_help</ref>();</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>4<sp/>||<sp/>argc<sp/>&gt;<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Program<sp/>must<sp/>be<sp/>run<sp/>with<sp/>the<sp/>following<sp/>arguments:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;[--testset<sp/>testset]<sp/>[--group<sp/>group]<sp/>&lt;input-file&gt;<sp/>&lt;output-file&gt;<sp/>&lt;answer-file&gt;<sp/>[&lt;report-file&gt;<sp/>[&lt;-appes&gt;]]&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nUse<sp/>\&quot;--help\&quot;<sp/>to<sp/>get<sp/>help<sp/>information&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"></highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" kindref="member">appesMode</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"></highlight></codeline>
<codeline lineno="4853"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EJUDGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>=<sp/>args[4];</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" kindref="member">appesMode</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;-APPES&quot;</highlight><highlight class="normal"><sp/>!=<sp/>args[5]<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;-appes&quot;</highlight><highlight class="normal"><sp/>!=<sp/>args[5])<sp/>{</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Program<sp/>must<sp/>be<sp/>run<sp/>with<sp/>the<sp/>following<sp/>arguments:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;input-file&gt;<sp/>&lt;output-file&gt;<sp/>&lt;answer-file&gt;<sp/>[&lt;report-file&gt;<sp/>[&lt;-appes&gt;]]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a300565f96b1c710f123009c6aa8aed29" kindref="member">resultName</ref><sp/>=<sp/>args[4];</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1af4cc0994ea0f5ca9ede3bbc670fded8e" kindref="member">appesMode</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(args[1],<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" kindref="member">_input</ref>);</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" kindref="member">ouf</ref>.<ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(args[2],<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddbafb9d1f90fad72c2e77f29dd244dff5a6" kindref="member">_output</ref>);</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a93822943d6413c3eba20a27b9d31336b" kindref="member">ouf</ref>.<ref refid="struct_in_stream_1a1ee5c101df11ec9fe00867379bf3937f" kindref="member">skipBom</ref>();</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aca62d65c91dd6453f93a96348e78c5ac" kindref="member">ans</ref>.<ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(args[3],<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba1d5993b55c5fa9053df279a83de91f61" kindref="member">_answer</ref>);</highlight></codeline>
<codeline lineno="4874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight></codeline>
<codeline lineno="4876" refid="testlib_8h_1a58c2e7a2e44f8466c34b4500023cac6e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a58c2e7a2e44f8466c34b4500023cac6e" kindref="member">registerTestlib</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>3<sp/>||<sp/>argc<sp/>&gt;<sp/>5)</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Program<sp/>must<sp/>be<sp/>run<sp/>with<sp/>the<sp/>following<sp/>arguments:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;input-file&gt;<sp/>&lt;output-file&gt;<sp/>&lt;answer-file&gt;<sp/>[&lt;report-file&gt;<sp/>[&lt;-appes&gt;]]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"></highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*[argc<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"></highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(ap,<sp/>argc);</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/>argv[0]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv[i<sp/>+<sp/>1]<sp/>=<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"></highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aef178d6340fe04d5d616ee2da19488b4" kindref="member">registerTestlibCmd</ref>(argc<sp/>+<sp/>1,<sp/>argv);</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>argv;</highlight></codeline>
<codeline lineno="4893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__testlib_ensure(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cond)</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>msg.c_str());</highlight></codeline>
<codeline lineno="4898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal">__attribute__((unused))</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__testlib_ensure(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)<sp/>{</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cond)</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/>msg);</highlight></codeline>
<codeline lineno="4906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight></codeline>
<codeline lineno="4908" refid="testlib_8h_1a6995c405db0a243abdf49c4e1de55a41" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ensure(cond)<sp/>__testlib_ensure(cond,<sp/>&quot;Condition<sp/>failed:<sp/>\&quot;&quot;<sp/>#cond<sp/>&quot;\&quot;&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4909" refid="testlib_8h_1a9a63ce5ce3b143f8df9df20769c2ab86" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRINGIZE_DETAIL(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4910" refid="testlib_8h_1a3428692efe6051ef30016ffde1a9f7bb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRINGIZE(x)<sp/>STRINGIZE_DETAIL(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4911" refid="testlib_8h_1a4d844981188f58cfa1385d5a4d6918c4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ensure_ext(cond)<sp/>__testlib_ensure(cond,<sp/>&quot;Line<sp/>&quot;<sp/>STRINGIZE(__LINE__)<sp/>&quot;:<sp/>Condition<sp/>failed:<sp/>\&quot;&quot;<sp/>#cond<sp/>&quot;\&quot;&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4912"><highlight class="normal"></highlight></codeline>
<codeline lineno="4913"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4914"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>2,<sp/>3)))</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4916" refid="testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc" kindref="member">ensuref</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cond)<sp/>{</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>message);</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_ensure(cond,<sp/>message);</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__testlib_fail(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message)<sp/>{</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01" kindref="member">quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="4925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"></highlight></codeline>
<codeline lineno="4927"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4928"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>1,<sp/>2)))</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4930" refid="testlib_8h_1a14fb24cad2f7e3d532a76f41ba4ba15b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a14fb24cad2f7e3d532a76f41ba4ba15b" kindref="member">setName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>,<sp/>name);</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a00f5e960957827ed8846cf705f810473" kindref="member">checkerName</ref><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="4933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4936"><highlight class="comment"><sp/>*<sp/>Do<sp/>not<sp/>use<sp/>random_shuffle,<sp/>because<sp/>it<sp/>will<sp/>produce<sp/>different<sp/>result</highlight></codeline>
<codeline lineno="4937"><highlight class="comment"><sp/>*<sp/>for<sp/>different<sp/>C++<sp/>compilers.</highlight></codeline>
<codeline lineno="4938"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4939"><highlight class="comment"><sp/>*<sp/>This<sp/>implementation<sp/>uses<sp/>testlib<sp/>random_t<sp/>to<sp/>produce<sp/>random<sp/>numbers,<sp/>so</highlight></codeline>
<codeline lineno="4940"><highlight class="comment"><sp/>*<sp/>it<sp/>is<sp/>stable.</highlight></codeline>
<codeline lineno="4941"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_RandomAccessIter&gt;</highlight></codeline>
<codeline lineno="4943" refid="testlib_8h_1a892cac7bffad68bec03005d0a771c3c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a892cac7bffad68bec03005d0a771c3c7" kindref="member">shuffle</ref>(_RandomAccessIter<sp/>__first,<sp/>_RandomAccessIter<sp/>__last)<sp/>{</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__first<sp/>==<sp/>__last)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(_RandomAccessIter<sp/>__i<sp/>=<sp/>__first<sp/>+<sp/>1;<sp/>__i<sp/>!=<sp/>__last;<sp/>++__i)</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iter_swap(__i,<sp/>__first<sp/>+<sp/><ref refid="testlib_8h_1a5743b8b2167a45883185605a8d8e10ce" kindref="member">rnd</ref>.<ref refid="classrandom__t_1adb0b3734666df2f17c7d60b33db87ad6" kindref="member">next</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(__i<sp/>-<sp/>__first)<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="4947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_RandomAccessIter&gt;</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal">__attribute__<sp/>((error(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>use<sp/>random_shuffle(),<sp/>use<sp/>shuffle()<sp/>instead&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4954" refid="testlib_8h_1a2474f90782a9f77e45d81ae18d7c1ffb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a2474f90782a9f77e45d81ae18d7c1ffb" kindref="member">random_shuffle</ref>(_RandomAccessIter,<sp/>_RandomAccessIter)<sp/>{</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01" kindref="member">quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>use<sp/>random_shuffle(),<sp/>use<sp/>shuffle()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GLIBC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>RAND_THROW_STATEMENT<sp/>throw()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4961" refid="testlib_8h_1a390e9021e1ac7b756fdf9a49c3da47f9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>RAND_THROW_STATEMENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4963"><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="normal">__attribute__<sp/>((error(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>use<sp/>rand(),<sp/>use<sp/>rnd.next()<sp/>instead&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4969"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4273<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4971" refid="testlib_8h_1a84b949a61c3fa63ca17fcf0b2f9ad4f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a84b949a61c3fa63ca17fcf0b2f9ad4f3" kindref="member">rand</ref>()<sp/><ref refid="testlib_8h_1a390e9021e1ac7b756fdf9a49c3da47f9" kindref="member">RAND_THROW_STATEMENT</ref></highlight></codeline>
<codeline lineno="4972"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01" kindref="member">quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>use<sp/>rand(),<sp/>use<sp/>rnd.next()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"></highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>line<sp/>never<sp/>runs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//throw<sp/>&quot;Don&apos;t<sp/>use<sp/>rand(),<sp/>use<sp/>rnd.next()<sp/>instead&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4980"><highlight class="normal"></highlight></codeline>
<codeline lineno="4981"><highlight class="normal">__attribute__<sp/>((error(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>use<sp/>srand(),<sp/>you<sp/>should<sp/>use<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&apos;registerGen(argc,<sp/>argv,<sp/>1);&apos;<sp/>to<sp/>initialize<sp/>generator<sp/>seed<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;by<sp/>hash<sp/>code<sp/>of<sp/>the<sp/>command<sp/>line<sp/>params.<sp/>The<sp/>third<sp/>parameter<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4984"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;is<sp/>randomGeneratorVersion<sp/>(currently<sp/>the<sp/>latest<sp/>is<sp/>1).&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4273<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4989" refid="testlib_8h_1a7e6ebe263f2a877015210e0ac28c3e79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a7e6ebe263f2a877015210e0ac28c3e79" kindref="member">srand</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed)<sp/><ref refid="testlib_8h_1a390e9021e1ac7b756fdf9a49c3da47f9" kindref="member">RAND_THROW_STATEMENT</ref></highlight></codeline>
<codeline lineno="4990"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a5e727281f092efd3f19c6a84e2eacc01" kindref="member">quitf</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578a62d8da32e96f367adeed7ccb30436457" kindref="member">_fail</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>use<sp/>srand(),<sp/>you<sp/>should<sp/>use<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;registerGen(argc,<sp/>argv,<sp/>1);&apos;<sp/>to<sp/>initialize<sp/>generator<sp/>seed<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;by<sp/>hash<sp/>code<sp/>of<sp/>the<sp/>command<sp/>line<sp/>params.<sp/>The<sp/>third<sp/>parameter<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>randomGeneratorVersion<sp/>(currently<sp/>the<sp/>latest<sp/>is<sp/>1)<sp/>[ignored<sp/>seed=%u].&quot;</highlight><highlight class="normal">,<sp/>seed);</highlight></codeline>
<codeline lineno="4995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight></codeline>
<codeline lineno="4997" refid="testlib_8h_1a7b5d06041e39daeafd603dd998ce02c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a7b5d06041e39daeafd603dd998ce02c6" kindref="member">startTest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>testFileName<sp/>=<sp/>vtos(test);</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>freopen(testFileName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;wt&quot;</highlight><highlight class="normal">,<sp/>stdout))</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>write<sp/>file<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>testFileName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"></highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5006" refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_part(s);</highlight></codeline>
<codeline lineno="5008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"></highlight></codeline>
<codeline lineno="5010"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5011"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5013" refid="testlib_8h_1a99a404dab8181e5e96eb0a675082f75d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="testlib_8h_1a99a404dab8181e5e96eb0a675082f75d" kindref="member">englishEnding</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>%=<sp/>100;</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>/<sp/>10<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;th&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>%<sp/>10<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;st&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>%<sp/>10<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;nd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>%<sp/>10<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;rd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;th&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_ForwardIterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Separator&gt;</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5028"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5030" refid="testlib_8h_1a639102617cba0cd4773c91f5eb4a1755" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a639102617cba0cd4773c91f5eb4a1755" kindref="member">join</ref>(_ForwardIterator<sp/>first,<sp/>_ForwardIterator<sp/>last,<sp/>_Separator<sp/>separator)<sp/>{</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>repeated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(_ForwardIterator<sp/>i<sp/>=<sp/>first;<sp/>i<sp/>!=<sp/>last;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(repeated)</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>separator;</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repeated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>*i;</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="5041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_ForwardIterator&gt;</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5045"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5047" refid="testlib_8h_1a4d11cf2b81aaccdb03807cff7c1bae28" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a639102617cba0cd4773c91f5eb4a1755" kindref="member">join</ref>(_ForwardIterator<sp/>first,<sp/>_ForwardIterator<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a639102617cba0cd4773c91f5eb4a1755" kindref="member">join</ref>(first,<sp/>last,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Collection,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Separator&gt;</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5053"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5055" refid="testlib_8h_1a8c0f114f708064c2c01b47ab82cdf028" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a639102617cba0cd4773c91f5eb4a1755" kindref="member">join</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Collection<sp/>&amp;collection,<sp/>_Separator<sp/>separator)<sp/>{</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a639102617cba0cd4773c91f5eb4a1755" kindref="member">join</ref>(collection.begin(),<sp/>collection.end(),<sp/>separator);</highlight></codeline>
<codeline lineno="5057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Collection&gt;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5063" refid="testlib_8h_1a31e919f2108a1f317e66d345a23c4923" refkind="member"><highlight class="normal">std::string<sp/><ref refid="testlib_8h_1a639102617cba0cd4773c91f5eb4a1755" kindref="member">join</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Collection<sp/>&amp;collection)<sp/>{</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a639102617cba0cd4773c91f5eb4a1755" kindref="member">join</ref>(collection,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5074" refid="testlib_8h_1ad85d51a1b33f2422e08f3ca02dbd3127" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="testlib_8h_1ad85d51a1b33f2422e08f3ca02dbd3127" kindref="member">split</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>separator)<sp/>{</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>result;</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>item;</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/>separator)<sp/>{</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"></highlight></codeline>
<codeline lineno="5091"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5094" refid="testlib_8h_1a955ec7cfff0acb85ba9695bda2609499" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="testlib_8h_1ad85d51a1b33f2422e08f3ca02dbd3127" kindref="member">split</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;separators)<sp/>{</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(separators.empty())</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;(1,<sp/>s);</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>isSeparator(256);</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>separators.size();<sp/>i++)</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSeparator[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>(separators[i])]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>result;</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>item;</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSeparator[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>(s[i])])<sp/>{</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"></highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5120" refid="testlib_8h_1aab9e80a2f4e4203b27b11c5880850d8e" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="testlib_8h_1aab9e80a2f4e4203b27b11c5880850d8e" kindref="member">tokenize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>separator)<sp/>{</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>result;</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>item;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/>separator)<sp/>{</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item.empty())</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item.empty())</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal">__attribute__((</highlight><highlight class="keyword">const</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5141" refid="testlib_8h_1af67ac6c551dc21d30494892a51a7fbb7" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="testlib_8h_1aab9e80a2f4e4203b27b11c5880850d8e" kindref="member">tokenize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;separators)<sp/>{</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(separators.empty())</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;(1,<sp/>s);</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"></highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>isSeparator(256);</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>separators.size();<sp/>i++)</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSeparator[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>(separators[i])]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>result;</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>item;</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSeparator[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>(s[i])])<sp/>{</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item.empty())</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"></highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item.empty())</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"></highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"></highlight></codeline>
<codeline lineno="5165" refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" kindref="member">__testlib_expectedButFound</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/>std::string<sp/>expected,<sp/>std::string<sp/>found,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prepend)<sp/>{</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>message;</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(prepend)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>expected<sp/>&apos;%s&apos;,<sp/>but<sp/>found<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(prepend).c_str(),<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(expected).c_str(),<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(found).c_str());</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/><ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;expected<sp/>&apos;%s&apos;,<sp/>but<sp/>found<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(expected).c_str(),<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(found).c_str());</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1acec28096e85b471e7121ed06ba1eeb42" kindref="member">quit</ref>(result,<sp/>message);</highlight></codeline>
<codeline lineno="5174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight></codeline>
<codeline lineno="5176" refid="testlib_8h_1a4a02f43815b2ec1d3963a3d487234d0d" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" kindref="member">__testlib_expectedButFound</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>found,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prepend)<sp/>{</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>expectedString<sp/>=<sp/>removeDoubleTrailingZeroes(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;%.12f&quot;</highlight><highlight class="normal">,<sp/>expected));</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>foundString<sp/>=<sp/>removeDoubleTrailingZeroes(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;%.12f&quot;</highlight><highlight class="normal">,<sp/>found));</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" kindref="member">__testlib_expectedButFound</ref>(result,<sp/>expectedString,<sp/>foundString,<sp/>prepend);</highlight></codeline>
<codeline lineno="5180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"></highlight></codeline>
<codeline lineno="5182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5184"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>4,<sp/>5)))</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5186" refid="testlib_8h_1a3775e4b9dc20c18e8b0d509a145d5d90" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a3775e4b9dc20c18e8b0d509a145d5d90" kindref="member">expectedButFound</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/>T<sp/>expected,<sp/>T<sp/>found,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prependFormat<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(prependFormat,<sp/>prependFormat,<sp/>prepend);</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>expectedString<sp/>=<sp/>vtos(expected);</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>foundString<sp/>=<sp/>vtos(found);</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" kindref="member">__testlib_expectedButFound</ref>(result,<sp/>expectedString,<sp/>foundString,<sp/>prepend.c_str());</highlight></codeline>
<codeline lineno="5191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"></highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>4,<sp/>5)))</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5197" refid="testlib_8h_1ace65de365c59bd5b3c271f84cf884bd8" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><ref refid="testlib_8h_1ace65de365c59bd5b3c271f84cf884bd8" kindref="member">expectedButFound&lt;std::string&gt;</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/>std::string<sp/>expected,<sp/>std::string<sp/>found,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prependFormat,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(prependFormat,<sp/>prependFormat,<sp/>prepend);</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" kindref="member">__testlib_expectedButFound</ref>(result,<sp/>expected,<sp/>found,<sp/>prepend.c_str());</highlight></codeline>
<codeline lineno="5201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"></highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5205"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>4,<sp/>5)))</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5207" refid="testlib_8h_1a3cc2bbe22675e2d0b0bfaf8f61d005a8" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a3cc2bbe22675e2d0b0bfaf8f61d005a8" kindref="member">expectedButFound&lt;double&gt;</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>found,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prependFormat,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(prependFormat,<sp/>prependFormat,<sp/>prepend);</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>expectedString<sp/>=<sp/>removeDoubleTrailingZeroes(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;%.12f&quot;</highlight><highlight class="normal">,<sp/>expected));</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>foundString<sp/>=<sp/>removeDoubleTrailingZeroes(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;%.12f&quot;</highlight><highlight class="normal">,<sp/>found));</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" kindref="member">__testlib_expectedButFound</ref>(result,<sp/>expectedString,<sp/>foundString,<sp/>prepend.c_str());</highlight></codeline>
<codeline lineno="5212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight></codeline>
<codeline lineno="5214"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>4,<sp/>5)))</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5218" refid="testlib_8h_1a8c5e10df2297d4ebe22eb580285ae5de" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><ref refid="testlib_8h_1a8c5e10df2297d4ebe22eb580285ae5de" kindref="member">expectedButFound&lt;const char *&gt;</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expected,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*found,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prependFormat,</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(prependFormat,<sp/>prependFormat,<sp/>prepend);</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" kindref="member">__testlib_expectedButFound</ref>(result,<sp/>std::string(expected),<sp/>std::string(found),<sp/>prepend.c_str());</highlight></codeline>
<codeline lineno="5223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5227"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>4,<sp/>5)))</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5229" refid="testlib_8h_1a5f326691d44051de660eb6f3f25400f9" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testlib_8h_1a5f326691d44051de660eb6f3f25400f9" kindref="member">expectedButFound&lt;float&gt;</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>expected,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>found,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prependFormat,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(prependFormat,<sp/>prependFormat,<sp/>prepend);</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" kindref="member">__testlib_expectedButFound</ref>(result,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(expected),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(found),<sp/>prepend.c_str());</highlight></codeline>
<codeline lineno="5232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"></highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal">__attribute__<sp/>((<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref><sp/>(printf,<sp/>4,<sp/>5)))</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5238" refid="testlib_8h_1a1c7f66f9e3c4f693663ffc534807ea02" refkind="member"><highlight class="normal"><ref refid="testlib_8h_1aa1728270d73c5d1598de1fd691762eb1" kindref="member">NORETURN</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><ref refid="testlib_8h_1a1c7f66f9e3c4f693663ffc534807ea02" kindref="member">expectedButFound&lt;long double&gt;</ref>(<ref refid="testlib_8h_1aca738f43134375f0a18077d633f14578" kindref="member">TResult</ref><sp/>result,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>found,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prependFormat,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a795f6ad63580d1e0b860fbb9604a79db" kindref="member">FMT_TO_RESULT</ref>(prependFormat,<sp/>prependFormat,<sp/>prepend);</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a117c50c18ae39dbb09a488ac92a086db" kindref="member">__testlib_expectedButFound</ref>(result,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(expected),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(found),<sp/>prepend.c_str());</highlight></codeline>
<codeline lineno="5242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"></highlight></codeline>
<codeline lineno="5244"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>199711L<sp/>||<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_iterable<sp/>{</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U::iterator<sp/>*x);</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>test(U<sp/>*x);</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test&lt;T&gt;(0))<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="5254"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__testlib_enable_if<sp/>{</highlight></codeline>
<codeline lineno="5258"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__testlib_enable_if&lt;true,<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;</highlight></codeline>
<codeline lineno="5263"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"></highlight></codeline>
<codeline lineno="5265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>__testlib_enable_if&lt;!is_iterable&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type<sp/>__testlib_print_one(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t)<sp/>{</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="5268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"></highlight></codeline>
<codeline lineno="5270"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>__testlib_enable_if&lt;is_iterable&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type<sp/>__testlib_print_one(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t)<sp/>{</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::const_iterator<sp/>i<sp/>=<sp/>t.begin();<sp/>i<sp/>!=<sp/>t.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*i;</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"></highlight></codeline>
<codeline lineno="5282"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>__testlib_enable_if&lt;is_iterable&lt;std::string&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="5284"><highlight class="normal">__testlib_print_one&lt;std::string&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;t)<sp/>{</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="5286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__println_range(A<sp/>begin,<sp/>B<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(B<sp/>i<sp/>=<sp/>B(begin);<sp/>i<sp/>!=<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_print_one(*i);</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"></highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_iterator<sp/>{</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>makeT();</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*twoptrs[2];</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>twoptrs<sp/>&amp;test(...);</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R::iterator_category<sp/>*test(R);</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"></highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*test(R<sp/>*);</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"></highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test(makeT()))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="5316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_iterator&lt;T,<sp/>typename<sp/>__testlib_enable_if&lt;std::is_array&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5321"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"></highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>__testlib_enable_if&lt;!is_iterator&lt;B&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type<sp/>println(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(a);</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(b);</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>__testlib_enable_if&lt;is_iterator&lt;B&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;::type<sp/>println(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/>__println_range(a,<sp/>b);</highlight></codeline>
<codeline lineno="5334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>println(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/>__println_range(a,<sp/>b);</highlight></codeline>
<codeline lineno="5339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>println&lt;char&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(a);</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(b);</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"></highlight></codeline>
<codeline lineno="5349"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>println(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(x);</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"></highlight></codeline>
<codeline lineno="5355"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>println(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;c)<sp/>{</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(a);</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(b);</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(c);</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"></highlight></codeline>
<codeline lineno="5365"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>println(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;d)<sp/>{</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(a);</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(b);</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(c);</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(d);</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>println(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(a);</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(b);</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(c);</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(d);</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(e);</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"></highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>println(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E<sp/>&amp;e,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(a);</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(b);</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(c);</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(d);</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(e);</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(f);</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>println(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E<sp/>&amp;e,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F<sp/>&amp;f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G<sp/>&amp;g)<sp/>{</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(a);</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(b);</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(c);</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(d);</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(e);</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(f);</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_print_one(g);</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"></highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>opts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5426"><highlight class="normal"></highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestlibOpt<sp/>{</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>value;</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>used;</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/>TestlibOpt()<sp/>:<sp/>value(),<sp/>used(false)<sp/>{}</highlight></codeline>
<codeline lineno="5436"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"></highlight></codeline>
<codeline lineno="5451"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>getOptType(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s<sp/>||<sp/>strlen(s)<sp/>&lt;=<sp/>1)</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"></highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isalpha(s[1]))</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isalpha(s[2])<sp/>?<sp/>2<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"></highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"></highlight></codeline>
<codeline lineno="5494"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>parseOpt(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>std::map&lt;std::string,<sp/>TestlibOpt&gt;<sp/>&amp;opts)<sp/>{</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>argc)</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"></highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>getOptType(argv[index]),<sp/>inc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>key(argv[index]<sp/>+<sp/>type),<sp/>val;</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sep<sp/>=<sp/>key.find(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sep<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>key.substr(sep<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>key.substr(0,<sp/>sep);</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>+<sp/>1<sp/>&lt;<sp/>argc<sp/>&amp;&amp;<sp/>getOptType(argv[index<sp/>+<sp/>1])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>argv[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key.length()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>isdigit(key[1]))<sp/>{</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>key.substr(1);</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>key.substr(0,<sp/>1);</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts[key].value<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inc;</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"></highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inc;</highlight></codeline>
<codeline lineno="5524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"></highlight></codeline>
<codeline lineno="5529"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>__testlib_argv;</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"></highlight></codeline>
<codeline lineno="5534"><highlight class="normal">std::map&lt;std::string,<sp/>TestlibOpt&gt;<sp/>__testlib_opts;</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"></highlight></codeline>
<codeline lineno="5543"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__testlib_ensureNoUnusedOptsFlag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"></highlight></codeline>
<codeline lineno="5549"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__testlib_ensureNoUnusedOptsSuppressed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"></highlight></codeline>
<codeline lineno="5555"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareOpts(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>argc&gt;=0<sp/>but<sp/>found<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>toString(argc));</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argc);<sp/></highlight><highlight class="comment">//<sp/>NOLINT(hicpp-use-auto,modernize-use-auto)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_opts<sp/>=<sp/>std::map&lt;std::string,<sp/>TestlibOpt&gt;();</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>1;<sp/>index<sp/>&lt;<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>;<sp/>index<sp/>+=<sp/>parseOpt(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>,<sp/>argv,<sp/>index,<sp/>__testlib_opts));</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_argv<sp/>=<sp/>std::vector&lt;std::string&gt;(<ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/><ref refid="checker_8cpp_1a76f11d9a0a47b94f72c2d0e77fb32240" kindref="member">n</ref>;<sp/>index++)</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_argv[index]<sp/>=<sp/>argv[index];</highlight></codeline>
<codeline lineno="5564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"></highlight></codeline>
<codeline lineno="5570"><highlight class="normal">std::string<sp/>__testlib_indexToArgv(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(__testlib_argv.size()))</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>index<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>toString(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>is<sp/>out<sp/>of<sp/>range<sp/>[0,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>toString(__testlib_argv.size())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_argv[size_t(index)];</highlight></codeline>
<codeline lineno="5575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"></highlight></codeline>
<codeline lineno="5581"><highlight class="normal">std::string<sp/>__testlib_keyToOpts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>__testlib_opts.find(key);</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>__testlib_opts.end())</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>unknown<sp/>key<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(key)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;second.used<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second.value;</highlight></codeline>
<codeline lineno="5587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"></highlight></codeline>
<codeline lineno="5589"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5590"><highlight class="normal">T<sp/>optValueToIntegral(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nonnegative);</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"></highlight></codeline>
<codeline lineno="5592"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>optValueToLongDouble(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s);</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"></highlight></codeline>
<codeline lineno="5594"><highlight class="normal">std::string<sp/>parseExponentialOptValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>||<sp/>s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>typical<sp/>exponential<sp/>notation<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>e<sp/>=<sp/>s.substr(pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!e.empty()<sp/>&amp;&amp;<sp/>e[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>e.substr(1);</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.empty())</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>typical<sp/>exponential<sp/>notation<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.length()<sp/>&gt;<sp/>20)</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>typical<sp/>exponential<sp/>notation<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ne<sp/>=<sp/>optValueToIntegral&lt;int&gt;(e,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>num<sp/>=<sp/>s.substr(0,<sp/>pos);</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num.length()<sp/>&gt;<sp/>20)</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>typical<sp/>exponential<sp/>notation<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!num.empty()<sp/>&amp;&amp;<sp/>num[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num.substr(1);</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/>optValueToLongDouble(num);</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>minus<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minus<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num.substr(1);</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>+ne;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sep<sp/>=<sp/>num.find(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sep<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sep<sp/>+<sp/>1<sp/>==<sp/>num.length())</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num[sep]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(num[sep],<sp/>num[sep<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>-ne;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sep<sp/>=<sp/>num.find(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sep<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.insert(num.begin()<sp/>+<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(num.length())<sp/>-<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sep<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.insert(num.begin()<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(num[sep<sp/>-<sp/>1],<sp/>num[sep]);</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!num.empty()<sp/>&amp;&amp;<sp/>num[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num.substr(1);</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num.find(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos<sp/>&amp;&amp;<sp/>num.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num.substr(0,<sp/>num.length()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!num.empty()<sp/>&amp;&amp;<sp/>num.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num.substr(0,<sp/>num.length()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!num.empty()<sp/>&amp;&amp;<sp/>num[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>||<sp/>num.empty())</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.insert(num.begin(),<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(minus<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>num;</highlight></codeline>
<codeline lineno="5654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"></highlight></codeline>
<codeline lineno="5656"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5657"><highlight class="normal">T<sp/>optValueToIntegral(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nonnegative)<sp/>{</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s(parseExponentialOptValue(s_));</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.empty())</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>integer<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>about<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>+1;</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[pos]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nonnegative)</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>non-negative<sp/>integer<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>pos;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>s[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>integer<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>T(value<sp/>*<sp/>10<sp/>+<sp/>s[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>about<sp/>=<sp/>about<sp/>*<sp/>10<sp/>+<sp/>s[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>*=<sp/>sign;</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/>about<sp/>*=<sp/>sign;</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabsl(value<sp/>-<sp/>about)<sp/>&gt;<sp/>0.1)</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>integer<sp/>overflow:<sp/>expected<sp/>integer<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="5682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"></highlight></codeline>
<codeline lineno="5684"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>optValueToLongDouble(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s_)<sp/>{</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s(parseExponentialOptValue(s_));</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.empty())</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>float<sp/>number<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>+1;</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[pos]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>period<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mul<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>pos;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(period)</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>float<sp/>number<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(period)</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mul<sp/>*=<sp/>10.0;</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>s[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>expected<sp/>float<sp/>number<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(s_)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(period)</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>(s[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>/<sp/>mul;</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>value<sp/>*<sp/>10<sp/>+<sp/>s[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>*=<sp/>sign;</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="5717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"></highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_opt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_ensureNoUnusedOptsFlag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_opts.count(key)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="5729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>About<sp/>the<sp/>following<sp/>part<sp/>for<sp/>opt<sp/>with<sp/>2<sp/>and<sp/>3<sp/>arguments.</highlight></codeline>
<codeline lineno="5732"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5733"><highlight class="comment"><sp/>*<sp/>To<sp/>parse<sp/>the<sp/>argv/opts<sp/>correctly<sp/>for<sp/>a<sp/>give<sp/>type<sp/>(integer,<sp/>floating<sp/>point<sp/>or</highlight></codeline>
<codeline lineno="5734"><highlight class="comment"><sp/>*<sp/>string),<sp/>some<sp/>meta<sp/>programming<sp/>must<sp/>be<sp/>done<sp/>to<sp/>determine<sp/>the<sp/>type<sp/>of</highlight></codeline>
<codeline lineno="5735"><highlight class="comment"><sp/>*<sp/>the<sp/>type,<sp/>and<sp/>use<sp/>the<sp/>correct<sp/>parsing<sp/>function<sp/>accordingly.</highlight></codeline>
<codeline lineno="5736"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5737"><highlight class="comment"><sp/>*<sp/>The<sp/>pseudo<sp/>algorithm<sp/>for<sp/>determining<sp/>the<sp/>type<sp/>of<sp/>T<sp/>and<sp/>parse<sp/>it<sp/>accordingly</highlight></codeline>
<codeline lineno="5738"><highlight class="comment"><sp/>*<sp/>is<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="5739"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5740"><highlight class="comment"><sp/>*<sp/>if<sp/>(T<sp/>is<sp/>integral<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="5741"><highlight class="comment"><sp/>*<sp/><sp/><sp/>if<sp/>(T<sp/>is<sp/>unsigned)<sp/>{</highlight></codeline>
<codeline lineno="5742"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>parse<sp/>the<sp/>argv/opt<sp/>as<sp/>an<sp/>**unsigned<sp/>integer**<sp/>of<sp/>type<sp/>T.</highlight></codeline>
<codeline lineno="5743"><highlight class="comment"><sp/>*<sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="5744"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>parse<sp/>the<sp/>argv/opt<sp/>as<sp/>an<sp/>**signed<sp/>integer**<sp/>of<sp/>type<sp/>T.</highlight></codeline>
<codeline lineno="5745"><highlight class="comment"><sp/>*<sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="5746"><highlight class="comment"><sp/>*<sp/><sp/><sp/>if<sp/>(T<sp/>is<sp/>floating<sp/>point<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="5747"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>parse<sp/>the<sp/>argv/opt<sp/>as<sp/>an<sp/>**floating<sp/>point**<sp/>of<sp/>type<sp/>T.</highlight></codeline>
<codeline lineno="5748"><highlight class="comment"><sp/>*<sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="5749"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>T<sp/>should<sp/>be<sp/>std::string</highlight></codeline>
<codeline lineno="5750"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>just<sp/>the<sp/>raw<sp/>content<sp/>of<sp/>the<sp/>argv/opts.</highlight></codeline>
<codeline lineno="5751"><highlight class="comment"><sp/>*<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5752"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="5753"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5754"><highlight class="comment"><sp/>*<sp/>To<sp/>help<sp/>with<sp/>meta<sp/>programming,<sp/>some<sp/>`opt`<sp/>function<sp/>with<sp/>2<sp/>or<sp/>3<sp/>arguments<sp/>are</highlight></codeline>
<codeline lineno="5755"><highlight class="comment"><sp/>*<sp/>defined.</highlight></codeline>
<codeline lineno="5756"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5757"><highlight class="comment"><sp/>*<sp/>Opt<sp/>with<sp/>3<sp/>arguments:<sp/><sp/><sp/><sp/>T<sp/>opt(true/false<sp/>is_integral,<sp/>true/false<sp/>is_unsigned,<sp/>index/key)</highlight></codeline>
<codeline lineno="5758"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5759"><highlight class="comment"><sp/>*<sp/><sp/><sp/>+<sp/>The<sp/>first<sp/>argument<sp/>is<sp/>for<sp/>determining<sp/>whether<sp/>the<sp/>type<sp/>T<sp/>is<sp/>an<sp/>integral</highlight></codeline>
<codeline lineno="5760"><highlight class="comment"><sp/>*<sp/><sp/><sp/>type.<sp/>That<sp/>is,<sp/>the<sp/>result<sp/>of<sp/>std::is_integral&lt;T&gt;()<sp/>should<sp/>be<sp/>passed<sp/>to</highlight></codeline>
<codeline lineno="5761"><highlight class="comment"><sp/>*<sp/><sp/><sp/>this<sp/>argument.<sp/>When<sp/>false,<sp/>the<sp/>type<sp/>_should_<sp/>be<sp/>either<sp/>floating<sp/>point<sp/>or<sp/>a</highlight></codeline>
<codeline lineno="5762"><highlight class="comment"><sp/>*<sp/><sp/><sp/>std::string.</highlight></codeline>
<codeline lineno="5763"><highlight class="comment"><sp/>*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5764"><highlight class="comment"><sp/>*<sp/><sp/><sp/>+<sp/>The<sp/>second<sp/>argument<sp/>is<sp/>for<sp/>determining<sp/>whether<sp/>the<sp/>signedness<sp/>of<sp/>the<sp/>type</highlight></codeline>
<codeline lineno="5765"><highlight class="comment"><sp/>*<sp/><sp/><sp/>T<sp/>(if<sp/>it<sp/>is<sp/>unsigned<sp/>or<sp/>signed).<sp/>That<sp/>is,<sp/>the<sp/>result<sp/>of</highlight></codeline>
<codeline lineno="5766"><highlight class="comment"><sp/>*<sp/><sp/><sp/>std::is_unsigned&lt;T&gt;()<sp/>should<sp/>be<sp/>passed<sp/>to<sp/>this<sp/>argument.<sp/>This<sp/>argument<sp/>can</highlight></codeline>
<codeline lineno="5767"><highlight class="comment"><sp/>*<sp/><sp/><sp/>be<sp/>ignored<sp/>if<sp/>the<sp/>first<sp/>one<sp/>is<sp/>false,<sp/>because<sp/>it<sp/>only<sp/>applies<sp/>to<sp/>integer.</highlight></codeline>
<codeline lineno="5768"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5769"><highlight class="comment"><sp/>*<sp/>Opt<sp/>with<sp/>2<sp/>arguments:<sp/><sp/><sp/><sp/>T<sp/>opt(true/false<sp/>is_floating_point,<sp/>index/key)</highlight></codeline>
<codeline lineno="5770"><highlight class="comment"><sp/>*<sp/><sp/><sp/>+<sp/>The<sp/>first<sp/>argument<sp/>is<sp/>for<sp/>determining<sp/>whether<sp/>the<sp/>type<sp/>T<sp/>is<sp/>a<sp/>floating</highlight></codeline>
<codeline lineno="5771"><highlight class="comment"><sp/>*<sp/><sp/><sp/>point<sp/>type.<sp/>That<sp/>is,<sp/>the<sp/>result<sp/>of<sp/>std::is_floating_point&lt;T&gt;()<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="5772"><highlight class="comment"><sp/>*<sp/><sp/><sp/>passed<sp/>to<sp/>this<sp/>argument.<sp/>When<sp/>false,<sp/>the<sp/>type<sp/>_should_<sp/>be<sp/>a<sp/>std::string.</highlight></codeline>
<codeline lineno="5773"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5774"><highlight class="normal"></highlight></codeline>
<codeline lineno="5775"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5776"><highlight class="normal">T<sp/>opt(std::false_type<sp/>is_floating_point,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"></highlight></codeline>
<codeline lineno="5778"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5779"><highlight class="normal">std::string<sp/>opt(std::false_type<sp/></highlight><highlight class="comment">/*is_floating_point*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_indexToArgv(index);</highlight></codeline>
<codeline lineno="5781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"></highlight></codeline>
<codeline lineno="5783"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5784"><highlight class="normal">T<sp/>opt(std::true_type<sp/></highlight><highlight class="comment">/*is_floating_point*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(optValueToLongDouble(__testlib_indexToArgv(index)));</highlight></codeline>
<codeline lineno="5786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"></highlight></codeline>
<codeline lineno="5788"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="5789"><highlight class="normal">T<sp/>opt(std::false_type<sp/></highlight><highlight class="comment">/*is_integral*/</highlight><highlight class="normal">,<sp/>U<sp/></highlight><highlight class="comment">/*is_unsigned*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;T&gt;(std::is_floating_point&lt;T&gt;(),<sp/>index);</highlight></codeline>
<codeline lineno="5791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"></highlight></codeline>
<codeline lineno="5793"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5794"><highlight class="normal">T<sp/>opt(std::true_type<sp/></highlight><highlight class="comment">/*is_integral*/</highlight><highlight class="normal">,<sp/>std::false_type<sp/></highlight><highlight class="comment">/*is_unsigned*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optValueToIntegral&lt;T&gt;(__testlib_indexToArgv(index),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"></highlight></codeline>
<codeline lineno="5798"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5799"><highlight class="normal">T<sp/>opt(std::true_type<sp/></highlight><highlight class="comment">/*is_integral*/</highlight><highlight class="normal">,<sp/>std::true_type<sp/></highlight><highlight class="comment">/*is_unsigned*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optValueToIntegral&lt;T&gt;(__testlib_indexToArgv(index),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"></highlight></codeline>
<codeline lineno="5803"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>opt(std::true_type<sp/></highlight><highlight class="comment">/*is_integral*/</highlight><highlight class="normal">,<sp/>std::true_type<sp/></highlight><highlight class="comment">/*is_unsigned*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>value<sp/>=<sp/>__testlib_indexToArgv(index);</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>||<sp/>value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal"><sp/>||<sp/>value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>opt<sp/>by<sp/>index<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>toString(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;:<sp/>expected<sp/>bool<sp/>true/false<sp/>or<sp/>0/1<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(value)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"></highlight></codeline>
<codeline lineno="5817"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5818"><highlight class="normal">T<sp/>opt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;T&gt;(std::is_integral&lt;T&gt;(),<sp/>std::is_unsigned&lt;T&gt;(),<sp/>index);</highlight></codeline>
<codeline lineno="5820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"></highlight></codeline>
<codeline lineno="5825"><highlight class="normal">std::string<sp/>opt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;std::string&gt;(index);</highlight></codeline>
<codeline lineno="5827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"></highlight></codeline>
<codeline lineno="5833"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5834"><highlight class="normal">T<sp/>opt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;default_value)<sp/>{</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(__testlib_argv.size()))<sp/>{</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;T&gt;(index);</highlight></codeline>
<codeline lineno="5839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"></highlight></codeline>
<codeline lineno="5845"><highlight class="normal">std::string<sp/>opt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;default_value)<sp/>{</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;std::string&gt;(index,<sp/>default_value);</highlight></codeline>
<codeline lineno="5847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"></highlight></codeline>
<codeline lineno="5849"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5850"><highlight class="normal">T<sp/>opt(std::false_type<sp/>is_floating_point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key);</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"></highlight></codeline>
<codeline lineno="5852"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5853"><highlight class="normal">std::string<sp/>opt(std::false_type<sp/></highlight><highlight class="comment">/*is_floating_point*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__testlib_keyToOpts(key);</highlight></codeline>
<codeline lineno="5855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"></highlight></codeline>
<codeline lineno="5857"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5858"><highlight class="normal">T<sp/>opt(std::true_type<sp/></highlight><highlight class="comment">/*is_integral*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(optValueToLongDouble(__testlib_keyToOpts(key)));</highlight></codeline>
<codeline lineno="5860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"></highlight></codeline>
<codeline lineno="5862"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="5863"><highlight class="normal">T<sp/>opt(std::false_type<sp/></highlight><highlight class="comment">/*is_integral*/</highlight><highlight class="normal">,<sp/>U,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;T&gt;(std::is_floating_point&lt;T&gt;(),<sp/>key);</highlight></codeline>
<codeline lineno="5865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"></highlight></codeline>
<codeline lineno="5867"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5868"><highlight class="normal">T<sp/>opt(std::true_type<sp/></highlight><highlight class="comment">/*is_integral*/</highlight><highlight class="normal">,<sp/>std::false_type<sp/></highlight><highlight class="comment">/*is_unsigned*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optValueToIntegral&lt;T&gt;(__testlib_keyToOpts(key),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"></highlight></codeline>
<codeline lineno="5872"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5873"><highlight class="normal">T<sp/>opt(std::true_type<sp/></highlight><highlight class="comment">/*is_integral*/</highlight><highlight class="normal">,<sp/>std::true_type<sp/></highlight><highlight class="comment">/*is_unsigned*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optValueToIntegral&lt;T&gt;(__testlib_keyToOpts(key),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"></highlight></codeline>
<codeline lineno="5877"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>opt(std::true_type<sp/></highlight><highlight class="comment">/*is_integral*/</highlight><highlight class="normal">,<sp/>std::true_type<sp/></highlight><highlight class="comment">/*is_unsigned*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_opt(key))</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>value<sp/>=<sp/>__testlib_keyToOpts(key);</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>||<sp/>value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal"><sp/>||<sp/>value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_fail(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>key<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(key)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;:<sp/>expected<sp/>bool<sp/>true/false<sp/>or<sp/>0/1<sp/>but<sp/>&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(value)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"></highlight></codeline>
<codeline lineno="5893"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5894"><highlight class="normal">T<sp/>opt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;T&gt;(std::is_integral&lt;T&gt;(),<sp/>std::is_unsigned&lt;T&gt;(),<sp/>key);</highlight></codeline>
<codeline lineno="5896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"></highlight></codeline>
<codeline lineno="5901"><highlight class="normal">std::string<sp/>opt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;std::string&gt;(key);</highlight></codeline>
<codeline lineno="5903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"></highlight></codeline>
<codeline lineno="5905"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Scorer<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5906"><highlight class="normal"></highlight></codeline>
<codeline lineno="5907"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>TestResultVerdict<sp/>{</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/>SKIPPED,</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/>OK,</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/>WRONG_ANSWER,</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/>RUNTIME_ERROR,</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/>TIME_LIMIT_EXCEEDED,</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/>IDLENESS_LIMIT_EXCEEDED,</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/>MEMORY_LIMIT_EXCEEDED,</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/>COMPILATION_ERROR,</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/>CRASHED,</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/>FAILED</highlight></codeline>
<codeline lineno="5918"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"></highlight></codeline>
<codeline lineno="5920"><highlight class="normal">std::string<sp/>serializeVerdict(TestResultVerdict<sp/>verdict)<sp/>{</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(verdict)<sp/>{</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SKIPPED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;SKIPPED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WRONG_ANSWER:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;WRONG_ANSWER&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RUNTIME_ERROR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;RUNTIME_ERROR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TIME_LIMIT_EXCEEDED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;TIME_LIMIT_EXCEEDED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IDLENESS_LIMIT_EXCEEDED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;IDLENESS_LIMIT_EXCEEDED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MEMORY_LIMIT_EXCEEDED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;MEMORY_LIMIT_EXCEEDED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>COMPILATION_ERROR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;COMPILATION_ERROR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CRASHED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;CRASHED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FAILED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>verdict&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"></highlight></codeline>
<codeline lineno="5936"><highlight class="normal">TestResultVerdict<sp/>deserializeTestResultVerdict(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;SKIPPED&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SKIPPED;</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OK;</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;WRONG_ANSWER&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WRONG_ANSWER;</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;RUNTIME_ERROR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUNTIME_ERROR;</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;TIME_LIMIT_EXCEEDED&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TIME_LIMIT_EXCEEDED;</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;IDLENESS_LIMIT_EXCEEDED&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IDLENESS_LIMIT_EXCEEDED;</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MEMORY_LIMIT_EXCEEDED&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MEMORY_LIMIT_EXCEEDED;</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;COMPILATION_ERROR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>COMPILATION_ERROR;</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CRASHED&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CRASHED;</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILED;</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc" kindref="member">ensuref</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>serialized<sp/>TestResultVerdict&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>return<sp/>actually.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILED;</highlight></codeline>
<codeline lineno="5960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"></highlight></codeline>
<codeline lineno="5962"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestResult<sp/>{</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testIndex;</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>testset;</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>group;</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/>TestResultVerdict<sp/>verdict;</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>points;</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeConsumed;</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>memoryConsumed;</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>input;</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>output;</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>answer;</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exitCode;</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>checkerComment;</highlight></codeline>
<codeline lineno="5975"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"></highlight></codeline>
<codeline lineno="5977"><highlight class="normal">std::string<sp/>serializePoints(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>points)<sp/>{</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isnan(points))</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c[64];</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(c,<sp/>64,<sp/></highlight><highlight class="stringliteral">&quot;%.03lf&quot;</highlight><highlight class="normal">,<sp/>points);</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"></highlight></codeline>
<codeline lineno="5987"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deserializePoints(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.empty())</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc" kindref="member">ensuref</ref>(sscanf(s.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">,<sp/>&amp;result)<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>serialized<sp/>points&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"></highlight></codeline>
<codeline lineno="5997"><highlight class="normal">std::string<sp/>escapeTestResultString(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>||<sp/>s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"></highlight></codeline>
<codeline lineno="6013"><highlight class="normal">std::string<sp/>unescapeTestResultString(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/>s.length())<sp/>{</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal"><sp/>||<sp/>s[i<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>s[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"></highlight></codeline>
<codeline lineno="6032"><highlight class="normal">std::string<sp/>serializeTestResult(TestResult<sp/>tr)<sp/>{</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>std::to_string(tr.testIndex);</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>escapeTestResultString(tr.testset);</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>escapeTestResultString(tr.group);</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>serializeVerdict(tr.verdict);</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>serializePoints(tr.points);</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>std::to_string(tr.timeConsumed);</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>std::to_string(tr.memoryConsumed);</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>escapeTestResultString(tr.input);</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>escapeTestResultString(tr.output);</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>escapeTestResultString(tr.answer);</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>std::to_string(tr.exitCode);</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>escapeTestResultString(tr.checkerComment);</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"></highlight></codeline>
<codeline lineno="6060"><highlight class="normal">TestResult<sp/>deserializeTestResult(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>items;</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>t;</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>s.length())</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>s[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>items.push_back(t);</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>s[i];</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/><sp/><sp/>items.push_back(t);</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"></highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc" kindref="member">ensuref</ref>(items.size()<sp/>==<sp/>12,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>TestResult<sp/>serialization:<sp/>expected<sp/>exactly<sp/>12<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/>TestResult<sp/>tr;</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.testIndex<sp/>=<sp/>stoi(items[pos++]);</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.testset<sp/>=<sp/>unescapeTestResultString(items[pos++]);</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.group<sp/>=<sp/>unescapeTestResultString(items[pos++]);</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.verdict<sp/>=<sp/>deserializeTestResultVerdict(items[pos++]);</highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.points<sp/>=<sp/>deserializePoints(items[pos++]);</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.timeConsumed<sp/>=<sp/>stoll(items[pos++]);</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.memoryConsumed<sp/>=<sp/>stoll(items[pos++]);</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.input<sp/>=<sp/>unescapeTestResultString(items[pos++]);</highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.output<sp/>=<sp/>unescapeTestResultString(items[pos++]);</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.answer<sp/>=<sp/>unescapeTestResultString(items[pos++]);</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.exitCode<sp/>=<sp/>stoi(items[pos++]);</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.checkerComment<sp/>=<sp/>unescapeTestResultString(items[pos++]);</highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tr;</highlight></codeline>
<codeline lineno="6098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6099"><highlight class="normal"></highlight></codeline>
<codeline lineno="6100"><highlight class="normal">std::vector&lt;TestResult&gt;<sp/>readTestResults(std::string<sp/>fileName)<sp/>{</highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>stream;</highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/><sp/><sp/>stream.open(fileName.c_str(),<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1aa645d5ce2acb62ee61977d4ecf8e4dbc" kindref="member">ensuref</ref>(stream.is_open(),<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>read<sp/>test<sp/>results<sp/>file<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>fileName.c_str());</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestResult&gt;<sp/>result;</highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(getline(stream,<sp/>line))</highlight></codeline>
<codeline lineno="6107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!line.empty())</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(deserializeTestResult(line));</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/>stream.close();</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"></highlight></codeline>
<codeline lineno="6113"><highlight class="normal">std::function&lt;double(std::vector&lt;TestResult&gt;)&gt;<sp/>__testlib_scorer;</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestlibScorerGuard<sp/>{</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/>~TestlibScorerGuard()<sp/>{</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>==<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa" kindref="member">_scorer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="6118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestResult&gt;<sp/>testResults;</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4" kindref="member">eof</ref>())<sp/>{</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>line<sp/>=<sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683" kindref="member">readLine</ref>();</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!line.empty())</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testResults.push_back(deserializeTestResult(line));</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a80e53f1d7a022f34f8d88839de43d6b5" kindref="member">readEof</ref>();</highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%.3f\n&quot;</highlight><highlight class="normal">,<sp/>__testlib_scorer(testResults));</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6128"><highlight class="normal">}<sp/>__testlib_scorer_guard;</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"></highlight></codeline>
<codeline lineno="6130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerScorer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/>std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(std::vector&lt;TestResult&gt;)&gt;<sp/>scorer)<sp/>{</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Suppress<sp/>unused.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)(argc),<sp/>(void)(argv);</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"></highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_ensuresPreconditions();</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"></highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1a94143519d4511e7adb6c77b5c715eeaf" kindref="member">testlibMode</ref><sp/>=<sp/><ref refid="testlib_8h_1a72dc574602eb75df785ecfc398a3158fa1bec4ab4fa6a6927ec64b3143afa14fa" kindref="member">_scorer</ref>;</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_set_binary(stdin);</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"></highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a249983cd8365347d249485c7840e3424" kindref="member">init</ref>(stdin,<sp/><ref refid="testlib_8h_1ae73df2968f2f656074dc00e062600ddba090858be22ac48bf83855133ac07036a" kindref="member">_input</ref>);</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testlib_8h_1ad3874376581d36b1067d501d534d7b34" kindref="member">inf</ref>.<ref refid="struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c" kindref="member">strict</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"></highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_scorer<sp/>=<sp/>scorer;</highlight></codeline>
<codeline lineno="6143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"></highlight></codeline>
<codeline lineno="6145"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Scorer<sp/>ended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6146"><highlight class="normal"></highlight></codeline>
<codeline lineno="6155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6156"><highlight class="normal">T<sp/>opt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;default_value)<sp/>{</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_opt(key))<sp/>{</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;T&gt;(key);</highlight></codeline>
<codeline lineno="6161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"></highlight></codeline>
<codeline lineno="6171"><highlight class="normal">std::string<sp/>opt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;default_value)<sp/>{</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt&lt;std::string&gt;(key,<sp/>default_value);</highlight></codeline>
<codeline lineno="6173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"></highlight></codeline>
<codeline lineno="6182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ensureNoUnusedOpts()<sp/>{</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;opt:<sp/>__testlib_opts)<sp/>{</highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!opt.second.used)<sp/>{</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__testlib_fail(<ref refid="testlib_8h_1a1921b31564b858b45e94efff9e9d54bf" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;Opts:<sp/>unused<sp/>key<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/><ref refid="testlib_8h_1a04fed71ae23afb50bb036e98cafc4d84" kindref="member">compress</ref>(opt.first).c_str()));</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6189"><highlight class="normal"></highlight></codeline>
<codeline lineno="6190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>suppressEnsureNoUnusedOpts()<sp/>{</highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/><sp/><sp/>__testlib_ensureNoUnusedOptsSuppressed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"></highlight></codeline>
<codeline lineno="6194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestlibFinalizeGuard::autoEnsureNoUnusedOpts()<sp/>{</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__testlib_ensureNoUnusedOptsFlag<sp/>&amp;&amp;<sp/>!__testlib_ensureNoUnusedOptsSuppressed)<sp/>{</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ensureNoUnusedOpts();</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"></highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><ref refid="struct_testlib_finalize_guard" kindref="compound">TestlibFinalizeGuard</ref><sp/><ref refid="testlib_8h_1a576c1be9a11f2136d2bfa955394d4575" kindref="member">testlibFinalizeGuard</ref>;</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"></highlight></codeline>
<codeline lineno="6202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/testlib.h"/>
  </compounddef>
</doxygen>
